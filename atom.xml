<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>오늘도 끄적끄적</title>
  
  <subtitle>느리더라도 꾸준하게</subtitle>
  <link href="https://perfectacle.github.io/atom.xml" rel="self"/>
  
  <link href="https://perfectacle.github.io/"/>
  <updated>2022-06-06T08:23:56.596Z</updated>
  <id>https://perfectacle.github.io/</id>
  
  <author>
    <name>양권성</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TDD는 Design Acitivity이다.</title>
    <link href="https://perfectacle.github.io/2022/06/06/tdd-is-design-activity/"/>
    <id>https://perfectacle.github.io/2022/06/06/tdd-is-design-activity/</id>
    <published>2022-06-06T14:39:22.000Z</published>
    <updated>2022-06-06T08:23:56.596Z</updated>
    
    <content type="html"><![CDATA[<p>1~2년 전 쯤 존경하는 개발자 분과 함께 <a href="http://www.mockobjects.com/2009/09/brief-history-of-mock-objects.html">A Brief History of Mock Objects</a>라는 아티클을 함께 본 적이 있다.<br>개인적으로 이렇게 특정 개념의 근본이 된다던지, 해당 분야의 대가들이 쓴 아티클들을 함께 보는 것으로 인해 굉장히 많은 인사이트들이 생겼던 것 같다.<br>객체의 테스트 때문에 추가했던 getter로부터의 해방을 위해 고민하던 것으로 시작한 게 Mock의 탄생이라는 사실을 알게 되었을 때는 정말 위대한 탄생이라고 생각했다.  </p><p>그리고 문득 시간이 지나 해당 아티클을 다시 보고 싶어졌다. (물론 해당 아티클은 <a href="https://www.yes24.com/Product/Goods/9008455">테스트 주도 개발로 배우는 객체 지향 설계와 실천</a> 책의 후기에 한글로 적혀있다.)<br>아티클을 보던 중에 후반 부분에 Mock과 관련해서 <a href="http://jmock.org/oopsla2004.pdf">Mock Roles, not Objects</a>라는 논문까지 썼다는 걸 보고 해당 논문까지 봐야 Mock에 대해 정확한 이해를 할 수 있을 것 같아 해당 논문을 보게 되었다.<br>그리고 목의 역사와 마찬가지로 해당 논문도 너무나 감명이 깊어 한 번 느낀점이나 내용을 정리해보고 싶었다.</p><h2 id="Writing-tests-is-a-design-activity"><a href="#Writing-tests-is-a-design-activity" class="headerlink" title="Writing tests is a design activity"></a>Writing tests is a design activity</h2><p>먼저 TDD(Test Driven Development)에는 크게 두 가지 관점이 존재할 것 같다.  </p><p>첫 번째로 “검증”이다.<br>코드들이 의도대로 동작하는지, 버그는 없는지 검증하는 것이다.<br>이를 통해 프로덕션에 코드를 내보내도 된다는 자신감이 올라가고, 리팩토링을 하거나 신규 기능을 추가하더라도 코드의 동작은 변하지 않았음에 확신을 가질 수 있다.  </p><p>두 번째로 “설계”이다.<br>나의 코드를 검증하려고 테스트를 짜려고 하는데 테스트를 짜기가 힘들다면 “Code Smell”이 난다고 할 수 있다. (코드에 뭔가 구린 내가 나는 것이다.)<br>이를 통해 적절한 책임을 가진 객체로 쪼갬으로 인해 더 나은 설계로 유도해낼 수 있을 것이다.</p><p>나는 첫 번째 목적인 검증에 좀 더 집중했다.<br>더 나은 설계도 물론 중요하지만 일단 버그가 없는 게 “1순위”라고 생각했기 때문이다.<br>하지만 그러다보니 TDD를 하려고 할 때, 즉 신규 기능을 구현할 때 테스트를 먼저 짜려고 할 때 어디서부터 코드를 짜야할지, 뭘 테스트해야할지 막막했다.<br>아직 검증할 게 없는데 뭘 검증한단 말인가?<br>그래서 번번이 테스트부터 짜보겠다는 실패로 돌아가고, 코드를 짠 후에 내가 코드를 제대로 짰는지 검증하는 목적으로 테스트를 나중에 작성했다.  </p><p>나의 이런 TDD는 접근 방법부터 잘못됐던 것 같다.<br>Test “Driven” Development면 테스트가 (나의 어플리케이션 코드를) 주도해야하는데 전혀 주도하고 있지 못했다.<br>자꾸 나의 어플리케이션 코드를 테스트에 끼워맞출 생각(어떻게 이 부분을 검증할까)만 하고 있다보니 단순히 “테스트만 먼저 짜면 TDD다”라고 생각했던 것 같다.<br>물론 “검증” 또한 포기할 수 없는 부분이다.<br>하지만 여기에 너무 매몰되다보니 결국 테스트가 나의 코드를 주도하게 하지 못하게 됐던 것 같다.  </p><p>그러다보니 이렇게 논문까지 쓰고 TDD의 대가라고 부를 법한 사람들은 무슨 생각을 가지고 실제로 TDD를 어떻게 수행하는지 너무나 궁금했다.<br>논문을 보니 내가 생각했던 관점과 완전 다른 관점을 가지고 있었다. </p><blockquote><p>Writing tests is a design activity,<br>…<br>This changes design from a process of <strong><em>invention</em></strong>,<br>where the developer thinks hard about what a unit of code should do and then implements it,<br>to a process of <strong><em>discovery</em></strong>,<br>where the developer adds small increments of functionality and then extracts structure from the working code.<br>…<br>Using TDD has many benefits but the most relevant is that<br>it directs the programmer to think about the design of code from its intended use,<br>rather than from its implementation.</p></blockquote><p>테스트를 작성하는 것은 Design Activity(설계 행위)이며,<br>Design Activity는 design(코드의 설계)을 발명(invention)의 과정(어떤 코드가 무엇을 해야하고 어떻게 구현해야할지)에서 발견(discovery)의 과정(조그만 기능을 추가하고 동작하는 코드로부터 구조를 추출하는)으로 바꾼다고 설명하고 있다.<br>번역이 매끄럽지는 않지만 대충 어떤 뉘앙스인지 생각해보면 발명이라는 건 어떤 걸 만들어야겠다는 명확한 목표를 가지고 있는 것이고, 발견이라는 것은 명확한 목표를 가지고 있기 보다는 추상적인 무언가를 떠오르고 탐색하던 과정 중에 튀어나오는 것이 아닐까 싶다.<br>따라서 전자의 관점으로 설계를 하게 되면 어떤 일을 어떻게 해야하는 객체들이 명확하게 정의돼있다보니 설계가 매우 딱딱하게 강결합이 될 것이다.<br>이는 코드의 구조를 바꾸기 어렵다는 것을 뜻하며 구체적인 타입으로 확정짓는 것을 뜻하는 것 같다.<br>하지만 후자의 관점으로 설계를 하게 되면 무엇을 만들긴 해야하는데 아직 어떻게 해야하는지 명확하게 정의된 게 없다보니 두루뭉실하게 “이런 객체가 필요하지 않을까?”라는 작은 발견의 과정(작은 기능의 추가)을 반복해서 수행해나가다보니 설계가 유연하게 약결합 될 것이다.<br>이는 코드의 구조를 바꾸기 쉽다는 것을 뜻하며 추상적인 타입(인터페이스)를 사용한다는 것을 뜻하는 것 같다.  </p><p>그리고 TDD에는 많은 이점들이 존재하지만 가장 중요한 건 개발자의 사고를 (구체적인) 구현이 아니라 코드의 설계에 대해 생각하도록 “지시”한다는 것이라고 한다.<br>이러한 지시를 통해 내 코드가 테스트에 의해 “주도”되는 것이 아닐까 싶다.<br>즉, 테스트가 내 코드를 주도하려면(테스트에 의한 개발이 되려면) 이러한 지시를 따라야하고, 이는 검증이 아닌 “설계”를 테스트의 주된 목적이라고 생각해야 달성 가능한 목표같다.</p><h2 id="Need-Driven-Development"><a href="#Need-Driven-Development" class="headerlink" title="Need-Driven Development"></a>Need-Driven Development</h2><p>그럼 TDD가 Design Activity라는 것은 알았는데 어떻게 더 나은 설계를 만들 것인가…?<br>나는 그 답은 Need-Driven Development(Top-Down Development)를 통해 달성할 수 있다고 믿는다.  </p><blockquote><p>A core principle of Lean Development is that value should be pulled into existence from demand,<br>rather than pushed from implementation:<br>“The effect of ‘pull’ is that production is not based on forecast;<br>commitment is delayed until demand is present to indicate what the customer really wants.”</p></blockquote><p>영어를 잘 하지 못해 뉘앙스를 정확히 이해한 건지는 모르겠지만, Lean Development(개발 프로세스에서 비효율 적인 부분을 제거한 방법론 정도로 알고 있다.)의 핵심 원칙은 존재하는 요구사항(existence from demand)에서 가치를 뽑아와야한다(be pulled)는 것 같다.<br>예측에 의해 뭔가를 만들어내기 보다는 “고객이 정말로 원하는 것”이 실제로 나타낼 때까지 commitment(뭔가를 확정짓는…?)를 계속 뒤로 미루라는 것 같다.<br>고객도 자신이 무엇을 원하는지 정확히 모르기 때문에 요구사항이 명확해질 때까지 계속 요구사항을 명쾌하게 만들어나가는 과정이 필요한 것 같다.</p><img src="/2022/06/06/tdd-is-design-activity/Richard's_guide_to_software_development.png" class="" title="아무도 쓰지 않는데 개발자만 좋아하는 소프트웨어"><p>“혹시 이런 기능도 필요하지 않을까?”라고 생각하다 보면 위와 같은 형태의 소프트웨어가 나오게 될 가능성이 높을 것이다.</p><p>결국 “정말 필요한 기능”만 개발하라는 것인데 어떻게 해야하는 것일까…??</p><blockquote><p>By testing an object in isolation,<br>the programmer is forced to consider an object’s interactions with its collaborators in the abstract,<br>possibly before those collaborators exist.<br>TDD with Mock Objects guides interface design by the services that an object requires,<br>not just those it provides.<br>This process results in a system of narrow interfaces each of which defines a role in an interaction between objects,<br>rather than wide interfaces that describe all the features provided by a class.<br>We call this approach Need-Driven Development.</p></blockquote><p>단위 테스트에서 개발자는 객체와 협력객체 사이의 상호작용을 신경쓰도록 강요된다.<br>그것또한 추상적인 레벨에서 이루어지는데 왜냐하면 협력 객체들은 아직 존재도 하기 전이기 때문이다.<br>왜냐하면 TDD에 의해 테스트를 먼저 작성하고, Need-Driven Development에 의해 불필요한 객체는 아직 생성도 하기 전이기 때문이다.<br>이 시점에서 협력 객체는 커녕 아직 테스트하고자 하는 객체도 만들어지기 이전이다.<br>Mock Object로 TDD를 하는 건 단순히 객체가 제공하는 것 뿐만이 아니라 해당 객체가 필요로 하는 요구사항에 의해 인터페이스 설계를 가이드 한다.<br>이런 과정을 통해 narrow 인터페이스를 가진 시스템이 나오게 된다.<br>여기서 narrow한 인터페이스란 건 객체 사이의 상호작용에서 특정 역할만 수행한다는 것을 의미한다는 것 같다.<br>반면에 wide한 인터페이스는 여기저기서 사용할 수 있는 걸 뜻하며 하는 일이 굉장히 많은 객체를 뜻하는 것 같다.<br>이런 접근법을 Need-Driven Devlopment라고 부른다는데 좀 더 자세한 예시는 아래 나오게 된다.</p><img src="/2022/06/06/tdd-is-design-activity/ndd-01.png" class="" title="인터페이스의 발견"><blockquote><p>To fulfil the needs of A, we discover that it needs a service S.<br>While testing A, we mock the responsibilities of S without defining a concrete implementation.</p></blockquote><p>A의 요구사항을 만족시키기 위해 S라는 서비스가 필요하다는 걸 발견(discovery)하게 된다.<br>이 때 S의 구체적인 구현을 정의하는 것이 아니라 해당 책임을 모킹한다.</p><img src="/2022/06/06/tdd-is-design-activity/ndd-02.png" class="" title="반복적인 인터페이스 발견 절차"><blockquote><p>Once we have implemented A to satisfy its requirements we can switch focus and implement an object that performs the role of S<br>…<br>This process will then discover services required by B,<br>which we again mock out until we have finished our implementation of B</p></blockquote><p>A의 요구사항 구현이 모두 끝났으면 이제 S의 “역할”을 수행하는 객체를 구현하는 것에 집중할 수 있다.<br>이제 B(S의 역할을 수행하는)가 필요로하는 서비스를 발견하는 절차들이 진행된다.<br>그리고 B의 구현이 끝날 때까지 그런 서비스들은 모킹하게 된다.</p><img src="/2022/06/06/tdd-is-design-activity/ndd-03.png" class="" title="객체 간의 협력 그래프"><blockquote><p>Our experience is that systems we produce this way tend towards very flat class hierarchies.<br>This avoids well-known problems, such as the Fragile Base Class,<br>which make systems harder to understand and modify.</p></blockquote><p>이런 식으로 필요한 객체와 역할들을 발견(탐색)해 나가는 과정에서 매우 flat한 클래스 계층이 나온다고 한다.<br>이는 깨지기 쉬운(Fragile) Base Class 문제를 피할 수도 있다.<br>많은 클래스들이 해당 클래스에 의존하는 구조가 아니라 인접한 객체끼리만 관계를 맺고 있기 때문이 아닐까 싶다.<br>또한 상속이 아닌 인터페이스를 사용하고 있기 때문에 인터페이스가 바뀌지 않는 한 부모 객체에 영향을 받지 않는 것도 한 몫 하는 것 같다. (자바8의 인터페이스는 부모 인터페이스에 기본 구현체(default method)가 존재할 수 있긴 하지만…)  </p><blockquote><p>This process is similar to traditional Top-Down Development,<br>in which the programmer starts at the highest level of abstraction and proceeds, layer by layer, to fill in the detail.<br>The intention is that each layer of code is written in a coherent terminology,<br>defined in terms of the next level of abstraction</p></blockquote><p>Need-Driven Development는 전통적인 Top-Down Development와도 유사한데<br>Top-Down Development에서는 가장 높은 레벨의 추상화에서 시작해서 구체적인 내용을 구현하기 위해 계층 별로 접근하게 된다.<br>각 계층의 코드는 다음 단계의 추상화에 정의된 “일관된 용어”로 작성된다.<br>핵심은 “일관된 용어로 정의된다”는 것에 있는 것 같다.<br>이는 일관된 추상화 수준을 뜻하는 게 아닐까?</p><blockquote><p>Programming from the Bottom-Up has different risks.<br>All the authors have had the experience of developing a supporting class in isolation,<br>as part of a larger task,<br>only to find that the result was not right because we had misunderstood something.</p></blockquote><p>반면 Bottom-up으로 프로그래밍 하는 건 다른 리스크를 가지고 있다. (논문에서 Top-Down은 각 레이어에서 중복을 야기한다는 리스크를 명시하고 있다.)<br>독립된 환경에서 개발해봤는데 뭔가 잘못 이해하고 개발한 게 있어서 결과가 올바르지 않은 걸 발견했다는 것이다.<br>아마 이게 필요하지 않을까? 나는 이거까지 책임져야하지 않을까? 하고 예측을 기반으로 각자 개발을 하다보니 나중에 객체 간의 협력을 해야할 때 뭔가 미묘하게 안 맞는 부분이 계속 생겼던 게 아닐까 싶다.</p><p><a href="https://www.nomachetejuggling.com/2012/08/10/need-driven-development/">Need-Driven Development</a>이라는 아티클을 보면 Need-Driven Development(Top-Down)과 Bottom-up의 차이가 좀 더 명확히 느껴질 것이다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>TDD는 단순히 테스트를 “먼저” 작성하는 게 아니라 테스트가 내 코드를 “주도”하게 만들어야하는 것 같다.<br>그럼 좀 더 테스트가 막강한 권력을 가지고 테스트가 내 코드를 어떠한 길로 인도(guide)해야하는 것 같다.<br>좀 더 강하게는 강제(force)하거나 지시(direct)를 내려야하는 것 같다.<br>나는 멍청하고 테스트가 내 코드가 어떻게 구현해야하는지 명령을 내리는 것이다.</p><p>그런 관점에서 보면 단순 “검증”만으로는 뭔가 부족했던 것 같다.<br>그걸 모르고 계속 TDD 거리니 매번 실패 했던 게 아닐까 싶다.</p><p>해당 논문을 읽고 나니 “Design Activity”가 무엇인지, 요구사항이 왜 중요한 것인지 좀 더 알게 된 거 같다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1~2년 전 쯤 존경하는 개발자 분과 함께 &lt;a href=&quot;http://www.mockobjects.com/2009/09/brief-history-of-mock-objects.html&quot;&gt;A Brief History of Mock Objects&lt;/a&gt;라는 아티클을 함께 본 적이 있다.&lt;br&gt;개인적으로 이렇게 특정 개념의 근본이 된다던지, 해당 분야의 대가들이 쓴 아티클들을 함께 보는 것으로 인해 굉장히 많은 인사이트들이 생겼던 것 같다.&lt;br&gt;객체의 테스트 때문에 추가했던 getter로부터의 해방을 위해 고민하던 것으로 시작한 게 Mock의 탄생이라는 사실을 알게 되었을 때는 정말 위대한 탄생이라고 생각했다.  &lt;/p&gt;
&lt;p&gt;그리고 문득 시간이 지나 해당 아티클을 다시 보고 싶어졌다. (물론 해당 아티클은 &lt;a href=&quot;https://www.yes24.com/Product/Goods/9008455&quot;&gt;테스트 주도 개발로 배우는 객체 지향 설계와 실천&lt;/a&gt; 책의 후기에 한글로 적혀있다.)&lt;br&gt;아티클을 보던 중에 후반 부분에 Mock과 관련해서 &lt;a href=&quot;http://jmock.org/oopsla2004.pdf&quot;&gt;Mock Roles, not Objects&lt;/a&gt;라는 논문까지 썼다는 걸 보고 해당 논문까지 봐야 Mock에 대해 정확한 이해를 할 수 있을 것 같아 해당 논문을 보게 되었다.&lt;br&gt;그리고 목의 역사와 마찬가지로 해당 논문도 너무나 감명이 깊어 한 번 느낀점이나 내용을 정리해보고 싶었다.&lt;/p&gt;
&lt;h2 id=&quot;Writing-tests-is-a-design-activity&quot;&gt;&lt;a href=&quot;#Writing-tests-is-a-design-activity&quot; class=&quot;headerlink&quot; title=&quot;Writing tests is a design activity&quot;&gt;&lt;/a&gt;Writing tests is a design activity&lt;/h2&gt;&lt;p&gt;먼저 TDD(Test Driven Development)에는 크게 두 가지 관점이 존재할 것 같다.  &lt;/p&gt;
&lt;p&gt;첫 번째로 “검증”이다.&lt;br&gt;코드들이 의도대로 동작하는지, 버그는 없는지 검증하는 것이다.&lt;br&gt;이를 통해 프로덕션에 코드를 내보내도 된다는 자신감이 올라가고, 리팩토링을 하거나 신규 기능을 추가하더라도 코드의 동작은 변하지 않았음에 확신을 가질 수 있다.  &lt;/p&gt;</summary>
    
    
    
    <category term="Test" scheme="https://perfectacle.github.io/categories/Test/"/>
    
    
    <category term="TDD" scheme="https://perfectacle.github.io/tags/TDD/"/>
    
    <category term="mock" scheme="https://perfectacle.github.io/tags/mock/"/>
    
    <category term="test" scheme="https://perfectacle.github.io/tags/test/"/>
    
    <category term="design" scheme="https://perfectacle.github.io/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>(Tomcat) ClientAbortException은 왜 발생할까? (Part 2)</title>
    <link href="https://perfectacle.github.io/2022/03/20/client-abort-exception-deep-dive-part-02/"/>
    <id>https://perfectacle.github.io/2022/03/20/client-abort-exception-deep-dive-part-02/</id>
    <published>2022-03-20T10:30:19.000Z</published>
    <updated>2022-06-06T08:23:55.964Z</updated>
    
    <content type="html"><![CDATA[<p>서버에서 아주 가끔가다가 ClientAbortException(java.io.IOExceiption: Broken pipe)이 발생해서 어떨 때 발생하는지 딥다이브 해봄.</p><img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stacktrace.png" class=""><p>적다보니 글이 길어져 글을 나누었는데 해당 글을 읽기 전에 <a href="/2022/03/20/client-abort-exception-deep-dive-part-01">(Tomcat) ClientAbortException은 왜 발생할까? (Part 1)</a>을 먼저 보는 것을 추천함.</p><hr><p><a href="https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html">https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html</a></p><blockquote><p>Extend IOException to identify it as being caused by an abort of a request by a remote client.</p></blockquote><p>외부 클라이언트 측에서 요청을 abort(중단) 시켰을 때 발생하는 예외로 보인다.<br>톰캣에서 발생시키는 예외인데 Spring Boot의 Web(Mvc) 모듈에서 기본적으로 사용하는 게 Embedded Tomcat이기 때문에 많은 분들께서 자주 마주치지 않았을까… 싶다.<br>구글링 해보면 뭐 브라우저 이슈(API 응답이 오기 전에 새로고침을 했다던가, 뒤로가기를 했다던가 등등)니 뭐니 하는데 내가 겪은 상황은 server → server 통신에서 발생한 것이기 때문에 서버 간의 통신 관점에서만 파보았다.</p><p>삽질을 해보고 싶은 사람은 <a href="https://github.com/perfectacle/client-abort-exception-playground">https://github.com/perfectacle/client-abort-exception-playground</a> 을 clone 하면 된다.</p><p>그리고 ClientAbortException이 발생해도 스프링에서 기본적으로 <a href="https://www.baeldung.com/exception-handling-for-rest-with-spring#exceptionresolver">HandlerExceptionResolver</a>에서 예외를 핸들링하기 때문에 로그에는 아무것도 남지 않는다.<br>따라서 해당 에러가 발생하는지 에러 로그로 명확히 확인해보는 게 훨씬 직관적이기 때문에 아래 @RestControllerAdvice를 추가했다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControllerAdvice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = [Exception::class])</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">handleException</span><span class="params">(e: <span class="type">Exception</span>)</span></span>: ResponseEntity&lt;<span class="built_in">Void</span>&gt; &#123;</span><br><span class="line">        log.error(e.message, e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.internalServerError().build()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="N줄-요약"><a href="#N줄-요약" class="headerlink" title="N줄 요약"></a>N줄 요약</h1><ol><li>클라이언트가 응답 패킷을 받는 와중에 Read Timeout 시간을 초과하면<ol><li>각 응답 패킷의 시간 간격은 Read Timeout 안에 왔지만 모든 응답 패킷은 Read Timeout 안에 오지 않았다면<ol><li>Read Timeout의 의미는 모든 응답 패킷을 받는데까지 걸리는 시간이 아니라 각 응답 패킷 사이의 Timeout을 의미한다. (그래서 Apach HTTP Client는 오해의 소지를 줄이고자인지 socketTimeout이라고 부르고 있다.)</li><li>따라서 총 응답 패킷을 다 받는데까지는 Read Timeout에 설정한 시간을 초과해도 클라이언트&#x2F;서버 모두 아무런 오류가 발생하지 않는다.</li></ol></li><li>각 응답 패킷의 시간 간격이 Read Timeout 안에 오지 않은 경우<ol><li>Read Timeout의 의미는 각 응답 패킷 사이의 Timeout을 의미한다.</li><li>응답 패킷이 계속해서 잘 오다가 특정 패킷 하나만 Read Timeout을 초과하더라도 Read Timeout이 발생한다.</li><li>클라이언트 측에서 Read Timeout이 발생해서 소켓을 종료한 이후에도 <code>서버 측에서 응답 패킷을 보내면 ClientAbortException이 발생한다</code>.</li></ol></li></ol></li><li><a href="#ClientAbortException%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EB%A0%A4%EB%A9%B4">ClientAbortException을 해결하려면?</a></li><li>프로세스(메인 함수)가 종료되더라도 Passive Close로부터 FIN 패킷을 받지 않으면 클라이언트&#x2F;서버의 소켓은 닫히지 않는다. (오동작을 막기 위해 대기하는 것으로 알고 있음.)<br>하지만 Passive Close로부터 FIN 패킷이 아닌 다른 패킷이 오면 Active Close에서는 RST 패킷을 보낸 후 소켓을 닫는다.<br>60초(OS마다 다르지만 tcp_fin_timeout(대다수의 리눅스는 60로초 설정됨) 만큼) 동안 대기 후에도 Passive Close에게 아무런 패킷이 오지 않으면 Active Close는 RST 패킷을 보내고 소켓을 닫는다.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mac (60_000ms)</span></span><br><span class="line">sysctl -a | grep net.inet.tcp.fin_timeout</span><br><span class="line">net.inet.tcp.fin_timeout: 60000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux alpine (60s)</span></span><br><span class="line">sysctl -a | grep net.ipv4.tcp_fin_timeout</span><br><span class="line">net.ipv4.tcp_fin_timeout = 60</span><br></pre></td></tr></table></figure></li><li>소켓이 정상 종료된 경우에 ACTIVE_CLOSE 측에서 소켓이 바로 사라지는 게 아니라 오동작을 막기 위해 TIME_WAIT 상태로 대기하다가 사라지게 되는데 그 전까지는 해당 소켓(로컬ip:로컬port, 서버ip:서버port 쌍)을 사용하지 못한다.<br>대기 시간은 대부분 60초(OS마다 다르지만 2 * MSL(Maximum Segment Lifetime, OS 커널 레벨에 하드코딩 돼있는데 대다수의 리눅스는 60로초 설정됨) 동안 대기 후에 사라지게 된다.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mac (2 * msl = 2 * 15_000ms = 30_000ms)</span></span><br><span class="line">sysctl -a | grep net.inet.tcp.msl</span><br><span class="line">net.inet.tcp.msl: 15000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux alpine</span></span><br><span class="line">sysctl -a | grep msl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">몇몇 linux os는 tcp_fin_timeout을 2*msl로 사용하는 os도 있다고 함. (alpine linux도 아무것도 안 나오는 거 보면 그런 거 같음)</span></span><br></pre></td></tr></table></figure></li><li>HTTP Client 구현체마다 다르겠지만 Apache HTTP Client의 경우 Keep-Alive를 사용한다고 했음에도 불구하고 요청이 정상적으로 처리되지 않는 경우(Read Timeout 발생, 500 Internal Sever Error 응답을 받는다던지… 모든 4xx, 5xx가 포함되는 건 아님)에는 커넥션을 커넥션 풀에 반납하지 않고(재사용하지 않고) 종료한다.</li></ol><h1 id="클라이언트가-응답-패킷을-받는-시간이-Read-Timout을-초과한-경우"><a href="#클라이언트가-응답-패킷을-받는-시간이-Read-Timout을-초과한-경우" class="headerlink" title="클라이언트가 응답 패킷을 받는 시간이 Read Timout을 초과한 경우"></a>클라이언트가 응답 패킷을 받는 시간이 Read Timout을 초과한 경우</h1><h2 id="1-각-응답-패킷의-시간-간격은-Read-Timeout-안에-왔지만-모든-응답-패킷은-Read-Timeout-안에-오지-않은-경우"><a href="#1-각-응답-패킷의-시간-간격은-Read-Timeout-안에-왔지만-모든-응답-패킷은-Read-Timeout-안에-오지-않은-경우" class="headerlink" title="1. 각 응답 패킷의 시간 간격은 Read Timeout 안에 왔지만 모든 응답 패킷은 Read Timeout 안에 오지 않은 경우"></a>1. 각 응답 패킷의 시간 간격은 Read Timeout 안에 왔지만 모든 응답 패킷은 Read Timeout 안에 오지 않은 경우</h2><p>서버 쪽 API에서 큰 응답을 준다고 가정</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeResponseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="string">&quot;/large&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">slow</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        log.info(<span class="string">&quot;request is arrived!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;done!&quot;</span>.repeat(<span class="number">1_000_000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클라이언트 측은 응답을 받다가 끊어야하기 때문에 리드 타임아웃 설정을 25ms로 매우 짧게 설정함.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> readTimeout = Duration.ofMillis(<span class="number">25L</span>)</span><br><span class="line">    <span class="keyword">val</span> restTemplate = RestTemplate(</span><br><span class="line">        HttpComponentsClientHttpRequestFactory(</span><br><span class="line">            HttpClientBuilder</span><br><span class="line">                .create()</span><br><span class="line">                .setMaxConnPerRoute(<span class="number">100</span>)</span><br><span class="line">                .setMaxConnTotal(<span class="number">100</span>)</span><br><span class="line">                .setKeepAliveStrategy(DefaultConnectionKeepAliveStrategy())</span><br><span class="line">                .setDefaultRequestConfig(</span><br><span class="line">                    RequestConfig.custom().setSocketTimeout(readTimeout.toMillis().toInt()).build()</span><br><span class="line">                )</span><br><span class="line">                .build()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/large&quot;</span>, String::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] request is done!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커넥션 풀에 있는 커넥션을 바로 종료하지 않기 위해 10초간 슬립</span></span><br><span class="line">    Thread.sleep(<span class="number">10_000L</span>)</span><br><span class="line">    println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] main function is done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="데모-영상"><a href="#데모-영상" class="headerlink" title="데모 영상"></a>데모 영상</h3><div class="video-container"><iframe src="https://www.youtube.com/embed/BPnMAVpJnTI" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="클라이언트-로그-콘솔에-응답을-로깅하느라-짤림…"><a href="#클라이언트-로그-콘솔에-응답을-로깅하느라-짤림…" class="headerlink" title="클라이언트 로그 (콘솔에 응답을 로깅하느라 짤림…)"></a>클라이언트 로그 (콘솔에 응답을 로깅하느라 짤림…)</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!do&quot;</span></span><br><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;ne!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done&quot;</span></span><br><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!d&quot;</span></span><br><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;one!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!don&quot;</span></span><br><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;e!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!done!&quot;</span></span><br><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080] can be kept alive for 60.0 seconds</span></span><br><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: <span class="keyword">set</span> socket timeout to <span class="number">0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection released: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 1; route allocated: 1 of 100; total allocated: 1 of 100]</span></span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-20T06:<span class="number">56</span>:<span class="number">05.674</span>] request <span class="keyword">is</span> done!</span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-20T06:<span class="number">56</span>:<span class="number">15.679</span>] main function <span class="keyword">is</span> done!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>06:56:05.670에 마지막 응답 패킷을 받음 (<code>06:56:05.670 [main] DEBUG org.apache.http.wire - http-outgoing-0 &lt;&lt; &quot;e!done!done!done!done!done!done!done!done!done!done!don...</code>)</li><li>06:56:05.670에 커넥션을 종료하지 않고 커넥션 풀에 반납함 (Keep-Alive 설정에 따라 60초 동안 idle 상태의 커넥션이라도 보관함, <code>06:56:05.670 [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection released: [id: 0][route: &#123;&#125;-&gt;http://localhost:8080][total available: 1; route allocated: 1 of 100; total allocated: 1 of 100]</code>)</li><li>06:56:15.679에 메인함수 종료</li></ol><h3 id="서버-로그"><a href="#서버-로그" class="headerlink" title="서버 로그"></a>서버 로그</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.568</span>  INFO <span class="number">86561</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] c.e.playground.LargeResponseController   : request <span class="keyword">is</span> arrived!</span><br></pre></td></tr></table></figure><ol><li>06:56:05.568에 요청 도착</li></ol><h3 id="패킷-로그-소켓-상태"><a href="#패킷-로그-소켓-상태" class="headerlink" title="패킷 로그 (소켓 상태)"></a>패킷 로그 (소켓 상태)</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">231</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.565966</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">51612</span> → <span class="number">8080</span> [SYN] Seq=<span class="number">0</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">4237975396</span> TSecr=<span class="number">0</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">232</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.566176</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">8080</span> → <span class="number">51612</span> [SYN, ACK] Seq=<span class="number">0</span> Ack=<span class="number">1</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">3590453492</span> TSecr=<span class="number">4237975396</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">233</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.566202</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">51612</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">4237975396</span> TSecr=<span class="number">3590453492</span></span><br><span class="line"><span class="number">234</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.566226</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span>[TCP Window Update] <span class="number">8080</span> → <span class="number">51612</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">3590453492</span> TSecr=<span class="number">4237975396</span></span><br><span class="line"><span class="number">235</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.568288</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>HTTP<span class="number">274</span>GET /large HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">236</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.568329</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">51612</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">3590453495</span> TSecr=<span class="number">4237975399</span></span><br><span class="line"><span class="number">237</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.582682</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">51612</span> [PSH, ACK] Seq=<span class="number">1</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3590453510</span> TSecr=<span class="number">4237975399</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">238</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.582700</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">51612</span> [PSH, ACK] Seq=<span class="number">8193</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3590453510</span> TSecr=<span class="number">4237975399</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">239</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.582717</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">51612</span> [PSH, ACK] Seq=<span class="number">16385</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3590453510</span> TSecr=<span class="number">4237975399</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">240</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.582730</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">51612</span> [PSH, ACK] Seq=<span class="number">24577</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3590453510</span> TSecr=<span class="number">4237975399</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">241</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.582740</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">51612</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">219</span> Ack=<span class="number">8193</span> Win=<span class="number">400064</span> Len=<span class="number">0</span> TSval=<span class="number">4237975414</span> TSecr=<span class="number">3590453510</span></span><br><span class="line">...</span><br><span class="line"><span class="number">856</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.648652</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">12387</span><span class="number">8080</span> → <span class="number">51612</span> [PSH, ACK] Seq=<span class="number">4987837</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">12331</span> TSval=<span class="number">3590453575</span> TSecr=<span class="number">4237975479</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">857</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.648660</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">51612</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">219</span> Ack=<span class="number">4987837</span> Win=<span class="number">250048</span> Len=<span class="number">0</span> TSval=<span class="number">4237975479</span> TSecr=<span class="number">3590453575</span></span><br><span class="line"><span class="number">858</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.653137</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">12387</span>[TCP Retransmission] <span class="number">8080</span> → <span class="number">51612</span> [PSH, ACK] Seq=<span class="number">4987837</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">12331</span> TSval=<span class="number">3590453579</span> TSecr=<span class="number">4237975479</span></span><br><span class="line"><span class="number">859</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.653169</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">51612</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">219</span> Ack=<span class="number">5000168</span> Win=<span class="number">499008</span> Len=<span class="number">0</span> TSval=<span class="number">4237975483</span> TSecr=<span class="number">3590453575</span> SLE=<span class="number">4987837</span> SRE=<span class="number">5000168</span></span><br><span class="line"><span class="number">860</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.666381</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span>[TCP Window Update] <span class="number">51612</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">219</span> Ack=<span class="number">5000168</span> Win=<span class="number">763648</span> Len=<span class="number">0</span> TSval=<span class="number">4237975497</span> TSecr=<span class="number">3590453575</span></span><br><span class="line"><span class="number">861</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">05.670136</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span>[TCP Window Update] <span class="number">51612</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">219</span> Ack=<span class="number">5000168</span> Win=<span class="number">1025792</span> Len=<span class="number">0</span> TSval=<span class="number">4237975500</span> TSecr=<span class="number">3590453575</span></span><br><span class="line"><span class="number">866</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">16.068837</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">51612</span> → <span class="number">8080</span> [FIN, ACK] Seq=<span class="number">219</span> Ack=<span class="number">5000168</span> Win=<span class="number">1045248</span> Len=<span class="number">0</span> TSval=<span class="number">4237985900</span> TSecr=<span class="number">3590453575</span></span><br><span class="line"><span class="number">867</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">16.068992</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">51612</span> [ACK] Seq=<span class="number">5000168</span> Ack=<span class="number">220</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">3590463996</span> TSecr=<span class="number">4237985900</span></span><br><span class="line"><span class="number">870</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">16.069677</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">51612</span> [FIN, ACK] Seq=<span class="number">5000168</span> Ack=<span class="number">220</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">3590463996</span> TSecr=<span class="number">4237985900</span></span><br><span class="line"><span class="number">871</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">06</span>:<span class="number">56</span>:<span class="number">16.069725</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">51612</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">220</span> Ack=<span class="number">5000169</span> Win=<span class="number">1045248</span> Len=<span class="number">0</span> TSval=<span class="number">4237985900</span> TSecr=<span class="number">3590463996</span></span><br></pre></td></tr></table></figure><ol><li>231 ~ 233번 패킷은 TCP 3 Way Handshake (syn, syn&#x2F;ack, ack)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-tcp-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-02/tcp-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-tcp-3-way-handshake-socket-status.png" class=""></li><li>235번 패킷에서 클라이언트 → 서버로 HTTP 요청 패킷 전송 (06:56:05.568288)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-send-http-request-packet.png" class=""></li><li>236번 패킷에서 서버가 요청 잘 받았다고 클라이언트한테 ACK 패킷 전송 (06:56:05.568329)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-send-http-request-ack-packet.png" class=""></li><li>237번 패킷은 서버에서 온 응답인데 ACK를 받은 06:56:05.5<code>68</code>329에서 Read Timeout으로 설정한 <code>25</code>ms 이전에 도착함 (06:56:05.5<code>82</code>682)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-send-http-response-packet-01.png" class=""></li><li>238 ~ 240번 패킷은 서버에서 응답 패킷을 쪼개서 보내고 있음 (06:56:05.582700 ~ 06:56:05.582730)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-send-http-response-packet-02.png" class=""></li><li>241번 패킷은 클라이언트가 서버한테 응답 패킷 잘 받았다고 ACK 패킷을 보내고 있음 (06:56:05.582740)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-send-http-response-ack-packet-01.png" class=""></li><li>858번 패킷은 마지막 응답 패킷인데 패킷 유실 때문인지 재전송을 하고 있다. (06:56:05.653137)<br>원래 클라이언트가 생각했던 Read Timeout 25ms는 최초 ACK를 받은 06:56:05.5<code>68</code>329 시점부터 계산해보면 06:56:05.5<code>93</code>329이다.<br>근데 마지막 응답 패킷이 온 걸 보면 06:56:05.<code>653</code>137으로 실제로는 ACK를 받은 시점으로부터 85ms가 흘렀다.<br>즉, Read Timeout은 클라이언트의 모든 요청을 받은 시간이 아닌 각 응답 패킷을 받는데까지 걸리는 시간이다.<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-send-http-response-packet-03.png" class=""></li><li>859번 패킷에서 응답 패킷을 잘 받았다는 마지막 ACK 패킷을 서버에게 보내고 있다. (06:56:05.653169)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-send-http-response-ack-packet-02.png" class=""></li><li>866 ~ 871번 패킷은 TCP Connection Termination (FIN&#x2F;ACK&#x2F;FIN&#x2F;ACK)이다. (06:56:16.068837 ~ 06:56:16.069725)<br>클라이언트가 먼저 연결을 종료하겠다는 FIN 패킷을 보냈기 때문에 클라이언트가 Active Close<br>서버는 클라이언트로부터 FIN 패킷을 받았기 때문에 서버는 Passive Close가 됨<br>(무조건 클라이언트가 Active Close는 아니고 경우에 따라서 다름)<br>마지막 패킷을 받은 이후 10초 동안 메인 함수의 Thread.sleep을 했기 때문에 10초 이후에 메인 함수가 종료(프로세스가 종료)되면서 커넥션을 끊게 되는 것이다.<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-tcp-connection-termination.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-02/tcp-termination.png" class=""></li><li>소켓이 종료된 이후에 바로 해당 소켓이 사라지는 게 아니라 오동작을 막기 위해 30초(OS마다 다르지만 2 * MSL(Maximum Segment Lifetime, OS 커널 레벨에 하드코딩 돼있는데 대다수의 리눅스는 60로초 설정됨, 내가 쓰는 맥os는 30초)) 동안 TIME_WAIT 상태에서 대기를 함. (06:56:16)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-tcp-time-wait-socket-status.png" class=""></li><li>30초가 지나면 소켓이 사라지고 해당 소켓(로컬ip:로컬port, 서버ip:서버port 쌍)을 재사용 할 수 있다. (06:56:47)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/large-response-in-read-timeout-tcp-socket-status.png" class=""></li></ol><h2 id="2-각-응답-패킷의-시간-간격이-Read-Timeout-안에-오지-않은-경우"><a href="#2-각-응답-패킷의-시간-간격이-Read-Timeout-안에-오지-않은-경우" class="headerlink" title="2. 각 응답 패킷의 시간 간격이 Read Timeout 안에 오지 않은 경우"></a>2. 각 응답 패킷의 시간 간격이 Read Timeout 안에 오지 않은 경우</h2><p>서버 쪽 API에서 각 응답을 주는 패킷의 지연시간이 제각각이라고 가정</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamResponseController</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> executor = Executors.newCachedThreadPool()</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(<span class="string">&quot;/stream&quot;</span>)</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">stream</span><span class="params">()</span></span>: ResponseEntity&lt;ResponseBodyEmitter&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> emitter = ResponseBodyEmitter()</span><br><span class="line">      executor.execute &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100L</span>)</span><br><span class="line">            emitter.send(<span class="string">&quot;hello, once&quot;</span>, MediaType.TEXT_PLAIN)</span><br><span class="line">            log.info(<span class="string">&quot;hello, once&quot;</span>)</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">100L</span>)</span><br><span class="line">            emitter.send(<span class="string">&quot;hello, twice&quot;</span>, MediaType.TEXT_PLAIN)</span><br><span class="line">            log.info(<span class="string">&quot;hello, twice&quot;</span>)</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">500L</span>) <span class="comment">// 최대 지연 시간</span></span><br><span class="line">            emitter.send(<span class="string">&quot;hello, thrice&quot;</span>, MediaType.TEXT_PLAIN)</span><br><span class="line">            log.info(<span class="string">&quot;hello, thrice&quot;</span>)</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">100L</span>)</span><br><span class="line">            emitter.send(<span class="string">&quot;bye&quot;</span>, MediaType.TEXT_PLAIN)</span><br><span class="line">            log.info(<span class="string">&quot;bye&quot;</span>)</span><br><span class="line"></span><br><span class="line">            emitter.complete()</span><br><span class="line">         &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            emitter.completeWithError(e)</span><br><span class="line">            log.error(e.message, e)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ResponseEntity(emitter, HttpStatus.OK)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클라이언트 측은 서버 측 응답 패킷의 최대 지연 시간보다 짧게 Read Timeout을 설정함.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> readTimeout = Duration.ofMillis(<span class="number">200L</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> restTemplate = RestTemplate(</span><br><span class="line">        HttpComponentsClientHttpRequestFactory(</span><br><span class="line">            HttpClientBuilder</span><br><span class="line">                .create()</span><br><span class="line">                .setMaxConnPerRoute(<span class="number">100</span>)</span><br><span class="line">                .setMaxConnTotal(<span class="number">100</span>)</span><br><span class="line">                .setKeepAliveStrategy(DefaultConnectionKeepAliveStrategy())</span><br><span class="line">                .setDefaultRequestConfig(</span><br><span class="line">                    RequestConfig.custom().setSocketTimeout(readTimeout.toMillis().toInt()).build()</span><br><span class="line">                )</span><br><span class="line">                .build()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/stream&quot;</span>, String::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] request is done!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커넥션 풀에 있는 커넥션을 바로 종료하지 않기 위해 10초간 슬립</span></span><br><span class="line">    Thread.sleep(<span class="number">10_000L</span>)</span><br><span class="line">    println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] main function is done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="데모-영상-1"><a href="#데모-영상-1" class="headerlink" title="데모 영상"></a>데모 영상</h3><div class="video-container"><iframe src="https://www.youtube.com/embed/k6o-3P3mwAY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="클라이언트-로그"><a href="#클라이언트-로그" class="headerlink" title="클라이언트 로그"></a>클라이언트 로그</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.248</span> [main] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http:<span class="comment">//localhost:8080/stream</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.254</span> [main] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application<span class="comment">/*+json, */</span>*]</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.282</span> [main] DEBUG org.apache.http.client.protocol.RequestAddCookies - CookieSpec selected: default</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.285</span> [main] DEBUG org.apache.http.client.protocol.RequestAuthCache - Auth cache not <span class="keyword">set</span> <span class="keyword">in</span> the context</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.285</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection request: [route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.289</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection leased: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 1 of 100; total allocated: 1 of 100]</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.290</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Opening connection &#123;&#125;-&gt;http:<span class="comment">//localhost:8080</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.293</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connecting to localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">55447</span>&lt;-&gt;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: <span class="keyword">set</span> socket timeout to <span class="number">200</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Executing request GET /stream HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Target auth state: UNCHALLENGED</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Proxy auth state: UNCHALLENGED</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; GET /stream HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept: text/plain, application/json, application<span class="comment">/*+json, */</span>*</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Host: localhost:<span class="number">8080</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.294</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Connection: Keep-Alive</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; User-Agent: Apache-HttpClient/<span class="number">4.5</span><span class="number">.13</span> (Java/<span class="number">1.8</span><span class="number">.0_322</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept-Encoding: gzip,deflate</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;GET /stream HTTP/1.1[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept: text/plain, application/json, application/*+json, */*[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Host: localhost:8080[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Connection: Keep-Alive[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;User-Agent: Apache-HttpClient/4.5.13 (Java/1.8.0_322)[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept-Encoding: gzip,deflate[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;HTTP/1.1 200 [\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;Transfer-Encoding: chunked[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;Date: Sun, 20 Mar 2022 01:04:13 GMT[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;Keep-Alive: timeout=60[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;Connection: keep-alive[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;b[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;hello, once[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.402</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &lt;&lt; HTTP/<span class="number">1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.402</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &lt;&lt; Transfer-Encoding: chunked</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.402</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &lt;&lt; Date: Sun, <span class="number">20</span> Mar <span class="number">2022</span> <span class="number">01</span>:<span class="number">04</span>:<span class="number">13</span> GMT</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.402</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &lt;&lt; Keep-Alive: timeout=<span class="number">60</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.402</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &lt;&lt; Connection: keep-alive</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.404</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Connection can be kept alive <span class="keyword">for</span> <span class="number">60000</span> MILLISECONDS</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.406</span> [main] DEBUG org.springframework.web.client.RestTemplate - Response <span class="number">200</span> OK</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.407</span> [main] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] <span class="keyword">as</span> <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.506</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;c[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.507</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;hello, twice[\r][\n]&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.712</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;[read] I/O error: Read timed out&quot;</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.712</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: Close connection</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.713</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Connection discarded</span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.713</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection released: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line"><span class="number">10</span>:<span class="number">04</span>:<span class="number">13.715</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;[read] I/O error: Socket closed&quot;</span></span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-20T10:<span class="number">04</span>:<span class="number">13.719</span>] request <span class="keyword">is</span> done!</span><br><span class="line">org.springframework.web.client.RestClientException: Error <span class="keyword">while</span> extracting response <span class="keyword">for</span> type [<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>] <span class="title">and</span> <span class="title">content</span> <span class="title">type</span> [<span class="title">application</span>/<span class="title">octet</span>-<span class="title">stream</span>]; <span class="title">nested</span> <span class="title">exception</span> <span class="title">is</span> <span class="title">java</span>.<span class="title">net</span>.<span class="title">SocketTimeoutException</span>: <span class="type">Read timed out</span></span></span><br><span class="line">at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:<span class="number">120</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">778</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:<span class="number">711</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:<span class="number">334</span>)</span><br><span class="line">at com.example.playground.StreamResponseRestTemplatePlaygroundKt.main(StreamResponseRestTemplatePlayground.kt:<span class="number">29</span>)</span><br><span class="line">at com.example.playground.StreamResponseRestTemplatePlaygroundKt.main(StreamResponseRestTemplatePlayground.kt)</span><br><span class="line">Caused <span class="keyword">by</span>: java.net.SocketTimeoutException: Read timed <span class="keyword">out</span></span><br><span class="line">at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">116</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">171</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">141</span>)</span><br><span class="line">at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:<span class="number">84</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:<span class="number">137</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:<span class="number">153</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:<span class="number">280</span>)</span><br><span class="line">at org.apache.http.impl.io.ChunkedInputStream.getChunkSize(ChunkedInputStream.java:<span class="number">261</span>)</span><br><span class="line">at org.apache.http.impl.io.ChunkedInputStream.nextChunk(ChunkedInputStream.java:<span class="number">222</span>)</span><br><span class="line">at org.apache.http.impl.io.ChunkedInputStream.read(ChunkedInputStream.java:<span class="number">183</span>)</span><br><span class="line">at org.apache.http.conn.EofSensorInputStream.read(EofSensorInputStream.java:<span class="number">135</span>)</span><br><span class="line">at java.io.FilterInputStream.read(FilterInputStream.java:<span class="number">133</span>)</span><br><span class="line">at java.io.PushbackInputStream.read(PushbackInputStream.java:<span class="number">186</span>)</span><br><span class="line">at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:<span class="number">284</span>)</span><br><span class="line">at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:<span class="number">326</span>)</span><br><span class="line">at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:<span class="number">178</span>)</span><br><span class="line">at java.io.InputStreamReader.read(InputStreamReader.java:<span class="number">184</span>)</span><br><span class="line">at java.io.Reader.read(Reader.java:<span class="number">140</span>)</span><br><span class="line">at org.springframework.util.StreamUtils.copyToString(StreamUtils.java:<span class="number">91</span>)</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.readInternal(StringHttpMessageConverter.java:<span class="number">96</span>)</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.readInternal(StringHttpMessageConverter.java:<span class="number">44</span>)</span><br><span class="line">at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:<span class="number">199</span>)</span><br><span class="line">at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:<span class="number">114</span>)</span><br><span class="line">... <span class="number">5</span> more</span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-20T10:<span class="number">04</span>:<span class="number">23.725</span>] main function <span class="keyword">is</span> done!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>10:04:13.294에 서버와 커넥션 맺음. (<code>10:04:13.294 [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established 127.0.0.1:55447&lt;-&gt;127.0.0.1:8080</code>)</li><li>10:04:13.295에 요청 전송 (<code>10:04:13.295 [main] DEBUG org.apache.http.headers - http-outgoing-0 &gt;&gt; ...</code>)</li><li>10:04:13.401에 첫 번째 응답이 옴 (대략 100ms 이후에 옴, <code>10:04:13.401 [main] DEBUG org.apache.http.wire - http-outgoing-0 &lt;&lt; &quot;hello, once[\r][\n]&quot;</code>)</li><li>10:04:13.507에 두 번째 응답이 옴 (대략 100ms 이후에 옴, <code>10:04:13.507 [main] DEBUG org.apache.http.wire - http-outgoing-0 &lt;&lt; &quot;hello, twice[\r][\n]&quot;</code>)</li><li>10:04:13.712에 Read Timeout 발생 (마지막 패킷이 온 이후로 정확히 우리가 설정한 200ms 후에 발생함, <code>10:04:13.712 [main] DEBUG org.apache.http.wire - http-outgoing-0 &lt;&lt; &quot;[read] I/O error: Read timed out&quot;</code>)</li><li>10:04:13.712 ~ 10:04:13.715에 커넥션 종료 (Keep-Alive 설정했음에도 불구하고, 정상적인 응답을 받지 못했으면 커넥션을 종료함. <code>10:04:13.712 [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-0: Close connection</code>)</li><li>10:04:23.725에 메인함수 종료</li></ol><h3 id="서버-로그-1"><a href="#서버-로그-1" class="headerlink" title="서버 로그"></a>서버 로그</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401</span>  INFO <span class="number">54891</span> --- [pool-<span class="number">1</span>-thread-<span class="number">3</span>] c.e.playground.StreamResponseController  : hello, once</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.506</span>  INFO <span class="number">54891</span> --- [pool-<span class="number">1</span>-thread-<span class="number">3</span>] c.e.playground.StreamResponseController  : hello, twice</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">14.012</span>  INFO <span class="number">54891</span> --- [pool-<span class="number">1</span>-thread-<span class="number">3</span>] c.e.playground.StreamResponseController  : hello, thrice</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">14.118</span> ERROR <span class="number">54891</span> --- [pool-<span class="number">1</span>-thread-<span class="number">3</span>] c.e.playground.StreamResponseController  : java.io.IOException: Broken pipe</span><br><span class="line"></span><br><span class="line">org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:<span class="number">310</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:<span class="number">273</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:<span class="number">118</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:<span class="number">297</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:<span class="number">141</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:<span class="number">229</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at org.springframework.util.StreamUtils.copy(StreamUtils.java:<span class="number">148</span>) ~[spring-core-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:<span class="number">126</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:<span class="number">44</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:<span class="number">227</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.sendInternal(ResponseBodyEmitterReturnValueHandler.java:<span class="number">212</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.send(ResponseBodyEmitterReturnValueHandler.java:<span class="number">205</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.ResponseBodyEmitter.sendInternal(ResponseBodyEmitter.java:<span class="number">205</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.ResponseBodyEmitter.send(ResponseBodyEmitter.java:<span class="number">199</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at com.example.playground.StreamResponseController.stream$lambda-<span class="number">0</span>(StreamResponseController.kt:<span class="number">35</span>) ~[main/:na]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">750</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">Caused <span class="keyword">by</span>: java.io.IOException: Broken pipe</span><br><span class="line">at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:<span class="number">47</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:<span class="number">93</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.IOUtil.write(IOUtil.java:<span class="number">65</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:<span class="number">470</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:<span class="number">135</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:<span class="number">1376</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:<span class="number">766</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:<span class="number">719</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:<span class="number">709</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.flush(Http11OutputBuffer.java:<span class="number">573</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.filters.ChunkedOutputFilter.flush(ChunkedOutputFilter.java:<span class="number">157</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:<span class="number">221</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:<span class="number">1255</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:<span class="number">402</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.Response.action(Response.java:<span class="number">209</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:<span class="number">306</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">... <span class="number">17</span> common frames omitted</span><br></pre></td></tr></table></figure><ol><li>10:04:13.401에 첫 번째 응답 전송</li><li>10:04:13.506에 두 번째 응답 전송 (100ms 지연)</li><li>10:04:14.012에 세 번째 응답 전송 (500ms 지연)</li><li>10:04:14.118에 <code>ClientAbortException(java.io.IOException: Broken pipe)</code> 발생</li><li>소켓이 종료된 상태에서 “bye”라는 응답 패킷을 전송하려다 발생함.</li></ol><h3 id="패킷-로그"><a href="#패킷-로그" class="headerlink" title="패킷 로그"></a>패킷 로그</h3><p>워낙 순식간에 지나가서 netstat으로 소켓의 상태는 관찰하지 못함.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">174</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.293423</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">55447</span> → <span class="number">8080</span> [SYN] Seq=<span class="number">0</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">811634482</span> TSecr=<span class="number">0</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">175</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.293697</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">8080</span> → <span class="number">55447</span> [SYN, ACK] Seq=<span class="number">0</span> Ack=<span class="number">1</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">3020801649</span> TSecr=<span class="number">811634482</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">176</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.293717</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">55447</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">811634482</span> TSecr=<span class="number">3020801649</span></span><br><span class="line"><span class="number">177</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.293729</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span>[TCP Window Update] <span class="number">8080</span> → <span class="number">55447</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">3020801649</span> TSecr=<span class="number">811634482</span></span><br><span class="line"><span class="number">178</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295356</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>HTTP<span class="number">275</span>GET /stream HTTP/<span class="number">1.1</span> </span><br><span class="line"><span class="number">179</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.295402</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">55447</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">220</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">3020801651</span> TSecr=<span class="number">811634484</span></span><br><span class="line"><span class="number">180</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401563</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">202</span><span class="number">8080</span> → <span class="number">55447</span> [PSH, ACK] Seq=<span class="number">1</span> Ack=<span class="number">220</span> Win=<span class="number">408064</span> Len=<span class="number">146</span> TSval=<span class="number">3020801757</span> TSecr=<span class="number">811634484</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">181</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.401620</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">55447</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">220</span> Ack=<span class="number">147</span> Win=<span class="number">408128</span> Len=<span class="number">0</span> TSval=<span class="number">811634590</span> TSecr=<span class="number">3020801757</span></span><br><span class="line"><span class="number">182</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.506841</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">73</span><span class="number">8080</span> → <span class="number">55447</span> [PSH, ACK] Seq=<span class="number">147</span> Ack=<span class="number">220</span> Win=<span class="number">408064</span> Len=<span class="number">17</span> TSval=<span class="number">3020801863</span> TSecr=<span class="number">811634590</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">183</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.506895</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">55447</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">220</span> Ack=<span class="number">164</span> Win=<span class="number">408128</span> Len=<span class="number">0</span> TSval=<span class="number">811634696</span> TSecr=<span class="number">3020801863</span></span><br><span class="line"><span class="number">184</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.713445</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">55447</span> → <span class="number">8080</span> [FIN, ACK] Seq=<span class="number">220</span> Ack=<span class="number">164</span> Win=<span class="number">408128</span> Len=<span class="number">0</span> TSval=<span class="number">811634902</span> TSecr=<span class="number">3020801863</span></span><br><span class="line"><span class="number">185</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">13.713503</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">55447</span> [ACK] Seq=<span class="number">164</span> Ack=<span class="number">221</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">3020802069</span> TSecr=<span class="number">811634902</span></span><br><span class="line"><span class="number">186</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">14.012150</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">74</span>HTTP/<span class="number">1.1</span> <span class="number">200</span>   [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">187</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">14.012215</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">44</span><span class="number">55447</span> → <span class="number">8080</span> [RST] Seq=<span class="number">221</span> Win=<span class="number">0</span> Len=<span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>174 ~ 176번 패킷은 TCP 3 Way Handshake (syn, syn&#x2F;ack, ack)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-tcp-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-02/tcp-3-way-handshake.png" class=""></li><li>178번 패킷에서 클라이언트 → 서버로 HTTP 요청 패킷 전송 (10:04:13.295356)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-http-request-packet.png" class=""></li><li>179번 패킷에서 서버가 요청 잘 받았다고 클라이언트한테 ACK 패킷 전송 (10:04:13.295402)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-http-request-ack-packet.png" class=""></li><li>180번 패킷은 서버에서 온 첫 번째 응답 패킷(hello, once)인데 ACK를 받은 10:04:13.<code>295</code>402에서 Read Timeout으로 설정한 <code>200</code>ms 이전에 도착함 (10:04:13.<code>401</code>563)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-http-response-packet-01.png" class=""></li><li>181번 패킷은 서버에서 보낸 응답 패킷을 잘 받았다는 ACK 패킷을 클라이언트 -&gt; 서버로 보내고 있음. (10:04:13.401620)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-http-response-ack-packet-01.png" class=""></li><li>182번 패킷은 서버에서 온 두 번째 응답 패킷(hello, twice)인데 마지막 응답 패킷(hello, once)을 받은 10:04:13.<code>401</code>563에서 Read Timeout으로 설정한 <code>200</code>ms 이전에 도착함 (10:04:13.<code>506</code>841)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-http-response-packet-02.png" class=""></li><li>183번 패킷은 서버에서 보낸 응답 패킷을 잘 받았다는 ACK 패킷을 클라이언트 -&gt; 서버로 보내고 있음. (10:04:13.506895)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-http-response-ack-packet-02.png" class=""></li><li>184번 패킷은 서버에서 온 마지막 응답 패킷(hello, twice)을 받은 10:04:13.<code>506</code>841에서 Read Timeout으로 설정한 <code>200</code>ms이 넘도록 아무런 패킷이 오지 않아 Read Timeout이 발생해서 서버 측에 FIN&#x2F;ACK 패킷을 날려서 커넥션을 종료할 준비를 하고 있음. (10:04:13.<code>713</code>445)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-fin-packet.png" class=""></li><li>185번 패킷에서 서버가 클라이언트로부터 FIN&#x2F;ACK 패킷을 잘 받았다고 반대로 ACK 패킷을 클라이언트에게 보냄 (10:04:13.713503)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-ack-packet.png" class=""></li><li>클라이언트가 먼저 연결을 종료하겠다는 FIN 패킷을 보냈기 때문에 클라이언트가 Active Close<br>서버는 클라이언트로부터 FIN 패킷을 받았기 때문에 서버는 Passive Close가 됨<br>(무조건 클라이언트가 Active Close는 아니고 경우에 따라서 다름)<br>그리고 아직까지는 서버(Passive Close)로부터 FIN 패킷을 받은 게 아니기 때문에 소켓이 정상적으로 종료된 게 아님.<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/tcp-termination.png" class=""></li><li>186번 패킷에서 서버 → 클라이언트로 HTTP 세 번째 응답 패킷(hello, thrice) 전송 (10:04:14.<code>012</code>150, 마지막 응답 패킷(hello, twice)를 보낸 10:04:13.<code>506</code>841에서 500ms가 지난 시점임.)<img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-http-response-packet-03.png" class=""></li><li>187번 패킷을 보면 서버에서 FIN 패킷이 온 게 아니기 때문에 클라이언트는 다시 서버에게 RST 패킷을 보내서 소켓을 닫을 준비를 한다. (10:04:14.012215) <img src="/2022/03/20/client-abort-exception-deep-dive-part-02/stream-response-over-read-timeout-send-rst-packet.png" class=""></li><li>소켓이 닫혔기 때문에 “bye”라는 응답패킷은 전송되지 않았다.</li></ol><h1 id="ClientAbortException을-해결하려면"><a href="#ClientAbortException을-해결하려면" class="headerlink" title="ClientAbortException을 해결하려면?"></a>ClientAbortException을 해결하려면?</h1><ol><li>서버 측에서 처리 속도를 더 빠르게 한다.</li><li>처리 속도는 빠르지만 응답이 크다면 응답의 사이즈를 줄인 API를 제공한다 (불필요한 필드 제거 or 페이징 API 제공)</li><li>클라이언트 측 리드 타임아웃 설정값을 늘린다.</li><li>정 합의가 안 된다면 ClientAbortException을 핸들링 해서 log.info로만 남긴다. (장애 상황은 아니라서 불필요한 노이즈라고 판단된다는 가정 하에)</li><li>클라이언트 측에서는 ReadTimeout이 발생했다면(ClientAbortException 여부와 상관 없이), 장애 상황(고객에게 돈은 출금이 됐는데 주문은 완료처리 안 됐다던지)을 막기 위해 서버 측에 취소 API 같은 걸 호출하거나 상태 조회 API 같은 걸 호출한 이후 내가 처리를 따로 해야하는 건지 아닌지 판단한 후에 올바른 처리를 해줘야한다.</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;서버에서 아주 가끔가다가 ClientAbortException(java.io.IOExceiption: Broken pipe)이 발생해서 어떨 때 발생하는지 딥다이브 해봄.&lt;/p&gt;
&lt;img src=&quot;/2022/03/20/client-abort-exception-deep-dive-part-02/stacktrace.png&quot; class&gt;

&lt;p&gt;적다보니 글이 길어져 글을 나누었는데 해당 글을 읽기 전에 &lt;a href=&quot;/2022/03/20/client-abort-exception-deep-dive-part-01&quot;&gt;(Tomcat) ClientAbortException은 왜 발생할까? (Part 1)&lt;/a&gt;을 먼저 보는 것을 추천함.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html&quot;&gt;https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="tomcat" scheme="https://perfectacle.github.io/categories/tomcat/"/>
    
    
    <category term="Spring Boot" scheme="https://perfectacle.github.io/tags/Spring-Boot/"/>
    
    <category term="Tomcat" scheme="https://perfectacle.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>(Tomcat) ClientAbortException은 왜 발생할까? (Part 1)</title>
    <link href="https://perfectacle.github.io/2022/03/20/client-abort-exception-deep-dive-part-01/"/>
    <id>https://perfectacle.github.io/2022/03/20/client-abort-exception-deep-dive-part-01/</id>
    <published>2022-03-20T03:30:19.000Z</published>
    <updated>2022-06-06T08:23:55.808Z</updated>
    
    <content type="html"><![CDATA[<p>서버에서 아주 가끔가다가 ClientAbortException(java.io.IOExceiption: Broken pipe)이 발생해서 어떨 때 발생하는지 딥다이브 해봄.</p><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/stacktrace.png" class=""><p>적다보니 글이 길어져 글을 나누었는데 해당 글을 읽고 난 후에 <a href="/2022/03/20/client-abort-exception-deep-dive-part-02">(Tomcat) ClientAbortException은 왜 발생할까? (Part 2)</a>를 마저 보는 것을 추천함.</p><hr><p><a href="https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html">https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html</a></p><blockquote><p>Extend IOException to identify it as being caused by an abort of a request by a remote client.</p></blockquote><p>외부 클라이언트 측에서 요청을 abort(중단) 시켰을 때 발생하는 예외로 보인다.<br>톰캣에서 발생시키는 예외인데 Spring Boot의 Web(Mvc) 모듈에서 기본적으로 사용하는 게 Embedded Tomcat이기 때문에 많은 분들께서 자주 마주치지 않았을까… 싶다.<br>구글링 해보면 뭐 브라우저 이슈(API 응답이 오기 전에 새로고침을 했다던가, 뒤로가기를 했다던가 등등)니 뭐니 하는데 내가 겪은 상황은 server → server 통신에서 발생한 것이기 때문에 서버 간의 통신 관점에서만 파보았다.</p><p>삽질을 해보고 싶은 사람은 <a href="https://github.com/perfectacle/client-abort-exception-playground">https://github.com/perfectacle/client-abort-exception-playground</a> 을 clone 하면 된다.</p><p>그리고 ClientAbortException이 발생해도 스프링에서 기본적으로 <a href="https://www.baeldung.com/exception-handling-for-rest-with-spring#exceptionresolver">HandlerExceptionResolver</a>에서 예외를 핸들링하기 때문에 로그에는 아무것도 남지 않는다.<br>따라서 해당 에러가 발생하는지 에러 로그로 명확히 확인해보는 게 훨씬 직관적이기 때문에 아래 @RestControllerAdvice를 추가했다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControllerAdvice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = [Exception::class])</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">handleException</span><span class="params">(e: <span class="type">Exception</span>)</span></span>: ResponseEntity&lt;<span class="built_in">Void</span>&gt; &#123;</span><br><span class="line">        log.error(e.message, e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.internalServerError().build()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="N줄-요약"><a href="#N줄-요약" class="headerlink" title="N줄 요약"></a>N줄 요약</h1><ol><li>클라이언트가 응답 패킷을 받기 전에 연결을 끊으면<ol><li>ReadTimeout이 발생한 지 60초가 지나기 전에 응답 패킷을 보낸다면 (바로 소켓의 연결을 끊는 게 아니라 오동작을 막기 위해 60초(OS마다 다르지만 tcp_fin_timeout(대다수의 리눅스는 60로초 설정됨)) 동안 대기를 함.)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mac (60_000ms)</span></span><br><span class="line">sysctl -a | grep net.inet.tcp.fin_timeout</span><br><span class="line">net.inet.tcp.fin_timeout: 60000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux alpine (60s)</span></span><br><span class="line">sysctl -a | grep net.ipv4.tcp_fin_timeout</span><br><span class="line">net.ipv4.tcp_fin_timeout = 60</span><br></pre></td></tr></table></figure><ol><li>응답 패킷이 아주 작은 경우 (하나의 응답패킷에 담길 만큼)<ol><li>아직 소켓이 완전히 닫힌 게 아니기 때문에 응답 패킷을 보낼 수 있기 때문에 ClientAbortException이 발생하지 않는다.</li><li>ClientAbortException만 발생하지 않을 뿐이지, 클라이언트 측에서 정상적으로 응답 패킷을 받을 수 있는 건 아니다.</li></ol></li><li>응답 패킷이 큰 경우 (하나의 응답 패킷에 담기지 않을 만큼)<ol><li>아직 소켓이 완전히 닫힌 게 아니기 때문에 몇 개의 응답 패킷을 보낼 수 있다.</li><li>이 때는 ClientAbortException만 발생하지 않을 뿐이지, 클라이언트 측에서 정상적으로 응답 패킷을 받을 수 있는 건 아니다.</li><li>클라이언트 측에서는 FIN 패킷이 오길 원했는데 예상치 못한 패킷이 왔기 때문에 서버 측에 RST 패킷을 보낸 후 소켓을 닫는다.</li><li>나머지 응답 패킷을 보내려고 했는데 소켓이 닫혔기 때문에 <code>서버 측에서 응답 패킷을 보내려다가 ClientAbortException이 발생한다</code>.</li></ol></li></ol></li><li>ReadTimeout이 발생한 지 60초가 지난 이후에 응답 패킷을 보낸다면 (혹은 클라이언트 측 서버 셧다운(배포 혹은 컴퓨터 종료)으로 인해 소켓이 종료된 이후에 보낸다면)<ol><li>클라이언트가 ReadTimeout이 발생했다고 바로 소켓의 연결을 끊는 게 아니라 오동작을 막기 위해 60초(OS마다 다르지만 tcp_fin_timeout(대다수의 리눅스는 60로초 설정됨) 만큼) 동안 대기를 함.</li><li>그리고 60초가 지나면 클라이언트&#x2F;서버 소켓은 모두 종료됨.</li><li>이 상태에서 서버에서 응답 패킷을 보내려고 하면 소켓이 종료됐기 때문에 <code>서버 측에서 응답 패킷을 보내려다가 ClientAbortException이 발생한다</code>.</li></ol></li></ol></li><li><a href="#ClientAbortException%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EB%A0%A4%EB%A9%B4">ClientAbortException을 해결하려면?</a></li><li>프로세스(메인 함수)가 종료되더라도 Passive Close로부터 FIN 패킷을 받지 않으면 클라이언트&#x2F;서버의 소켓은 닫히지 않는다. (오동작을 막기 위해 대기하는 것으로 알고 있음.)<br>하지만 Passive Close로부터 FIN 패킷이 아닌 다른 패킷이 오면 Active Close에서는 RST 패킷을 보낸 후 소켓을 닫는다.<br>60초(OS마다 다르지만 tcp_fin_timeout(대다수의 리눅스는 60로초 설정됨) 만큼) 동안 대기 후에도 Passive Close에게 아무런 패킷이 오지 않으면 Active Close는 RST 패킷을 보내고 소켓을 닫는다.</li><li>HTTP Client 구현체마다 다르겠지만 Apache HTTP Client의 경우 Keep-Alive를 사용한다고 했음에도 불구하고 요청이 정상적으로 처리되지 않는 경우(Read Timeout 발생, 500 Internal Sever Error 응답을 받는다던지… 모든 4xx, 5xx가 포함되는 건 아님)에는 커넥션을 커넥션 풀에 반납하지 않고(재사용하지 않고) 종료한다.</li></ol><h1 id="클라이언트가-응답-패킷을-받기-전에-연결을-끊는-경우"><a href="#클라이언트가-응답-패킷을-받기-전에-연결을-끊는-경우" class="headerlink" title="클라이언트가 응답 패킷을 받기 전에 연결을 끊는 경우"></a>클라이언트가 응답 패킷을 받기 전에 연결을 끊는 경우</h1><h2 id="1-Read-Timeout-발생-후-60초-이내-소켓이-닫히기-전-에-응답-패킷을-전송하는-경우"><a href="#1-Read-Timeout-발생-후-60초-이내-소켓이-닫히기-전-에-응답-패킷을-전송하는-경우" class="headerlink" title="1. Read Timeout 발생 후 60초 이내(소켓이 닫히기 전)에 응답 패킷을 전송하는 경우"></a>1. Read Timeout 발생 후 60초 이내(소켓이 닫히기 전)에 응답 패킷을 전송하는 경우</h2><h3 id="1-1-클라이언트-측에서-Read-Timeout-발생-후-60초-이내-소켓이-닫히기-전-에-응답-패킷을-하나만-전송하는-경우-응답이-작은-경우"><a href="#1-1-클라이언트-측에서-Read-Timeout-발생-후-60초-이내-소켓이-닫히기-전-에-응답-패킷을-하나만-전송하는-경우-응답이-작은-경우" class="headerlink" title="1-1. 클라이언트 측에서 Read Timeout 발생 후 60초 이내(소켓이 닫히기 전)에 응답 패킷을 하나만 전송하는 경우 (응답이 작은 경우)"></a>1-1. 클라이언트 측에서 Read Timeout 발생 후 60초 이내(소켓이 닫히기 전)에 응답 패킷을 하나만 전송하는 경우 (응답이 작은 경우)</h3><p>서버 쪽 API에서 처리하는데 10초 소요되고, 매우 작은 문자열을 응답한다고 가정</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlowResponseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="string">&quot;/slow&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">slow</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        log.info(<span class="string">&quot;request is arrived!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10_000L</span>)</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;slow process is done!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;done!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클라이언트 측 리드 타임아웃 설정은 3초로 서버 쪽 처리 시간보다 더 짧게 설정함</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> readTimeout = Duration.ofSeconds(<span class="number">3L</span>)</span><br><span class="line">    <span class="keyword">val</span> restTemplate = RestTemplate(</span><br><span class="line">        HttpComponentsClientHttpRequestFactory(</span><br><span class="line">            HttpClientBuilder</span><br><span class="line">                .create()</span><br><span class="line">                .setMaxConnPerRoute(<span class="number">100</span>)</span><br><span class="line">                .setMaxConnTotal(<span class="number">100</span>)</span><br><span class="line">                .setKeepAliveStrategy(DefaultConnectionKeepAliveStrategy())</span><br><span class="line">                .setDefaultRequestConfig(</span><br><span class="line">                    RequestConfig.custom().setSocketTimeout(readTimeout.toMillis().toInt()).build()</span><br><span class="line">                )</span><br><span class="line">                .build()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/slow&quot;</span>, String::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] request is done!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커넥션 풀에 있는 커넥션을 바로 종료하지 않기 위해 10초간 슬립</span></span><br><span class="line">    Thread.sleep(<span class="number">10_000L</span>)</span><br><span class="line">    println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] main function is done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="데모-영상"><a href="#데모-영상" class="headerlink" title="데모 영상"></a>데모 영상</h4><div class="video-container"><iframe src="https://www.youtube.com/embed/NO6JOsIE0aI" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h4 id="클라이언트-로그"><a href="#클라이언트-로그" class="headerlink" title="클라이언트 로그"></a>클라이언트 로그</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.241</span> [main] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http:<span class="comment">//localhost:8080/slow</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.247</span> [main] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application<span class="comment">/*+json, */</span>*]</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.277</span> [main] DEBUG org.apache.http.client.protocol.RequestAddCookies - CookieSpec selected: default</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.280</span> [main] DEBUG org.apache.http.client.protocol.RequestAuthCache - Auth cache not <span class="keyword">set</span> <span class="keyword">in</span> the context</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.280</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection request: [route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.284</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection leased: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 1 of 100; total allocated: 1 of 100]</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.285</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Opening connection &#123;&#125;-&gt;http:<span class="comment">//localhost:8080</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.289</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connecting to localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.289</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">60596</span>&lt;-&gt;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.289</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: <span class="keyword">set</span> socket timeout to <span class="number">3000</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Executing request GET /slow HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Target auth state: UNCHALLENGED</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Proxy auth state: UNCHALLENGED</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; GET /slow HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept: text/plain, application/json, application<span class="comment">/*+json, */</span>*</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Host: localhost:<span class="number">8080</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Connection: Keep-Alive</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; User-Agent: Apache-HttpClient/<span class="number">4.5</span><span class="number">.13</span> (Java/<span class="number">1.8</span><span class="number">.0_322</span>)</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept-Encoding: gzip,deflate</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;GET /slow HTTP/1.1[\r][\n]&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept: text/plain, application/json, application/*+json, */*[\r][\n]&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Host: localhost:8080[\r][\n]&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Connection: Keep-Alive[\r][\n]&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;User-Agent: Apache-HttpClient/4.5.13 (Java/1.8.0_322)[\r][\n]&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept-Encoding: gzip,deflate[\r][\n]&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">26.290</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;[\r][\n]&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">29.296</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;[read] I/O error: Read timed out&quot;</span></span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">29.296</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: Close connection</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">29.297</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: Shutdown connection</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">29.297</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Connection discarded</span><br><span class="line"><span class="number">21</span>:<span class="number">15</span>:<span class="number">29.297</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection released: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-19T21:<span class="number">15</span>:<span class="number">29.306</span>] request <span class="keyword">is</span> done!</span><br><span class="line">org.springframework.web.client.ResourceAccessException: I/O error on GET request <span class="keyword">for</span> <span class="string">&quot;http://localhost:8080/slow&quot;</span>: Read timed <span class="keyword">out</span>; nested exception <span class="keyword">is</span> java.net.SocketTimeoutException: Read timed <span class="keyword">out</span></span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">785</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:<span class="number">711</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:<span class="number">334</span>)</span><br><span class="line">at com.example.playground.slow.SlowResponseRestTemplatePlaygroundKt.main(SlowResponseRestTemplatePlayground.kt:<span class="number">28</span>)</span><br><span class="line">at com.example.playground.slow.SlowResponseRestTemplatePlaygroundKt.main(SlowResponseRestTemplatePlayground.kt)</span><br><span class="line">Caused <span class="keyword">by</span>: java.net.SocketTimeoutException: Read timed <span class="keyword">out</span></span><br><span class="line">at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">116</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">171</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">141</span>)</span><br><span class="line">at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:<span class="number">84</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:<span class="number">137</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:<span class="number">153</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:<span class="number">280</span>)</span><br><span class="line">at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:<span class="number">138</span>)</span><br><span class="line">at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:<span class="number">56</span>)</span><br><span class="line">at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:<span class="number">259</span>)</span><br><span class="line">at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:<span class="number">163</span>)</span><br><span class="line">at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:<span class="number">157</span>)</span><br><span class="line">at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:<span class="number">273</span>)</span><br><span class="line">at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:<span class="number">125</span>)</span><br><span class="line">at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class="number">272</span>)</span><br><span class="line">at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line">at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class="number">89</span>)</span><br><span class="line">at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class="number">110</span>)</span><br><span class="line">at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line">at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line">at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">56</span>)</span><br><span class="line">at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:<span class="number">48</span>)</span><br><span class="line">at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:<span class="number">66</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">776</span>)</span><br><span class="line">... <span class="number">4</span> more</span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-19T21:<span class="number">15</span>:<span class="number">39.315</span>] main function <span class="keyword">is</span> done!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>21:15:26.289에 서버와 커넥션 맺음. (<code>21:15:26.289 [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established 127.0.0.1:60596&lt;-&gt;127.0.0.1:8080</code>)</li><li>21:15:26.290에 요청 전송 (<code>21:15:26.290 [main] DEBUG org.apache.http.wire - http-outgoing-0 &gt;&gt; ...</code>)</li><li>21:15:29.296에 Read Timeout 발생 (정확히 우리가 설정한 3초 후에 발생함, <code>21:15:29.296 [main] DEBUG org.apache.http.wire - http-outgoing-0 &lt;&lt; &quot;[read] I/O error: Read timed out&quot;</code>)</li><li>21:15:29.296 ~ 21:15:29.297에 커넥션 종료 (Keep-Alive 설정했음에도 불구하고, 정상적인 응답을 받지 못했으면 커넥션을 종료함. <code>21:15:29.296 [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-0: Close connection</code>)</li><li>21:15:39.315에 메인함수 종료</li></ol><h4 id="서버-로그"><a href="#서버-로그" class="headerlink" title="서버 로그"></a>서버 로그</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">26.291</span>  INFO <span class="number">8275</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">3</span>] c.e.s.SlowResponseController             : request <span class="keyword">is</span> arrived!</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">36.297</span>  INFO <span class="number">8275</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">3</span>] c.e.s.SlowResponseController             : slow process <span class="keyword">is</span> done!</span><br></pre></td></tr></table></figure><ol><li>21:15:26.291에 요청 도착</li><li>21:15:36.297에 처리 완료 (10초 걸림)</li></ol><p>아무런 에러 로그를 출력하지 않기 때문에 서버 측에서는 클라이언트가 올바르게 응답을 처리했는지 알 방법이 없다.</p><h4 id="패킷-로그-소켓-상태"><a href="#패킷-로그-소켓-상태" class="headerlink" title="패킷 로그 (소켓 상태)"></a>패킷 로그 (소켓 상태)</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">239</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">26.289278</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">60596</span> → <span class="number">8080</span> [SYN] Seq=<span class="number">0</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">3550708683</span> TSecr=<span class="number">0</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">240</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">26.289504</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">8080</span> → <span class="number">60596</span> [SYN, ACK] Seq=<span class="number">0</span> Ack=<span class="number">1</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">2530353116</span> TSecr=<span class="number">3550708683</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">241</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">26.289530</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">60596</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">3550708683</span> TSecr=<span class="number">2530353116</span></span><br><span class="line"><span class="number">242</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">26.289547</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span>[TCP Window Update] <span class="number">8080</span> → <span class="number">60596</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">2530353116</span> TSecr=<span class="number">3550708683</span></span><br><span class="line"><span class="number">243</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">26.291192</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>HTTP<span class="number">273</span>GET /slow HTTP/<span class="number">1.1</span> </span><br><span class="line"><span class="number">244</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">26.291233</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">60596</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">218</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">2530353118</span> TSecr=<span class="number">3550708685</span></span><br><span class="line"><span class="number">245</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">29.297321</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">60596</span> → <span class="number">8080</span> [FIN, ACK] Seq=<span class="number">218</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">3550711691</span> TSecr=<span class="number">2530353118</span></span><br><span class="line"><span class="number">246</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">29.297383</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">60596</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">219</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">2530356124</span> TSecr=<span class="number">3550711691</span></span><br><span class="line"><span class="number">247</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">36.298103</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>HTTP<span class="number">222</span>HTTP/<span class="number">1.1</span> <span class="number">200</span>   (text/plain)</span><br><span class="line"><span class="number">248</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">36.298215</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">44</span><span class="number">60596</span> → <span class="number">8080</span> [RST] Seq=<span class="number">219</span> Win=<span class="number">0</span> Len=<span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>239 ~ 241번 패킷은 TCP 3 Way Handshake (syn, syn&#x2F;ack, ack)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/tcp-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-3-way-handshake-socket-status.png" class=""></li><li>243번 패킷에서 클라이언트 → 서버로 HTTP 요청 패킷 전송 (21:15:26.291192)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-send-http-request-packet.png" class=""></li><li>244번 패킷에서 서버가 요청 잘 받았다고 클라이언트한테 ACK 패킷 전송 (21:15:26.291233)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-send-http-request-ack-packet.png" class=""></li><li>245번 패킷에서 클라이언트는 커넥션을 종료한다고 FIN&#x2F;ACK 패킷을 서버에게 전송 (21:15:29.297321, 정확히 HTTP 패킷 보내고 3초 후(read timeout)임.)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-send-fin-packet.png" class=""></li><li>246번 패킷에서 서버가 클라이언트로부터 FIN&#x2F;ACK 패킷을 잘 받았다고 반대로 ACK 패킷을 클라이언트에게 보냄 (21:15:29.297383)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-send-ack-packet.png" class=""></li><li>클라이언트가 먼저 연결을 종료하겠다는 FIN 패킷을 보냈기 때문에 클라이언트가 Active Close<br>서버는 클라이언트로부터 FIN 패킷을 받았기 때문에 서버는 Passive Close가 됨<br>(무조건 클라이언트가 Active Close는 아니고 경우에 따라서 다름)<br>그리고 아직까지는 서버(Passive Close)로부터 FIN 패킷을 받은 게 아니기 때문에 소켓이 정상적으로 종료된 게 아님.<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/tcp-termination.png" class=""></li><li>서버 측 소켓의 상태는 CLOSE_WAIT(클라이언트가 보낸 FIN 패킷을 받았으므로)이고, 클라이언트 측 소켓의 상태는 FIN_WAIT_2(서버가 보낸 ACK 패킷을 받았으므로)이다. (21:15:29)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-fin-ack-socket-status-01.png" class=""></li><li>서버는 클라이언트로부터 FIN 패킷을 받았지만 아직 보낼 패킷이 남아있기 때문인지 클라이언트에게 FIN 패킷을 보내지 않음.<br>그리고 Active Close(클라이언트) 측에서는 오동작을 막기 위해 바로 소켓의 연결을 끊는 게 아니라 60초(OS마다 다르지만 tcp_fin_timeout(대다수의 리눅스는 60로초 설정됨) 만큼) 동안 대기하게 됨. (21:15:35)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-fin-ack-socket-status-02.png" class=""></li><li>247번 패킷에서 서버 → 클라이언트로 HTTP 응답 패킷 전송 (21:15:36.298103, 클라이언트가 요청 보낸 21:15:26.291192로부터 10초가 지난 시간임)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-send-http-response-packet.png" class=""></li><li>248번 패킷에서 클라이언트 → 서버로 RST 패킷 전송 (21:15:36.298215)<blockquote><p>When an unexpected TCP packet arrives at a host, that host usually responds by sending a reset packet back on the same connection. A reset packet is simply one with no payload and with the <code>RST</code> bit set in the TCP header flags.<br>출처: <a href="https://www.pico.net/kb/what-is-a-tcp-reset-rst/">https://www.pico.net/kb/what-is-a-tcp-reset-rst/</a></p></blockquote><p>클라이언트 측에서는 소켓 연결 종료를 준비하고 있었는데 서버 측으로부터 의도치 않은 HTTP 패킷이 왔기 때문에 더 이상 패킷을 받을 수 없다는 RST 패킷을 전송한 것으로 보임. (원래는 서버에서 FIN 패킷을 한 번 보내주고 클라이언트가 다시 ACK 패킷을 보내서 소켓을 종료해야한다.)</p><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-send-rst-packet.png" class=""></li><li>RST 패킷을 전송한 이후에 클라이언트&#x2F;서버 측 소켓이 정상적으로 종료됨 (21:15:36)   <img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-small-response-send-rst-packet-socket-status.png" class=""></li></ol><h3 id="1-2-클라이언트-측에서-Read-Timeout-발생-후-60초-이내-소켓이-닫히기-전-에-응답-패킷을-여러-개-전송하는-경우-응답이-큰-경우"><a href="#1-2-클라이언트-측에서-Read-Timeout-발생-후-60초-이내-소켓이-닫히기-전-에-응답-패킷을-여러-개-전송하는-경우-응답이-큰-경우" class="headerlink" title="1-2. 클라이언트 측에서 Read Timeout 발생 후 60초 이내(소켓이 닫히기 전)에 응답 패킷을 여러 개 전송하는 경우 (응답이 큰 경우)"></a>1-2. 클라이언트 측에서 Read Timeout 발생 후 60초 이내(소켓이 닫히기 전)에 응답 패킷을 여러 개 전송하는 경우 (응답이 큰 경우)</h3><p>서버 쪽 API에서 처리하는데 10초 소요되고, 매우 큰 문자열을 응답한다고 가정</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlowLargeResponseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="string">&quot;/slow-large&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">slow</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        log.info(<span class="string">&quot;request is arrived!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10_000L</span>)</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;slow large process is done!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;done!&quot;</span>.repeat(<span class="number">1_000_000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클라이언트 측 리드 타임아웃 설정은 3초로 서버 쪽 처리 시간보다 더 짧게 설정함</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> readTimeout = Duration.ofSeconds(<span class="number">3L</span>)</span><br><span class="line">    <span class="keyword">val</span> restTemplate = RestTemplate(</span><br><span class="line">        HttpComponentsClientHttpRequestFactory(</span><br><span class="line">            HttpClientBuilder</span><br><span class="line">                .create()</span><br><span class="line">                .setMaxConnPerRoute(<span class="number">100</span>)</span><br><span class="line">                .setMaxConnTotal(<span class="number">100</span>)</span><br><span class="line">                .setKeepAliveStrategy(DefaultConnectionKeepAliveStrategy())</span><br><span class="line">                .setDefaultRequestConfig(</span><br><span class="line">                    RequestConfig.custom().setSocketTimeout(readTimeout.toMillis().toInt()).build()</span><br><span class="line">                )</span><br><span class="line">                .build()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/slow-large&quot;</span>, String::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] request is done!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커넥션 풀에 있는 커넥션을 바로 종료하지 않기 위해 10초간 슬립</span></span><br><span class="line">    Thread.sleep(<span class="number">10_000L</span>)</span><br><span class="line">    println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] main function is done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="데모-영상-1"><a href="#데모-영상-1" class="headerlink" title="데모 영상"></a>데모 영상</h4><div class="video-container"><iframe src="https://www.youtube.com/embed/3PJNHxeGbeQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h4 id="클라이언트-로그-1"><a href="#클라이언트-로그-1" class="headerlink" title="클라이언트 로그"></a>클라이언트 로그</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.860</span> [main] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http:<span class="comment">//localhost:8080/slow-large</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.867</span> [main] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application<span class="comment">/*+json, */</span>*]</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.895</span> [main] DEBUG org.apache.http.client.protocol.RequestAddCookies - CookieSpec selected: default</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.898</span> [main] DEBUG org.apache.http.client.protocol.RequestAuthCache - Auth cache not <span class="keyword">set</span> <span class="keyword">in</span> the context</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.899</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection request: [route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.903</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection leased: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 1 of 100; total allocated: 1 of 100]</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.903</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Opening connection &#123;&#125;-&gt;http:<span class="comment">//localhost:8080</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.905</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connecting to localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">50422</span>&lt;-&gt;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: <span class="keyword">set</span> socket timeout to <span class="number">3000</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Executing request GET /slow-large HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Target auth state: UNCHALLENGED</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Proxy auth state: UNCHALLENGED</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; GET /slow-large HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept: text/plain, application/json, application<span class="comment">/*+json, */</span>*</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Host: localhost:<span class="number">8080</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Connection: Keep-Alive</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; User-Agent: Apache-HttpClient/<span class="number">4.5</span><span class="number">.13</span> (Java/<span class="number">1.8</span><span class="number">.0_322</span>)</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept-Encoding: gzip,deflate</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;GET /slow-large HTTP/1.1[\r][\n]&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept: text/plain, application/json, application/*+json, */*[\r][\n]&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Host: localhost:8080[\r][\n]&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Connection: Keep-Alive[\r][\n]&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;User-Agent: Apache-HttpClient/4.5.13 (Java/1.8.0_322)[\r][\n]&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept-Encoding: gzip,deflate[\r][\n]&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">22.907</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;[\r][\n]&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">25.913</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;[read] I/O error: Read timed out&quot;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">25.913</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: Close connection</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">25.915</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: Shutdown connection</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">25.916</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Connection discarded</span><br><span class="line"><span class="number">05</span>:<span class="number">19</span>:<span class="number">25.916</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection released: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-20T05:<span class="number">19</span>:<span class="number">25.920</span>] request <span class="keyword">is</span> done!</span><br><span class="line">org.springframework.web.client.ResourceAccessException: I/O error on GET request <span class="keyword">for</span> <span class="string">&quot;http://localhost:8080/slow-large&quot;</span>: Read timed <span class="keyword">out</span>; nested exception <span class="keyword">is</span> java.net.SocketTimeoutException: Read timed <span class="keyword">out</span></span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">785</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:<span class="number">711</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:<span class="number">334</span>)</span><br><span class="line">at com.example.playground.SlowLargeResponseRestTemplatePlaygroundKt.main(SlowLargeResponseRestTemplatePlayground.kt:<span class="number">28</span>)</span><br><span class="line">at com.example.playground.SlowLargeResponseRestTemplatePlaygroundKt.main(SlowLargeResponseRestTemplatePlayground.kt)</span><br><span class="line">Caused <span class="keyword">by</span>: java.net.SocketTimeoutException: Read timed <span class="keyword">out</span></span><br><span class="line">at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">116</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">171</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">141</span>)</span><br><span class="line">at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:<span class="number">84</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:<span class="number">137</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:<span class="number">153</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:<span class="number">280</span>)</span><br><span class="line">at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:<span class="number">138</span>)</span><br><span class="line">at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:<span class="number">56</span>)</span><br><span class="line">at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:<span class="number">259</span>)</span><br><span class="line">at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:<span class="number">163</span>)</span><br><span class="line">at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:<span class="number">157</span>)</span><br><span class="line">at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:<span class="number">273</span>)</span><br><span class="line">at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:<span class="number">125</span>)</span><br><span class="line">at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class="number">272</span>)</span><br><span class="line">at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line">at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class="number">89</span>)</span><br><span class="line">at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class="number">110</span>)</span><br><span class="line">at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line">at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line">at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">56</span>)</span><br><span class="line">at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:<span class="number">48</span>)</span><br><span class="line">at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:<span class="number">66</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">776</span>)</span><br><span class="line">... <span class="number">4</span> more</span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-20T05:<span class="number">19</span>:<span class="number">35.925</span>] main function <span class="keyword">is</span> done!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>05:19:22.906에 서버와 커넥션 맺음. (<code>05:19:22.906 [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established 127.0.0.1:50422&lt;-&gt;127.0.0.1:8080</code>)</li><li>05:19:22.907에 요청 전송 (<code>05:19:22.907 [main] DEBUG org.apache.http.wire - http-outgoing-0 &gt;&gt; ...</code>)</li><li>05:19:25.913에 Read Timeout 발생 (정확히 우리가 설정한 3초 후에 발생함, <code>05:19:25.913 [main] DEBUG org.apache.http.wire - http-outgoing-0 &lt;&lt; &quot;[read] I/O error: Read timed out&quot;</code>)</li><li>05:19:25.913 ~ 05:19:25.915에 커넥션 종료 (Keep-Alive 설정했음에도 불구하고, 정상적인 응답을 받지 못했으면 커넥션을 종료함. <code>05:19:25.913 [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-0: Close connection</code>)</li><li>05:19:35.925에 메인함수 종료</li></ol><h4 id="서버-로그-1"><a href="#서버-로그-1" class="headerlink" title="서버 로그"></a>서버 로그</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">22.908</span>  INFO <span class="number">63172</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">2</span>] c.e.p.SlowLargeResponseController        : request <span class="keyword">is</span> arrived!</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.913</span>  INFO <span class="number">63172</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">2</span>] c.e.p.SlowLargeResponseController        : slow large process <span class="keyword">is</span> done!</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.937</span> ERROR <span class="number">63172</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">2</span>] com.example.playground.ControllerAdvice  : java.io.IOException: Broken pipe</span><br><span class="line"></span><br><span class="line">org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:<span class="number">353</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:<span class="number">783</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:<span class="number">688</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:<span class="number">388</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:<span class="number">366</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:<span class="number">96</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:<span class="number">221</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:<span class="number">282</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:<span class="number">125</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:<span class="number">135</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at java.io.OutputStreamWriter.write(OutputStreamWriter.java:<span class="number">220</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at java.io.Writer.write(Writer.java:<span class="number">157</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at org.springframework.util.StreamUtils.copy(StreamUtils.java:<span class="number">147</span>) ~[spring-core-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:<span class="number">126</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:<span class="number">44</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:<span class="number">227</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:<span class="number">293</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:<span class="number">183</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:<span class="number">78</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">135</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">808</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1067</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">963</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>) [spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>) [spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">655</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">4.0</span>.FR]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>) [spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">764</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">4.0</span>.FR]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">227</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>) [tomcat-embed-websocket-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">197</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">97</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">540</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">135</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">78</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">359</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">399</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">889</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1735</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1191</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">659</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">750</span>) [na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">Caused <span class="keyword">by</span>: java.io.IOException: Broken pipe</span><br><span class="line">at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:<span class="number">47</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:<span class="number">93</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.IOUtil.write(IOUtil.java:<span class="number">65</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:<span class="number">470</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:<span class="number">135</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:<span class="number">1376</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:<span class="number">766</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:<span class="number">586</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:<span class="number">530</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:<span class="number">547</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.filters.IdentityOutputFilter.doWrite(IdentityOutputFilter.java:<span class="number">73</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:<span class="number">194</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.Response.doWrite(Response.java:<span class="number">615</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:<span class="number">340</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">... <span class="number">62</span> common frames omitted</span><br></pre></td></tr></table></figure><ol><li>05:19:22.908에 요청 도착</li><li>05:19:32.913에 처리 완료 (10초 걸림)</li><li>05:19:32.937에 <code>ClientAbortException(java.io.IOException: Broken pipe)</code> 발생</li></ol><h4 id="패킷-로그-소켓-상태-1"><a href="#패킷-로그-소켓-상태-1" class="headerlink" title="패킷 로그 (소켓 상태)"></a>패킷 로그 (소켓 상태)</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">143</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906081</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">50422</span> → <span class="number">8080</span> [SYN] Seq=<span class="number">0</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">3840422295</span> TSecr=<span class="number">0</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">144</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906253</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">8080</span> → <span class="number">50422</span> [SYN, ACK] Seq=<span class="number">0</span> Ack=<span class="number">1</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">3598884109</span> TSecr=<span class="number">3840422295</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">145</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906270</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">50422</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">3840422295</span> TSecr=<span class="number">3598884109</span></span><br><span class="line"><span class="number">146</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">22.906283</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span>[TCP Window Update] <span class="number">8080</span> → <span class="number">50422</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">3598884109</span> TSecr=<span class="number">3840422295</span></span><br><span class="line"><span class="number">147</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">22.908202</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>HTTP<span class="number">279</span>GET /slow-large HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">148</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">22.908223</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">50422</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">224</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">3598884111</span> TSecr=<span class="number">3840422297</span></span><br><span class="line"><span class="number">149</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">25.915247</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">50422</span> → <span class="number">8080</span> [FIN, ACK] Seq=<span class="number">224</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">3840425304</span> TSecr=<span class="number">3598884111</span></span><br><span class="line"><span class="number">150</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">25.915291</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">50422</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">225</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">3598887118</span> TSecr=<span class="number">3840425304</span></span><br><span class="line"><span class="number">163</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935627</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">50422</span> [PSH, ACK] Seq=<span class="number">1</span> Ack=<span class="number">225</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3598894139</span> TSecr=<span class="number">3840425304</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">164</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935668</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">50422</span> [PSH, ACK] Seq=<span class="number">8193</span> Ack=<span class="number">225</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3598894139</span> TSecr=<span class="number">3840425304</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">165</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935695</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">50422</span> [PSH, ACK] Seq=<span class="number">16385</span> Ack=<span class="number">225</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3598894139</span> TSecr=<span class="number">3840425304</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">166</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935704</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">44</span><span class="number">50422</span> → <span class="number">8080</span> [RST] Seq=<span class="number">225</span> Win=<span class="number">0</span> Len=<span class="number">0</span></span><br><span class="line"><span class="number">167</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935715</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">44</span><span class="number">50422</span> → <span class="number">8080</span> [RST] Seq=<span class="number">225</span> Win=<span class="number">0</span> Len=<span class="number">0</span></span><br><span class="line"><span class="number">168</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935719</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">44</span><span class="number">50422</span> → <span class="number">8080</span> [RST] Seq=<span class="number">225</span> Win=<span class="number">0</span> Len=<span class="number">0</span></span><br><span class="line"><span class="number">169</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935721</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">8248</span><span class="number">8080</span> → <span class="number">50422</span> [PSH, ACK] Seq=<span class="number">24577</span> Ack=<span class="number">225</span> Win=<span class="number">408064</span> Len=<span class="number">8192</span> TSval=<span class="number">3598894139</span> TSecr=<span class="number">3840425304</span> [TCP segment of a reassembled PDU]</span><br><span class="line"><span class="number">170</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">32.935741</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">44</span><span class="number">50422</span> → <span class="number">8080</span> [RST] Seq=<span class="number">225</span> Win=<span class="number">0</span> Len=<span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>143 ~ 145번 패킷은 TCP 3 Way Handshake (syn, syn&#x2F;ack, ack)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/tcp-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-3-way-handshake-socket-status.png" class=""></li><li>147번 패킷에서 클라이언트 → 서버로 HTTP 요청 패킷 전송 (05:19:22.908202)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-http-request-packet.png" class=""></li><li>148번 패킷에서 서버가 요청 잘 받았다고 클라이언트한테 ACK 패킷 전송 (05:19:22.908223)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-http-request-ack-packet.png" class=""></li><li>149번 패킷에서 클라이언트는 커넥션을 종료한다고 FIN&#x2F;ACK 패킷을 서버에게 전송 (05:19:25.915247, 정확히 HTTP 패킷 보내고 3초 이후(read timeout)임.)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-fin-packet.png" class=""></li><li>150번 패킷에서 서버가 클라이언트로부터 FIN&#x2F;ACK 패킷을 잘 받았다고 반대로 ACK 패킷을 클라이언트에게 보냄 (05:19:25.915291)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-ack-packet.png" class=""></li><li>클라이언트가 먼저 연결을 종료하겠다는 FIN 패킷을 보냈기 때문에 클라이언트가 Active Close<br>서버는 클라이언트로부터 FIN 패킷을 받았기 때문에 서버는 Passive Close가 됨<br>(무조건 클라이언트가 Active Close는 아니고 경우에 따라서 다름)<br>그리고 아직까지는 서버(Passive Close)로부터 FIN 패킷을 받은 게 아니기 때문에 소켓이 정상적으로 종료된 게 아님.<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/tcp-termination.png" class=""></li><li>서버 측 소켓의 상태는 CLOSE_WAIT(클라이언트가 보낸 FIN 패킷을 받았으므로)이고, 클라이언트 측 소켓의 상태는 FIN_WAIT_2(서버가 보낸 ACK 패킷을 받았으므로)이다. (05:19:26)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-fin-ack-socket-status-01.png" class=""></li><li>서버는 클라이언트로부터 FIN 패킷을 받았지만 아직 보낼 패킷이 남아있기 때문인지 클라이언트에게 FIN 패킷을 보내지 않음.<br>그리고 Active Close(클라이언트) 측에서는 오동작을 막기 위해 바로 소켓의 연결을 끊는 게 아니라 60초(OS마다 다르지만 tcp_fin_timeout(대다수의 리눅스는 60로초 설정됨)) 동안 대기하게 됨. (05:19:32)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-fin-ack-socket-status-02.png" class=""></li><li>163번 패킷에서 서버로부터 HTTP 응답이 오는데 너무 커서 한 번에 오지 않고 여러 패킷에 걸쳐서 전송됨. (05:19:32.935627)<br>TCP 패킷은 순서를 보장하지 않기 때문에 클라이언트 측에서 재조립하여야하는데 그걸 위해 <code>현재 시퀀스 넘버(1)</code>와 <code>다음 패킷의 시퀀스 넘버(8193)</code>를 알려주고 있음.<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-http-response-packet-01.png" class=""></li><li>164번 패킷을 보니 또 응답 패킷인데 <code>현재 패킷의 시퀀스 넘버는 8193</code>이니 163번 패킷의 다음 패킷이고, 그 <code>다음 패킷의 시퀀스 넘버는 16385</code>임. (05:19:32.935668)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-http-response-packet-02.png" class=""></li><li>165번 패킷을 보니 또 응답 패킷인데 <code>현재 패킷의 시퀀스 넘버는 16385</code>이니 164번 패킷의 다음 패킷이고, 그 <code>다음 패킷의 시퀀스 넘버는 24577</code>임. (05:19:32.935695)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-http-response-packet-03.png" class=""></li><li>166 ~ 168번 패킷을 보면 클라이언트는 FIN_WAIT_2 상태이기 때문에 서버로부터 FIN 패킷이 올 것을 예상했는데 3번이나 다른 패킷이 왔기 때문에 RST 패킷을 3번 보냄 (05:19:32.935704~ 05:19:32.935719)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-rst-packet-01.png" class=""></li><li>169번 패킷을 보면 서버 측에 RST 패킷을 보내긴 했지만 아직 소켓이 닫히기 이전이기 때문에 그사이에 또 서버 → 클라이언트로 응답패킷이 왔다. (05:19:32.935721)<br>여전히 응답이 더 남았기 때문에 다음 패킷의 시퀀스 넘버도 함께 보내줬다.<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-http-response-packet-04.png" class=""></li><li>170번 패킷을 보면 또 서버에서 FIN 패킷이 온 게 아니기 때문에 클라이언트는 다시 서버에게 RST 패킷을 보내서 소켓을 닫을 준비를 한다. (05:19:32.935741)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-rst-packet-02.png" class=""></li><li>그리고나서 진짜로 클라이언트&#x2F;서버의 소켓이 닫혔다. (05:19:33)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-in-60s-large-response-send-rst-packet-socket-status.png" class=""></li></ol><h2 id="2-클라이언트-측에서-Read-Timeout-발생-후-60초-이후-소켓이-닫힌-후-에-응답-패킷을-전송하는-경우"><a href="#2-클라이언트-측에서-Read-Timeout-발생-후-60초-이후-소켓이-닫힌-후-에-응답-패킷을-전송하는-경우" class="headerlink" title="2. 클라이언트 측에서 Read Timeout 발생 후 60초 이후(소켓이 닫힌 후)에 응답 패킷을 전송하는 경우"></a>2. 클라이언트 측에서 Read Timeout 발생 후 60초 이후(소켓이 닫힌 후)에 응답 패킷을 전송하는 경우</h2><p>서버 쪽 API에서 처리하는데 70초 소요된다고 가정</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerySlowResponseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="string">&quot;/very-slow&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">verySlow</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        log.info(<span class="string">&quot;request is arrived!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">70_000L</span>)</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;very slow process is done!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;done!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클라이언트 측 리드 타임아웃 설정은 3초로 서버 쪽 처리 시간보다 훨씬 짧게 설정함</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> readTimeout = Duration.ofSeconds(<span class="number">3L</span>)</span><br><span class="line">    <span class="keyword">val</span> restTemplate = RestTemplate(</span><br><span class="line">        HttpComponentsClientHttpRequestFactory(</span><br><span class="line">            HttpClientBuilder</span><br><span class="line">                .create()</span><br><span class="line">                .setMaxConnPerRoute(<span class="number">100</span>)</span><br><span class="line">                .setMaxConnTotal(<span class="number">100</span>)</span><br><span class="line">                .setKeepAliveStrategy(DefaultConnectionKeepAliveStrategy())</span><br><span class="line">                .setDefaultRequestConfig(</span><br><span class="line">                    RequestConfig.custom().setSocketTimeout(readTimeout.toMillis().toInt()).build()</span><br><span class="line">                )</span><br><span class="line">                .build()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/very-slow&quot;</span>, String::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] request is done!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커넥션 풀에 있는 커넥션을 바로 종료하지 않기 위해 10초간 슬립</span></span><br><span class="line">    Thread.sleep(<span class="number">10_000L</span>)</span><br><span class="line">    println(<span class="string">&quot;[<span class="subst">$&#123;LocalDateTime.now()&#125;</span>] main function is done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="데모-영상-2"><a href="#데모-영상-2" class="headerlink" title="데모 영상"></a>데모 영상</h3><div class="video-container"><iframe src="https://www.youtube.com/embed/pWqBXHCkXW8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="클라이언트-로그-2"><a href="#클라이언트-로그-2" class="headerlink" title="클라이언트 로그"></a>클라이언트 로그</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.010</span> [main] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http:<span class="comment">//localhost:8080/very-slow</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.016</span> [main] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application<span class="comment">/*+json, */</span>*]</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.042</span> [main] DEBUG org.apache.http.client.protocol.RequestAddCookies - CookieSpec selected: default</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.045</span> [main] DEBUG org.apache.http.client.protocol.RequestAuthCache - Auth cache not <span class="keyword">set</span> <span class="keyword">in</span> the context</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.046</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection request: [route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.050</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection leased: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 1 of 100; total allocated: 1 of 100]</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.050</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Opening connection &#123;&#125;-&gt;http:<span class="comment">//localhost:8080</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.052</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connecting to localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053</span> [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">62960</span>&lt;-&gt;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: <span class="keyword">set</span> socket timeout to <span class="number">3000</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Executing request GET /very-slow HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Target auth state: UNCHALLENGED</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Proxy auth state: UNCHALLENGED</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; GET /very-slow HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept: text/plain, application/json, application<span class="comment">/*+json, */</span>*</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Host: localhost:<span class="number">8080</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Connection: Keep-Alive</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; User-Agent: Apache-HttpClient/<span class="number">4.5</span><span class="number">.13</span> (Java/<span class="number">1.8</span><span class="number">.0_322</span>)</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.headers - http-outgoing-<span class="number">0</span> &gt;&gt; Accept-Encoding: gzip,deflate</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;GET /very-slow HTTP/1.1[\r][\n]&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept: text/plain, application/json, application/*+json, */*[\r][\n]&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Host: localhost:8080[\r][\n]&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Connection: Keep-Alive[\r][\n]&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;User-Agent: Apache-HttpClient/4.5.13 (Java/1.8.0_322)[\r][\n]&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;Accept-Encoding: gzip,deflate[\r][\n]&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">15.054</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &gt;&gt; <span class="string">&quot;[\r][\n]&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">18.058</span> [main] DEBUG org.apache.http.wire - http-outgoing-<span class="number">0</span> &lt;&lt; <span class="string">&quot;[read] I/O error: Read timed out&quot;</span></span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">18.059</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: Close connection</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">18.060</span> [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-<span class="number">0</span>: Shutdown connection</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">18.060</span> [main] DEBUG org.apache.http.impl.execchain.MainClientExec - Connection discarded</span><br><span class="line"><span class="number">23</span>:<span class="number">43</span>:<span class="number">18.060</span> [main] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager - Connection released: [id: <span class="number">0</span>][route: &#123;&#125;-&gt;http:<span class="comment">//localhost:8080][total available: 0; route allocated: 0 of 100; total allocated: 0 of 100]</span></span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-19T23:<span class="number">43</span>:<span class="number">18.067</span>] request <span class="keyword">is</span> done!</span><br><span class="line">org.springframework.web.client.ResourceAccessException: I/O error on GET request <span class="keyword">for</span> <span class="string">&quot;http://localhost:8080/very-slow&quot;</span>: Read timed <span class="keyword">out</span>; nested exception <span class="keyword">is</span> java.net.SocketTimeoutException: Read timed <span class="keyword">out</span></span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">785</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:<span class="number">711</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:<span class="number">334</span>)</span><br><span class="line">at com.example.playground.VerySlowResponseRestTemplatePlaygroundKt.main(VerySlowResponseRestTemplatePlayground.kt:<span class="number">30</span>)</span><br><span class="line">at com.example.playground.VerySlowResponseRestTemplatePlaygroundKt.main(VerySlowResponseRestTemplatePlayground.kt)</span><br><span class="line">Caused <span class="keyword">by</span>: java.net.SocketTimeoutException: Read timed <span class="keyword">out</span></span><br><span class="line">at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">116</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">171</span>)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">141</span>)</span><br><span class="line">at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:<span class="number">84</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:<span class="number">137</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:<span class="number">153</span>)</span><br><span class="line">at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:<span class="number">280</span>)</span><br><span class="line">at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:<span class="number">138</span>)</span><br><span class="line">at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:<span class="number">56</span>)</span><br><span class="line">at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:<span class="number">259</span>)</span><br><span class="line">at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:<span class="number">163</span>)</span><br><span class="line">at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:<span class="number">157</span>)</span><br><span class="line">at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:<span class="number">273</span>)</span><br><span class="line">at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:<span class="number">125</span>)</span><br><span class="line">at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class="number">272</span>)</span><br><span class="line">at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line">at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class="number">89</span>)</span><br><span class="line">at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class="number">110</span>)</span><br><span class="line">at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line">at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line">at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">56</span>)</span><br><span class="line">at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:<span class="number">48</span>)</span><br><span class="line">at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:<span class="number">66</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">776</span>)</span><br><span class="line">... <span class="number">4</span> more</span><br><span class="line">[<span class="number">2022</span>-<span class="number">03</span>-19T23:<span class="number">43</span>:<span class="number">28.073</span>] main function <span class="keyword">is</span> done!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>23:43:15.053에 서버와 커넥션 맺음. (<code>23:43:15.053 [main] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator - Connection established 127.0.0.1:62960&lt;-&gt;127.0.0.1:8080</code>)</li><li>23:43:15.054에 요청 전송 (<code>23:43:15.054 [main] DEBUG org.apache.http.wire - http-outgoing-0 &gt;&gt; ...</code>)</li><li>23:43:18.058에 Read Timeout 발생 (정확히 우리가 설정한 3초 후에 발생함, <code>23:43:18.058 [main] DEBUG org.apache.http.wire - http-outgoing-0 &lt;&lt; &quot;[read] I/O error: Read timed out&quot;</code>)</li><li>23:43:18.059 ~ 23:43:18.060에 커넥션 종료 (Keep-Alive 설정했음에도 불구하고, 정상적인 응답을 받지 못했으면 커넥션을 종료함. <code>23:43:18.059 [main] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection - http-outgoing-0: Close connection</code>)</li><li>23:43:28.073에 메인함수 종료</li></ol><h3 id="서버-로그-2"><a href="#서버-로그-2" class="headerlink" title="서버 로그"></a>서버 로그</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">15.055</span>  INFO <span class="number">47262</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">4</span>] c.e.s.VerySlowResponseController         : request <span class="keyword">is</span> arrived!</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">44</span>:<span class="number">25.059</span>  INFO <span class="number">47262</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">4</span>] c.e.s.VerySlowResponseController         : very slow process <span class="keyword">is</span> done!</span><br><span class="line"><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">44</span>:<span class="number">25.062</span> ERROR <span class="number">47262</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">4</span>] c.e.playground.ControllerAdvice    : java.io.IOException: Broken pipe</span><br><span class="line"></span><br><span class="line">org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:<span class="number">310</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:<span class="number">273</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:<span class="number">118</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:<span class="number">297</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:<span class="number">141</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:<span class="number">229</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at org.springframework.util.StreamUtils.copy(StreamUtils.java:<span class="number">148</span>) ~[spring-core-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:<span class="number">126</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:<span class="number">44</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:<span class="number">227</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:<span class="number">293</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:<span class="number">183</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:<span class="number">78</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">135</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.<span class="keyword">annotation</span>.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">808</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1067</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">963</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>) [spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>) [spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">655</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">4.0</span>.FR]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>) [spring-webmvc-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">764</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">4.0</span>.FR]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">227</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>) [tomcat-embed-websocket-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>) [spring-web-<span class="number">5.3</span><span class="number">.16</span>.jar:<span class="number">5.3</span><span class="number">.16</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">197</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">97</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">540</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">135</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">78</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">359</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">399</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">889</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1735</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1191</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">659</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">750</span>) [na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">Caused <span class="keyword">by</span>: java.io.IOException: Broken pipe</span><br><span class="line">at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:<span class="number">47</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:<span class="number">93</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.IOUtil.write(IOUtil.java:<span class="number">65</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:<span class="number">470</span>) ~[na:<span class="number">1.8</span><span class="number">.0_322</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:<span class="number">135</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:<span class="number">1376</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:<span class="number">766</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:<span class="number">719</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:<span class="number">709</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.flush(Http11OutputBuffer.java:<span class="number">573</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.filters.IdentityOutputFilter.flush(IdentityOutputFilter.java:<span class="number">117</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:<span class="number">221</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:<span class="number">1255</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:<span class="number">402</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.coyote.Response.action(Response.java:<span class="number">209</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:<span class="number">306</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.58</span>.jar:<span class="number">9.0</span><span class="number">.58</span>]</span><br><span class="line">... <span class="number">56</span> common frames omitted</span><br></pre></td></tr></table></figure><ol><li>23:43:15.055에 요청 도착</li><li>23:44:25.059에 처리 완료 (70초 걸림)</li><li>23:44:25.062에 <code>ClientAbortException(java.io.IOException: Broken pipe)</code> 발생</li></ol><h3 id="패킷-로그-소켓-상태-2"><a href="#패킷-로그-소켓-상태-2" class="headerlink" title="패킷 로그 (소켓 상태)"></a>패킷 로그 (소켓 상태)</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">97</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053056</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">62960</span> → <span class="number">8080</span> [SYN] Seq=<span class="number">0</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">2309492195</span> TSecr=<span class="number">0</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">98</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053210</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">68</span><span class="number">8080</span> → <span class="number">62960</span> [SYN, ACK] Seq=<span class="number">0</span> Ack=<span class="number">1</span> Win=<span class="number">65535</span> Len=<span class="number">0</span> MSS=<span class="number">16344</span> WS=<span class="number">64</span> TSval=<span class="number">234888919</span> TSecr=<span class="number">2309492195</span> SACK_PERM=<span class="number">1</span></span><br><span class="line"><span class="number">99</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053225</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">62960</span> → <span class="number">8080</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">2309492195</span> TSecr=<span class="number">234888919</span></span><br><span class="line"><span class="number">100</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">15.053235</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span>[TCP Window Update] <span class="number">8080</span> → <span class="number">62960</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">234888919</span> TSecr=<span class="number">2309492195</span></span><br><span class="line"><span class="number">101</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">15.055087</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>HTTP<span class="number">278</span>GET /very-slow HTTP/<span class="number">1.1</span> </span><br><span class="line"><span class="number">102</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">15.055106</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">62960</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">223</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">234888922</span> TSecr=<span class="number">2309492198</span></span><br><span class="line"><span class="number">103</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">18.060226</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">62960</span> → <span class="number">8080</span> [FIN, ACK] Seq=<span class="number">223</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span> TSval=<span class="number">2309495203</span> TSecr=<span class="number">234888922</span></span><br><span class="line"><span class="number">104</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">43</span>:<span class="number">18.060286</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">56</span><span class="number">8080</span> → <span class="number">62960</span> [ACK] Seq=<span class="number">1</span> Ack=<span class="number">224</span> Win=<span class="number">408064</span> Len=<span class="number">0</span> TSval=<span class="number">234891927</span> TSecr=<span class="number">2309495203</span></span><br><span class="line"><span class="number">119</span><span class="number">2022</span>-<span class="number">03</span>-<span class="number">19</span> <span class="number">23</span>:<span class="number">44</span>:<span class="number">18.060374</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>TCP<span class="number">44</span><span class="number">62960</span> → <span class="number">8080</span> [RST, ACK] Seq=<span class="number">224</span> Ack=<span class="number">1</span> Win=<span class="number">408256</span> Len=<span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>97 ~ 99번 패킷은 TCP 3 Way Handshake (syn, syn&#x2F;ack, ack)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/tcp-3-way-handshake.png" class=""><img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-3-way-handshake-socket-status.png" class=""></li><li>101번 패킷에서 클라이언트 → 서버로 HTTP 요청 패킷 전송 (23:43:15.055087)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-send-http-request-packet.png" class=""></li><li>102번 패킷에서 서버가 요청 잘 받았다고 클라이언트한테 ACK 패킷 전송 (23:43:15.055106)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-send-http-request-ack-packet.png" class=""></li><li>103번 패킷에서 클라이언트는 커넥션을 종료한다고 FIN&#x2F;ACK 패킷을 서버에게 전송 (23:43:18.060226, 정확히 HTTP 패킷 보내고 3초 후(read timeout)임.)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-send-fin-packet.png" class=""></li><li>104번 패킷에서 서버가 클라이언트로부터 FIN&#x2F;ACK 패킷을 잘 받았다고 반대로 ACK 패킷을 클라이언트에게 보냄 (23:43:18.060286)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-send-ack-packet.png" class=""></li><li>클라이언트가 먼저 연결을 종료하겠다는 FIN 패킷을 보냈기 때문에 클라이언트가 Active Close<br>서버는 클라이언트로부터 FIN 패킷을 받았기 때문에 서버는 Passive Close가 됨<br>(무조건 클라이언트가 Active Close는 아니고 경우에 따라서 다름)<br>그리고 아직까지는 서버(Passive Close)로부터 FIN 패킷을 받은 게 아니기 때문에 소켓이 정상적으로 종료된 게 아님.<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/tcp-termination.png" class=""></li><li>서버 측 소켓의 상태는 CLOSE_WAIT(클라이언트가 보낸 FIN 패킷을 받았으므로)이고, 클라이언트 측 소켓의 상태는 FIN_WAIT_2(서버가 보낸 ACK 패킷을 받았으므로)이다. (23:43:18)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-fin-ack-socket-status-01.png" class=""></li><li>서버는 클라이언트로부터 FIN 패킷을 받았지만 아직 보낼 패킷이 남아있기 때문인지 클라이언트에게 FIN 패킷을 보내지 않음.<br>그리고 Active Close(클라이언트) 측에서는 오동작을 막기 위해 바로 소켓의 연결을 끊는 게 아니라 60초(OS마다 다르지만 tcp_fin_timeout(대다수의 리눅스는 60로초 설정됨)) 동안 대기하게 됨. (23:44:17)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-fin-ack-socket-status-02.png" class=""></li><li>119번 패킷에서 이제 기다릴만큼 다 기다렸는데도 서버 측에서 FIN 패킷이 오지 않기 때문에 클라이언트 → 서버로 RST, ACK 패킷을 날림. (23:44:18.060374, 정확하게 서버로 ACK 패킷 받은 이후부터 60초간 대기한 후 전송)<img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-send-rst-packet.png" class=""></li><li>RST 패킷을 전송한 이후에 클라이언트&#x2F;서버 측 소켓이 정상적으로 종료됨 (23:44:18)   <img src="/2022/03/20/client-abort-exception-deep-dive-part-01/read-timout-over-60s-send-rst-packet-socket-status.png" class=""></li></ol><h1 id="ClientAbortException을-해결하려면"><a href="#ClientAbortException을-해결하려면" class="headerlink" title="ClientAbortException을 해결하려면?"></a>ClientAbortException을 해결하려면?</h1><ol><li>서버 측에서 처리 속도를 더 빠르게 한다.</li><li>처리 속도는 빠르지만 응답이 크다면 응답의 사이즈를 줄인 API를 제공한다 (불필요한 필드 제거 or 페이징 API 제공)</li><li>클라이언트 측 리드 타임아웃 설정값을 늘린다.</li><li>정 합의가 안 된다면 ClientAbortException을 핸들링 해서 log.info로만 남긴다. (장애 상황은 아니라서 불필요한 노이즈라고 판단된다는 가정 하에)</li><li>클라이언트 측에서는 ReadTimeout이 발생했다면(ClientAbortException 여부와 상관 없이), 장애 상황(고객에게 돈은 출금이 됐는데 주문은 완료처리 안 됐다던지)을 막기 위해 서버 측에 취소 API 같은 걸 호출하거나 상태 조회 API 같은 걸 호출한 이후 내가 처리를 따로 해야하는 건지 아닌지 판단한 후에 올바른 처리를 해줘야한다.</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;서버에서 아주 가끔가다가 ClientAbortException(java.io.IOExceiption: Broken pipe)이 발생해서 어떨 때 발생하는지 딥다이브 해봄.&lt;/p&gt;
&lt;img src=&quot;/2022/03/20/client-abort-exception-deep-dive-part-01/stacktrace.png&quot; class&gt;

&lt;p&gt;적다보니 글이 길어져 글을 나누었는데 해당 글을 읽고 난 후에 &lt;a href=&quot;/2022/03/20/client-abort-exception-deep-dive-part-02&quot;&gt;(Tomcat) ClientAbortException은 왜 발생할까? (Part 2)&lt;/a&gt;를 마저 보는 것을 추천함.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html&quot;&gt;https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/connector/ClientAbortException.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="tomcat" scheme="https://perfectacle.github.io/categories/tomcat/"/>
    
    
    <category term="Spring Boot" scheme="https://perfectacle.github.io/tags/Spring-Boot/"/>
    
    <category term="Tomcat" scheme="https://perfectacle.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>(Gradle) 테스트 의존성 관리하기 (feat. java-test-fixtures 플러그인)</title>
    <link href="https://perfectacle.github.io/2022/03/13/gradle-java-test-fixtures-plugin/"/>
    <id>https://perfectacle.github.io/2022/03/13/gradle-java-test-fixtures-plugin/</id>
    <published>2022-03-13T00:02:03.000Z</published>
    <updated>2022-06-06T08:23:56.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p><a href="/2022/03/12/gradle-implementation-vs-api/">(Gradle) implementation vs api</a>에서는 compile&#x2F;runtime 의존성을 관리하는 방법에 대해 정리했다.<br>하지만 이는 실제 src&#x2F;main 경로에 대해서만 의존성을 관리하는 것이지 src&#x2F;test 경로에서 사용하는 테스트 의존성(testCompileClasspath, testRuntimeClasspath)에 대해서는 딥하게 다루지 않았다.<br>테스트도 관리해야할 대상이고 하나의 소프트웨어라는 관점에서 테스트의 의존성 조차도 신경을 써줘야한다.</p><h2 id="testImplementation"><a href="#testImplementation" class="headerlink" title="testImplementation"></a>testImplementation</h2><img src="/2022/03/13/gradle-java-test-fixtures-plugin/api-structure.png" class=""><img src="/2022/03/13/gradle-java-test-fixtures-plugin/implementation-structure.png" class=""><p>기본적으로 <a href="/2022/03/12/gradle-implementation-vs-api/#implementation">implementation</a>과 <a href="/2022/03/12/gradle-implementation-vs-api/#api">api</a>로 의존성을 추가한 경우에도 testCompileClasspath, testRuntimeClasspath에 추가돼서 테스트에서도 사용이 가능하다.<br>하지만 compileClasspath, runtimeClasspath에도 추가되다보니 실제 프로덕션에서는 사용할 필요가 없고, 테스트에서만 사용할 목적으로 testImplementation을 많이 사용한다.</p><p><a href="https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations">testImplementation</a>으로 의존성을 관리하기 위해서는 <a href="https://docs.gradle.org/current/userguide/java_plugin.html">java 플러그인</a>을 활성화해야한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>멀티 모듈인 경우 아래와 같이 활성화 시켜줘야한다. (java는 gradle core 플러그인이기 때문에 plugins 모듈에 별도로 정의 안 하고도 서브 모듈들에게 적용이 가능하다.)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle.kts에서는 kotlin jvm 플러그인만 활성화 시켜주면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;<span class="variable">$kotlinVersion</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>멀티 모듈인 경우 아래와 같이 활성화 시켜줘야한다. (kotlin jvm 플러그인은 gradle core 플러그인이 아니기 때문에 plugins 모듈에 별도로 정의 해놔야 서브 모듈들에게 적용이 가능하다.)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;<span class="variable">$kotlinVersion</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;</span><br><span class="line">    apply(plugin = <span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 의존성 추가를 위해 build.gradle(or build.gradle.kts)에 아래와 같이 디펜던시들을 추가하게 된다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter:5.8.2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-implementation-single-module.png" class=""><p>실제로 gradle dependency를 보게되면 compileClasspath와 runtimeClasspath에는 추가되지 않고, testCompileClasspath와 testRuntimeClasspath에만 추가된 걸 볼 수 있다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-implementaion-can-use-in-test.png" class=""><p>testCompileClasspath에 추가됐기 때문에 src&#x2F;test에서 junit 5를 사용할 수 있다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-implementaion-can-not-use-in-test.png" class=""><p>compileClasspath에 추가되지 않았기 때문에 src&#x2F;main에서는 junit 5를 사용할 수 없다.</p><h2 id="테스트-경로에-있는-클래스들을-외부로-노출시키기"><a href="#테스트-경로에-있는-클래스들을-외부로-노출시키기" class="headerlink" title="테스트 경로에 있는 클래스들을 외부로 노출시키기"></a>테스트 경로에 있는 클래스들을 외부로 노출시키기</h2><p>단일 모듈의 경우에는 testImplementation, testCompileOnly, testRuntimeOnly 정도로 테스트 전용으로 의존성을 관리할 수 있다.<br>하지만 멀티 모듈의 경우에는 조금 복잡해진다.</p><ul><li>라이브러리: jakcson-core, spring-tx, 우리 프로젝트 내에서 만드는 모듈들 등등</li><li>컨슈머: 프로젝트 내에서 라이브러리를 사용하는 모듈, 우리 프로젝트에서 위 라이브러리들을 사용하는 모듈 등등</li></ul><p>프로젝트에 두 가지 모듈(producer와 consumer)을 만들어서 차이점을 확인해보자.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/producer-consumer-structur.png" class=""><p>producer는 모듈을 제공하는 측이고, consumer는 모듈을 소비하는 측이다.<br>따라서 consumer 모듈의 build.gradle(또는 build.gradle.kts)를 보면 producer 모듈에 의존하는 모습을 볼 수 있다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(project(<span class="string">&quot;:producer&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 때 producer 모듈에 기본 생성자는 없고, 생성자에 인자가 많아서 생성하기 번거로운 클래스가 있다고 가정해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String hobby;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String zipCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Some</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="type">int</span> age, <span class="keyword">final</span> String hobby, <span class="keyword">final</span> String address, <span class="keyword">final</span> String zipCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.zipCode = zipCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트에서 생성자에 모든 인자를 넣어서 매번 생성하기 번거로우므로 아래와 같은 빌더를 src&#x2F;test 하위 경로에 만들자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SomeBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> String zipCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SomeBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SomeBuilder <span class="title function_">aSome</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SomeBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SomeBuilder <span class="title function_">withName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SomeBuilder <span class="title function_">withAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SomeBuilder <span class="title function_">withHobby</span><span class="params">(String hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SomeBuilder <span class="title function_">withAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SomeBuilder <span class="title function_">withZipCode</span><span class="params">(String zipCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.zipCode = zipCode;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Some <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Some</span>(name, age, hobby, address, zipCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 내가 원하는 인자들만 설정하고 나머지는 빌더에 설정된 기본값을 사용하여 테스트에서 쉽게 해당 객체를 찍어낼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Some</span> <span class="variable">givenSome</span> <span class="operator">=</span> SomeBuilder.aSome().withName(<span class="string">&quot;name&quot;</span>).build();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>producer 모듈에서 테스트 작성 시에 이렇게 SomeBuilder를 통해 원하는 객체를 원하는 모양으로 쉽게 찍어낼 수 있었는데 consumer 모듈에서는 어떨까??</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-class-file-does-not-expose.png" class=""><p>consumer 모듈에서는 producer 모듈의 src&#x2F;main에 있는 Some 클래스에는 접근이 가능한데 src&#x2F;test에 있는 SomeBuilder 클래스에는 접근이 안 된다.  </p><p>왜 그런 걸까??<br>우선 프로젝트를 빌드해보자.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br><span class="line"></span><br><span class="line">1:03:15 AM: Executing &#x27;build&#x27;...</span><br><span class="line"></span><br><span class="line">&gt; Task :producer:compileJava</span><br><span class="line">&gt; Task :producer:processResources NO-SOURCE</span><br><span class="line">&gt; Task :producer:classes</span><br><span class="line">&gt; Task :producer:jar</span><br><span class="line">&gt; Task :consumer:compileJava NO-SOURCE</span><br><span class="line">&gt; Task :consumer:processResources NO-SOURCE</span><br><span class="line">&gt; Task :consumer:classes UP-TO-DATE</span><br><span class="line">&gt; Task :consumer:jar</span><br><span class="line">&gt; Task :consumer:assemble</span><br><span class="line">&gt; Task :consumer:compileTestJava</span><br><span class="line">&gt; Task :consumer:processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :consumer:testClasses</span><br><span class="line">&gt; Task :consumer:test</span><br><span class="line">&gt; Task :consumer:check</span><br><span class="line">&gt; Task :consumer:build</span><br><span class="line">&gt; Task :producer:assemble</span><br><span class="line">&gt; Task :producer:compileTestJava</span><br><span class="line">&gt; Task :producer:processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :producer:testClasses</span><br><span class="line">&gt; Task :producer:test</span><br><span class="line">&gt; Task :producer:check</span><br><span class="line">&gt; Task :producer:build</span><br></pre></td></tr></table></figure><img src="/2022/03/13/gradle-java-test-fixtures-plugin/jar-contains-only-src-main-class.png" class=""><p>그리고 나서 producer 모듈의 빌드된 jar를 까보면 src&#x2F;main에 있는 Some 클래스만 존재하는 걸 볼 수 있다.<br>애초에 jar 파일에 SomeBuilder가 존재하지 않기 때문에 consumer 모듈에서는 접근조차 불가능한 것이다.</p><p>그럼 문제를 어떻게 해결해야할까?<br>가장 간단한 방법은 consumer 모듈의 src&#x2F;test에도 똑같이 SomeBuilder 파일을 복붙하는 방법이다.<br>하지만 IDE의 리팩토링 기능으로 관리가 되지 않기 때문에 동일한 파일을 두 번 관리해야한다는 매우 비효율을 낳게 된다.</p><h3 id="구세주-java-test-fixtures-플러그인"><a href="#구세주-java-test-fixtures-플러그인" class="headerlink" title="구세주 java-test-fixtures 플러그인"></a>구세주 java-test-fixtures 플러그인</h3><p>src&#x2F;main에 있는 파일만 jar로 뽑듯이 src&#x2F;test에 있는 파일들도 jar로 뽑아내기 위해 gradle에는 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures">java-test-fixtures</a>라는 플러그인이 존재한다. </p><p>먼저 src&#x2F;test 하위 경로에 있는 파일들을 노출시키고 싶은 producer 모듈의 build.gradle 파일에 java-test-fixtures 플러그인을 추가해주자.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java-test-fixtures&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle.kts 같은 경우에는 아래와 같이 추가하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    `java-test-fixtures`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/13/gradle-java-test-fixtures-plugin/java-test-fixtures-directory.png" class=""><p>플러그인을 추가한 후 producer 모듈에 새로운 경로를 추가하려고 하면 인텔리제이와 같은 IDE에서 testFixtures 경로를 자동으로 추천해주게 된다.</p><p>그리고 testFixtures 하위에 있는 파일들은 아래와 같은 특징을 가진다.</p><ul><li>they can see the main source set classes (src&#x2F;testFixtures에 존재하는 클래스에서 src&#x2F;main에 존재하는 클래스에 접근 가능)</li><li>test sources can see the test fixtures classes (src&#x2F;test에 존재하는 테스트 클래스에서 src&#x2F;testFixtures 클래스에 접근 가능)</li></ul><img src="/2022/03/13/gradle-java-test-fixtures-plugin/before-test-fixtures-classpath.png" class=""><p>java-test-fixtures 플러그인을 추가하기 전에는 testCompileClasspath와 testRuntimeClasspath만 존재하고, junit 5만 의존성으로 가지고 있는 모습이다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/after-test-fixtures-classpath.png" class=""><p>java-test-fixtures 플러그인을 추가하고 보면 testFixturesCompileClasspath와 testFixturesRuntimeClasspath가 추가된 모습을 볼 수 있다.<br>testCompileClasspath와 testRuntimeClasspath에 포함된 producer 모듈들은 아마 producer&#x2F;src&#x2F;main, producer&#x2F;src&#x2F;testFixtures 모듈이 아닐까 싶다.<br>그리고 testFixturesCompileClasspath와 testFixturesRuntimeClasspath에 포함된 producer 모듈은 producer&#x2F;src&#x2F;main 모듈이 아닐까 싶다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/builder-move-to-test-fixtures.png" class=""><p>그렇기에 SomeBuilder를 src&#x2F;test에서 src&#x2F;testFixutres로 옮겨도 아무런 문제가 없다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-fixtures-can-not-see-test.png" class=""><p>testFixtures에서는 main에 있는 Some에는 접근이 가능하지만 test에 있는 SomeTest2에는 접근이 불가능하다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-can-see-both-main-and-test-fixtures.png" class=""><p>test에서는 main에 있는 Some과 testFixtures에 있는 SomeBuilder에 모두 접근이 가능하다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/main-can-not-see-both-test-and-test-fixtures.png" class=""><p>main에서는 당연하게도 test에 있는 SomeTest와 testFixtures에 있는 SomeBuilder에 모두 접근이 불가능하다.</p><p>이 상태에서 다시 빌드를 때려보자</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br><span class="line"></span><br><span class="line">1:22:00 AM: Executing &#x27;build&#x27;...</span><br><span class="line"></span><br><span class="line">&gt; Task :producer:compileJava</span><br><span class="line">&gt; Task :producer:processResources NO-SOURCE</span><br><span class="line">&gt; Task :producer:classes</span><br><span class="line">&gt; Task :producer:jar</span><br><span class="line">&gt; Task :consumer:compileJava NO-SOURCE</span><br><span class="line">&gt; Task :consumer:processResources NO-SOURCE</span><br><span class="line">&gt; Task :consumer:classes UP-TO-DATE</span><br><span class="line">&gt; Task :consumer:jar</span><br><span class="line">&gt; Task :consumer:assemble</span><br><span class="line">&gt; Task :consumer:compileTestJava</span><br><span class="line">&gt; Task :consumer:processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :consumer:testClasses</span><br><span class="line">&gt; Task :consumer:test</span><br><span class="line">&gt; Task :consumer:check</span><br><span class="line">&gt; Task :consumer:build</span><br><span class="line">&gt; Task :producer:assemble</span><br><span class="line">&gt; Task :producer:compileTestFixturesJava</span><br><span class="line">&gt; Task :producer:compileTestJava</span><br><span class="line">&gt; Task :producer:processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :producer:testClasses</span><br><span class="line">&gt; Task :producer:processTestFixturesResources NO-SOURCE</span><br><span class="line">&gt; Task :producer:testFixturesClasses</span><br><span class="line">&gt; Task :producer:testFixturesJar</span><br><span class="line">&gt; Task :producer:test</span><br><span class="line">&gt; Task :producer:check</span><br><span class="line">&gt; Task :producer:build</span><br></pre></td></tr></table></figure><p>기존에는 보지 못했던 testFixtures 관련 태스크들이 수행된 것을 볼 수 있다.</p><ul><li>:producer:compileTestFixturesJava</li><li>:producer:processTestFixturesResources</li><li>:producer:testFixturesClasses</li><li>:producer:testFixturesJar</li></ul><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-fixtures-jar.png" class=""><p>그리고 빌드된 jar를 보면 *-test-fixtures.jar 파일이 추가됐고, 해당 jar를 까보면 testFixtures 하위에 존재하던 SomeBuilder가 존재한다.<br>이렇듯 java-test-fixtures 플러그인은 src&#x2F;test 하위에 존재하는 불필요한 테스트 클래스는 jar에 포함시키지 않고 내가 원하는 클래스들만 jar에 추가시켜준다.</p><p>하지만 이렇게 test-fixtures.jar로 빌드했다고 해서 바로 consumer 모듈에서 사용할 수 있는 건 아니다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/before-test-implementation-test-fixtures.png" class=""><p>consumer 모듈의 의존성을 보면 testCompileClasspath와 testRuntimeClasspath에 producer 모듈이 존재하긴 하는데 이건 일반 jar(src&#x2F;main을 빌드한)만 의존성으로 가지고 있다는 뜻이다.</p><p>아래와 같이 test-fixtures.jar(src&#x2F;testFixtures를 빌드한)도 의존성으로 추가해줘야한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testImplementation(testFixtures(project(<span class="string">&quot;:producer&quot;</span>)))</span><br></pre></td></tr></table></figure><img src="/2022/03/13/gradle-java-test-fixtures-plugin/after-test-implementation-test-fixtures.png" class=""><p>testImplementation으로 추가했기 때문에 compileClasspath와 runtimeClasspath에는 전혀 차이가 존재하지 않고, testCompileClasspath와 testRuntimeClasspath에만 producer 모듈(test-fixtures.jar)이 의존성에 추가된 걸 볼 수 있다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/consumer-test-can-see-both-producer-main-and-test-fixtures.png" class=""><p>이렇게 consumer 모듈의 테스트 클래스에서도 producer 모듈의 src&#x2F;testFixtures에 존재하는 SomeBuilder와 producer 모듈의 src&#x2F;main에 존재하는 Some 클래스에 모두 접근이 가능한 것을 볼 수 있다.<br>그리고 jar에 포함되지 않는 producer 모듈의 src&#x2F;test에 존재하는 SomeTest 클래스에는 접근이 불가능하다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/consumer-main-can-not-see-producer-test-fixtures.png" class=""><p>당연히 consumer 모둘의 src&#x2F;main에 존재하는 클래스에서는 producer 모듈의 src&#x2F;testFixtures에 존재하는 SomeBuilder에는 접근이 불가능하다.<br>대신 producer 모듈의 src&#x2F;main에 존재하는 Some 클래스에는 접근이 가능하다.</p><h2 id="테스트-의존성을-외부로-노출시키기"><a href="#테스트-의존성을-외부로-노출시키기" class="headerlink" title="테스트 의존성을 외부로 노출시키기"></a>테스트 의존성을 외부로 노출시키기</h2><p>만약 producer 모듈에서 인메모리 db로 테스트 할 일이 있어서 h2 db를 testRuntimeOnly로 추가했다고 가정해보자.<br>(h2 db의 클래스는 우리 테스트 클래스에서 직접 사용하기 보다는 Spring Boot Auto Configuration 등등에서 런타임에 사용하기 때문에 testCompileClasspath에는 추가될 필요가 딱히 없다.)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testRuntimeOnly(<span class="string">&quot;com.h2database:h2:2.1.210&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-runtime-only-h2.png" class=""><p>testRuntimeOnly로 추가했기 때문에 testRuntimeClasspath를 제외한 다른 클래스패스에는 h2가 추가되지 않았다.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-runtime-only-can-not-see-in-test.png" class=""><p>testCompileClasspath에 존재하지 않기 때문에 테스트 클래스에서 H2 관련 클래스를 사용해서 컴파일 하면 컴파일 타임에 오류가 난다. (왜 IDE에서는 빨간 줄이 생기지 않는지 의문이다. 일시적 버그인가…)</p><p>그리고 consumer 모듈에서도 h2를 사용하여 테스트를 진행한다고 가정해보자.</p><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-runtime-only-can-not-see-in-consumer.png" class=""><p>하지만 단순히 producer 모듈에 testRuntimeOnly로 h2를 추가했다 하더라도 consumer 모듈의 testRuntimeClasspath에는 노출되지 않는다.<br>producer 모듈은 (testFixtures)compile&#x2F;runtimeClasspath를 기준으로 jar 파일을 생성하고 consumer 모듈에서 해당 jar 파일에 의존하게 되는데 h2는 해당 클래스패스에는 존재하지 않고, testRuntimeClasspath에만 존재하기 때문이다.</p><p>따라서 producer 모듈의 testFixturesCompileClasspath&#x2F;testFixturesRuntimeClasspath에 추가해야 test-fixtures.jar에 의존성이 추가되고</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testFixturesRuntimeOnly(<span class="string">&quot;com.h2database:h2:2.1.210&quot;</span>)</span><br></pre></td></tr></table></figure><p>consumer 모듈에서도 test-fixtures.jar를 의존성으로 추가해줘야</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testImplementation(testFixtures(project(<span class="string">&quot;:producer&quot;</span>)))</span><br></pre></td></tr></table></figure><img src="/2022/03/13/gradle-java-test-fixtures-plugin/test-fixtures-runtime-only-can-see-in-consumer-test.png" class=""><p>consumer 모듈의 testRuntimeClasspath에도 h2가 의존성으로 추가된 모습을 볼 수 있다.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;들어가기에-앞서&quot;&gt;&lt;a href=&quot;#들어가기에-앞서&quot; class=&quot;headerlink&quot; title=&quot;들어가기에 앞서&quot;&gt;&lt;/a&gt;들어가기에 앞서&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/2022/03/12/gradle-implementation-vs-api/&quot;&gt;(Gradle) implementation vs api&lt;/a&gt;에서는 compile&amp;#x2F;runtime 의존성을 관리하는 방법에 대해 정리했다.&lt;br&gt;하지만 이는 실제 src&amp;#x2F;main 경로에 대해서만 의존성을 관리하는 것이지 src&amp;#x2F;test 경로에서 사용하는 테스트 의존성(testCompileClasspath, testRuntimeClasspath)에 대해서는 딥하게 다루지 않았다.&lt;br&gt;테스트도 관리해야할 대상이고 하나의 소프트웨어라는 관점에서 테스트의 의존성 조차도 신경을 써줘야한다.&lt;/p&gt;
&lt;h2 id=&quot;testImplementation&quot;&gt;&lt;a href=&quot;#testImplementation&quot; class=&quot;headerlink&quot; title=&quot;testImplementation&quot;&gt;&lt;/a&gt;testImplementation&lt;/h2&gt;&lt;img src=&quot;/2022/03/13/gradle-java-test-fixtures-plugin/api-structure.png&quot; class&gt;
&lt;img src=&quot;/2022/03/13/gradle-java-test-fixtures-plugin/implementation-structure.png&quot; class&gt;</summary>
    
    
    
    <category term="gradle" scheme="https://perfectacle.github.io/categories/gradle/"/>
    
    
    <category term="gradle" scheme="https://perfectacle.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>(Gradle) implementation vs api</title>
    <link href="https://perfectacle.github.io/2022/03/12/gradle-implementation-vs-api/"/>
    <id>https://perfectacle.github.io/2022/03/12/gradle-implementation-vs-api/</id>
    <published>2022-03-12T19:43:25.000Z</published>
    <updated>2022-06-06T08:23:56.256Z</updated>
    
    <content type="html"><![CDATA[<p>3줄 요약</p><ol><li><a href="#implementation">implementation</a>을 사용하자</li><li>implementation을 사용하더라도 라이브러리를 사용하는 <a href="#%EA%B7%B8%EB%9F%BC-implementation%EB%A7%8C-%EC%93%B0%EB%A9%B4-%EB%A7%8C%EC%82%AC-OK%EC%9D%BC%EA%B9%8C">consumer 측의 runtimeClassPath에 추가되기 때문에 런타임 의존성 충돌</a>이 발생할 수 있으니 의존성은 최대한 적게 추가하자.</li><li><a href="#api">api</a>가 필요한 건지 100번 고민하고 설계가 잘못된 건 아닌지 의심해 본 후 api를 사용한다. (api는 consumer의 compile&#x2F;runtimeClassPath에 모두 추가된다.)</li></ol><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>의존성(라이브러리&#x2F;프레임워크)을 추가하기 위해 build.gradle(or build.gradle.kts)에 아래와 같이 디펜던시들을 추가하게 된다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    api(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>참고로 compile은 depreacate 됐기 때문에 사용하면 안 되고 implementation을 쓰라고 나와있다. (compile은 api와 마찬가지로 consumer의 (test)compile&#x2F;runtimeClassPath에 모두 추가되니 사용하지 않는 게 좋다.)</p><blockquote><p>The compile configuration has been deprecated for dependency declaration.<br>This will fail with an error in Gradle 7.0. Please use the implementation configuration instead.<br>Consult the upgrading guide for further information: <a href="https://docs.gradle.org/6.9/userguide/upgrading_version_5.html#dependencies_should_no_longer_be_declared_using_the_compile_and_runtime_configurations">https://docs.gradle.org/6.9/userguide/upgrading_version_5.html#dependencies_should_no_longer_be_declared_using_the_compile_and_runtime_configurations</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated(message = <span class="string">&quot;The compile configuration has been deprecated for dependency declaration. Please use the &#x27;implementation&#x27; configuration instead.&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> DependencyHandler.`compile`<span class="params">(dependencyNotation: <span class="type">Any</span>)</span></span>: Dependency? =</span><br><span class="line">    add(<span class="string">&quot;compile&quot;</span>, dependencyNotation)</span><br></pre></td></tr></table></figure><p>그럼 implementation은 뭐고 api는 뭘까??</p><h2 id="implementation"><a href="#implementation" class="headerlink" title="implementation"></a>implementation</h2><p><a href="https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations">implementation</a>으로 의존성을 관리하기 위해서는 <a href="https://docs.gradle.org/current/userguide/java_plugin.html">java 플러그인</a>을 활성화해야한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>멀티 모듈인 경우 아래와 같이 활성화 시켜줘야한다. (java는 gradle core 플러그인이기 때문에 plugins 모듈에 별도로 정의 안 하고도 서브 모듈들에게 적용이 가능하다.)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle.kts에서는 kotlin jvm 플러그인만 활성화 시켜주면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;<span class="variable">$kotlinVersion</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>멀티 모듈인 경우 아래와 같이 활성화 시켜줘야한다. (kotlin jvm 플러그인은 gradle core 플러그인이 아니기 때문에 plugins 모듈에 별도로 정의 해놔야 서브 모듈들에게 적용이 가능하다.)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;<span class="variable">$kotlinVersion</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;</span><br><span class="line">    apply(plugin = <span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/12/gradle-implementation-vs-api/implementation-structure.png" class=""><p>출처: <a href="https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations">https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations</a></p><p>기본적으로 implementation으로 의존성을 추가한다는 사실은 아래 클래스패스에 추가한다는 사실이다.</p><ul><li>compileClassPath: main 경로에서 해당 모듈을 컴파일할 때 사용함, 우리가 spring-tx 모듈의 @Transactional 어노테이션을 사용하는데 컴파일 클래스패스에 존재하지 않는다면 컴파일에 실패함. (대표적으로 lombok이 어노테이션 프로세서에 의해 소스코드에 있는 어노테이션을 해석하여 실제로 소스코드로 컴파일 할 때는 전부 사라지기 때문에 compileClassPath에만 존재하면 되고, runtimeClassPath에는 필요없는 경우이다. 그래서 <a href="https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.22">lombok을 compileOnly로 추가</a>하는 게 좋다.)</li><li>runtimeClassPath: main 경로에서 해당 모듈을 런타임에서 사용함, 우리가 컴파일한 소스코드를 실행할 때(런타임) spring-tx 모듈의 @Transactional 어노테이션을 사용하는데 런타임 클래스패스에 존재하지 않는다면 @Transactional을 사용하는 코드로 진입 시에 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/NoClassDefFoundError.html">NoClassDefFoundError</a>나 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ClassNotFoundException.html">ClassNotFoundException</a>과 같은 에러&#x2F;예외가 발생하며 서버가 제대로 뜨지 않거나 서버는 떴는데 특정 API만 호출하면 장애가 발생할 수도 있다. (대표적으로 mysql-connector-java 같은 경우가 우리가 소스코드에서 직접적으로 사용하지는 않기 때문에 compileClassPath에서는 필요 없는데 런타임에 jdbc 드라이버라던지 HikariCP 등등에서 사용할 것이기 때문에 runtimeClassPath에만 존재하면 되고, compileClassPath에는 필요없는 경우이다. 그래서 mysql-connector-java를 runtimeOnly로 추가하는 게 좋다.)</li><li>testCompileClassPath: test 경로에서 해당 모듈을 컴파일할 때 사용함, 우리가 spring-boot-test 모듈의 @SpringBootTest 어노테이션을 사용하는데 컴파일 클래스패스에 존재하지 않는다면 컴파일에 실패함. (대표적으로 junit 같은 경우가 실제 어플리케이션을 구동하는데는 필요하지 않고, 테스트를 수행하는데 필요하기 때문에 testImplementation으로 추가하는 게 좋다.)</li><li>testRuntimeClassPath: test 경로에서 해당 모듈을 런타임에서 사용함, 우리가 컴파일한 소스코드를 실행할 때(런타임) spring-boot-test 모듈의 @SpringBootTest 어노테이션을 사용하는데 런타임 클래스패스에 존재하지 않는다면 @SpringBootTest을 사용하는 코드로 진입 시에 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/NoClassDefFoundError.html">NoClassDefFoundError</a>나 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ClassNotFoundException.html">ClassNotFoundException</a>과 같은 에러&#x2F;예외가 발생하며 테스트가 실패하게 됨. (대표적으로 h2 db 같이 테스트에서 사용할 목적으로 쓰이는 인메모리 db의 경우 우리가 소스코드에서 직접 사용하는 게 아니라 Spring Boot의 특정 Auto Configuration에서 사용하기 때문에 컴파일 할 때는 필요 없어서 testCompileClassPath에는 존재할 필요가 없고, 런타임에서만 사용하기 때문에 testRuntimeClassPath에는 존재해야하는 경우이다. 그래서 h2는 testRuntimeOnly로 추가하는 게 좋다.)</li></ul><img src="/2022/03/12/gradle-implementation-vs-api/implementation-single-module.png" class=""><p>실제로 implementation으로 jackson-core 모듈을 추가하고 보면 4가지 클래스패스에 모두 추가된 걸 볼 수 있다.</p><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p>api로 의존성을 관리하기 위해서는 <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html">java-library</a> 플러그인을 사용해야한다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>멀티 모듈인 경우 아래와 같이 활성화 시켜줘야한다. (java-library는 gradle core 플러그인이기 때문에 plugins 모듈에 별도로 정의 안 하고도 서브 모듈들에게 적용이 가능하다.)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle.kts에서는 똑같이 kotlin jvm 플러그인만 활성화 시켜주면 된다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;$kotlinVersion&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>멀티 모듈인 경우 아래와 같이 활성화 시켜줘야한다. (kotlin jvm 플러그인은 gradle core 플러그인이 아니기 때문에 plugins 모듈에 별도로 정의 해놔야 서브 모듈들에게 적용이 가능하다.)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;<span class="variable">$kotlinVersion</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;</span><br><span class="line">    apply(plugin = <span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/12/gradle-implementation-vs-api/api-structure.png" class=""><p>출처: <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph">https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph</a></p><p>이미지를 보면 implementation과 마찬가지로 api도 compileClassPath, runtimeClassPath, testCompileClassPath, testRuntimeClassPath에 추가된다고 나와있다.</p><img src="/2022/03/12/gradle-implementation-vs-api/api-single-module.png" class=""><p>실제로 api로 jackson-core 모듈을 추가하고 보면 4가지 클래스패스에 모두 추가된 걸 볼 수 있다.</p><h2 id="implementation-vs-api"><a href="#implementation-vs-api" class="headerlink" title="implementation vs api"></a>implementation vs api</h2><p>여태까지 봤을 때는 둘 다 compileClassPath, runtimeClassPath, testCompileClassPath, testRuntimeClassPath에 추가된다는 걸 봐서 큰 차이점은 없어보인다.</p><p>하지만 이건 해당 모듈을 사용하는 컨슈머 입장이 돼봐야 그 차이점을 알게 된다.</p><ul><li>라이브러리: jakcson-core, spring-tx, 우리 프로젝트 내에서 만드는 모듈들 등등</li><li>컨슈머: 프로젝트 내에서 라이브러리를 사용하는 모듈, 우리 프로젝트에서 위 라이브러리들을 사용하는 모듈 등등</li></ul><p>프로젝트에 두 가지 모듈(producer와 consumer)을 만들어서 차이점을 확인해보자.</p><p>먼저 producer 모듈에 의존성을 추가할 때 implementation과 api로 각각 추가해보자</p><img src="/2022/03/12/gradle-implementation-vs-api/implementation-api-multi-module-01.png" class=""><p>implementation으로 추가한 jackson-core와 api로 추가한 commons-lang3 모듈이 모두 클래스패스에 추가됐다.</p><img src="/2022/03/12/gradle-implementation-vs-api/implementation-api-multi-module-02.png" class=""><p>consumer 쪽에서 producer 모듈을 의존성으로 추가하는데 여기서 차이점이 나온다. (producer 모듈을 api로 추가해도 마찬가지다.)<br>producer 모듈에서 implementation으로 추가했던 의존성인 jackson-core는 (test)runtimeClassPath에만 추가되고, (test)compileClassPath에는 추가되지 않았다.<br>그리고 api로 추가했던 의존성인 commons-lang3는 모든 클래스패스에 추가됐다.</p><p>(test)compileClassPath에 의존성을 전파하지 않음으로써 얻는 이점들은 다음과 같다.</p><h3 id="implementation의-장점-1-불필요한-의존성-전파를-막아준다"><a href="#implementation의-장점-1-불필요한-의존성-전파를-막아준다" class="headerlink" title="implementation의 장점 1: 불필요한 의존성 전파를 막아준다."></a>implementation의 장점 1: 불필요한 의존성 전파를 막아준다.</h3><img src="/2022/03/12/gradle-implementation-vs-api/implementation-block-expose-unnecessary-transitive-denpendency-01.png" class=""><p>consumer module의 compileClassPath에 있는 commons-lang3 모듈 같은 경우에는 실제 소스코드에서 사용이 가능하다.</p><img src="/2022/03/12/gradle-implementation-vs-api/implementation-block-expose-unnecessary-transitive-denpendency-02.png" class=""><p>하지만 consumer moudle의 compileClassPath에 없는 jackson-core 같은 경우에는 실제 소스코드에서 사용이 불가능하다.<br>compileClassPath에 없기 때문에 consumer 모듈에서 직접적인 사용이 불가능한 것이지, runtime에 jackson-core를 사용하는 producer 모듈을 사용하는 것에는 아무런 문제가 없다. (runtimeClassPath에 있기 때문에)<br>producer 모듈에 jackson-core를 이용하는 클래스를 작성해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 아무 의미 없지만 jackson-core 모듈을 사용하는데 아무 이상이 없다는 걸 보여주기 위해 사용함.</span></span><br><span class="line">        <span class="keyword">final</span> JsonParser.<span class="type">Feature</span> <span class="variable">allowComments</span> <span class="operator">=</span> JsonParser.Feature.ALLOW_COMMENTS;</span><br><span class="line">        System.out.println(<span class="string">&quot;test~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 consumer 모듈에서 jackson-core를 이용하는 Sample 클래스를 사용하는 클래스를 작성해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Sample</span> <span class="variable">sample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>();</span><br><span class="line">        sample.a(); <span class="comment">// test~</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some 클래스의 메인 함수를 호출하면 Sample 클래스의 a 메서드가 호출되서 test~ 문자열이 정상적으로 호출되는 걸 볼 수 있다.<br>consumer 모듈 입장에서는 불필요한 의존성 전파(jackson-core 모듈이 consumer까지 전파)되는 걸 막아줘서 import 자체가 되지 않다보니 자동완성에서 import 할 수 있는 가짓수가 줄어들다보니 어떤 클래스를 사용해야하는지 고민할 시간이 줄어들고(생산성 향상),<br>producer 입장에서는 해당 모듈을 외부로 노출시키지 않다보니 마음대로 구현체를 갈아끼워도 컴파일 타임에 오류가 나지 않을 것이라는 신뢰가 어느정도 생긴다는 장점이 존재한다.</p><h3 id="implementation의-장점-2-compileClassPath의-의존성-충돌이-일어나지-않는다"><a href="#implementation의-장점-2-compileClassPath의-의존성-충돌이-일어나지-않는다" class="headerlink" title="implementation의 장점 2: compileClassPath의 의존성 충돌이 일어나지 않는다."></a>implementation의 장점 2: compileClassPath의 의존성 충돌이 일어나지 않는다.</h3><p>producer 모듈에 guava를 implementation으로 추가해보자</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.google.guava:guava:31.0.1-jre&quot;</span>)</span><br></pre></td></tr></table></figure><p>그리고 consumer 모듈에도 똑같이 guava 모듈을 추가하는데 굉장히 하위 버전을 추가해보자</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.google.guava:guava:10.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>그리고 이번에는 producer 모듈에서 api로 추가했었던 commons-lang3 모듈을 consumer 모듈에 추가하는데 버전을 좀 낮게 추가해보자.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.apache.commons:commons-lang3:3.0&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/03/12/gradle-implementation-vs-api/implementation-avoid-compile-dependency-resolution.png" class=""><p>이제 consumer 모듈의 classPath를 보면</p><ul><li>producer 모듈에서 api로 추가했던 commons-lang3 같은 경우에는 (test)compile&#x2F;runtimeClassPath에서 의존성 충돌이 나서 producer 모듈에 추가한 가장 최신 버전인 3.12.0이 적용됨</li><li>producer 모듈에서 implement로 추가했던 guava 같은 경우에는 (test)compileClassPath에는 consumer 모듈에 추가한 10.0이 적용됨, (test)runtimeClassPath에서는 의존성 충돌이 나서 producer 모듈에 추가한 가장 최신 버전인 31.0.1-jre가 적용됨</li></ul><p>즉, implementation을 쓰면 consumer 입장에서 소스코드를 직접 작성하는 것과 연관이 있는 (test)compileClassPath는 의존성이 전파가 되지 않았기 때문에 consumer 모듈에 추가한 버전이 적용되었고,<br>소스코드를 실제 실행하는데 필요한 (test)runtimeClassPath는 의존성이 전파됐기 때문에 의존성 충돌에 의해 가장 최신버전이 적용된다. (안 그러면 런타임에 메서드나 클래스를 찾을 수 없다는 오류가 발생할 수 있다.)<br>반대로 최신버전에서는 사라진 코드를 사용했다면 컴파일은 성공하는데 런타임에 오류가 발생할 수도 있기 때문에 runtime 의존성도 체크하면서 사용해야 안전하다. (최대한 런타임 의존성과 호환성이 맞는 버전을 사용해야 안전하다.)</p><p>반면 api를 쓰면 (test)compile&#x2F;runtimeClassPath에 모두 의존성을 전파하기 때문에 의존성 충돌로 인해 원하는 버전을 쓰려면 버전을 강제하는 방법을 쓰거나 해야해서 사용하기가 좀 구려진다.</p><h3 id="implementation의-장점-3-compileClassPath에-포함되지-않기-때문에-라이브러리-측에서-의존성을-변경해도-컨슈머는-재컴파일-하지-않아도-된다"><a href="#implementation의-장점-3-compileClassPath에-포함되지-않기-때문에-라이브러리-측에서-의존성을-변경해도-컨슈머는-재컴파일-하지-않아도-된다" class="headerlink" title="implementation의 장점 3: compileClassPath에 포함되지 않기 때문에 라이브러리 측에서 의존성을 변경해도 컨슈머는 재컴파일 하지 않아도 된다."></a>implementation의 장점 3: compileClassPath에 포함되지 않기 때문에 라이브러리 측에서 의존성을 변경해도 컨슈머는 재컴파일 하지 않아도 된다.</h3><p>consumer 측에서 producer에서 api로 의존성을 추가한 commons-lang3를 사용한다고 해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        StringUtils.isBlank(<span class="string">&quot;asf&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 producer 측에서 commons-lang3 모듈의 의존성 버전을 바꿔보자.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api(<span class="string">&quot;org.apache.commons:commons-lang3:3.10&quot;</span>)</span><br></pre></td></tr></table></figure><p>그리고 consumer 측의 Some 클래스의 main 함수를 실행하면 Some 클래스는 하나도 수정한 게 없는데 다시 컴파일 하는 걸 볼 수 있다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6:04:36 AM: Executing &#x27;:consumer:Some.main()&#x27;...</span><br><span class="line"></span><br><span class="line">&gt; Task :producer:compileJava</span><br><span class="line">&gt; Task :consumer:compileJava</span><br><span class="line">&gt; Task :consumer:processResources UP-TO-DATE</span><br><span class="line">&gt; Task :consumer:classes</span><br><span class="line">&gt; Task :producer:processResources NO-SOURCE</span><br><span class="line">&gt; Task :producer:classes</span><br><span class="line">&gt; Task :producer:jar UP-TO-DATE</span><br><span class="line"></span><br><span class="line">&gt; Task :consumer:Some.main()</span><br><span class="line">hello~</span><br></pre></td></tr></table></figure><p>하지만 producer에서 implementation으로 추가했던 jackson-core나 guava 같은 경우에는 consumer 측의 (test)compileClassPath에는 포함조차 돼있지 않기 때문에 해당 모듈은 의존성을 바꾼다 하더라도 consumer에서는 컴파일을 할 필요가 없다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6:05:36 AM: Executing &#x27;:consumer:Some.main()&#x27;...</span><br><span class="line"></span><br><span class="line">&gt; Task :producer:compileJava</span><br><span class="line">&gt; Task :consumer:compileJava UP-TO-DATE</span><br><span class="line">&gt; Task :consumer:processResources UP-TO-DATE</span><br><span class="line">&gt; Task :consumer:classes UP-TO-DATE</span><br><span class="line">&gt; Task :producer:processResources NO-SOURCE</span><br><span class="line">&gt; Task :producer:classes</span><br><span class="line">&gt; Task :producer:jar UP-TO-DATE</span><br><span class="line"></span><br><span class="line">&gt; Task :consumer:Some.main()</span><br><span class="line">hello~</span><br></pre></td></tr></table></figure><h3 id="implementation의-장점-4-compileClassPath-사이즈가-줄어들었기-때문에-컴파일-속도가-빨라진다"><a href="#implementation의-장점-4-compileClassPath-사이즈가-줄어들었기-때문에-컴파일-속도가-빨라진다" class="headerlink" title="implementation의 장점 4: compileClassPath 사이즈가 줄어들었기 때문에 컴파일 속도가 빨라진다."></a>implementation의 장점 4: compileClassPath 사이즈가 줄어들었기 때문에 컴파일 속도가 빨라진다.</h3><p>컴파일 클래스패스가 줄어들었다는 것은 컴파일 해야할지 말아야할지 판단할 근거도 줄었다는 뜻이다.<br>위에서 보듯이 producer에서 api로 추가한 모듈들은 consumer에서 사용하는지, 안 하는지에 따라서 해당 클래스를 재컴파일 해야하는지 말아야하는지 비교를 해야한다.<br>하지만 전부 implementation으로 막혀있다면 그 비교 대상 자체가 확연히 줄어들게 될 것이다.<br>그로 인해 컴파일 속도가 빨라진다. (엄청나게 빨라지는 것까지는 아니겠지만… 의존성이 많으면 많을 수록 더 큰 빛을 발할 것 같다.)</p><h2 id="언제-implementaion을-쓰고-언제-api를-써야할까"><a href="#언제-implementaion을-쓰고-언제-api를-써야할까" class="headerlink" title="언제 implementaion을 쓰고 언제 api를 써야할까?"></a>언제 implementaion을 쓰고 언제 api를 써야할까?</h2><p><a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_recognizing_dependencies">https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_recognizing_dependencies</a></p><blockquote><p>Prefer the <code>implementation</code> configuration over <code>api</code> when possible</p></blockquote><p>일단 무지성으로 implementation을 쓰고 어쩔 수 없을 때만 고민 한 100번 정도 한 다음에 api를 쓰면 된다.</p><h3 id="implementation을-써야할-때"><a href="#implementation을-써야할-때" class="headerlink" title="implementation을 써야할 때"></a>implementation을 써야할 때</h3><blockquote><p>any type that is used in the following list is irrelevant to the ABI, and therefore should be declared as an <code>implementation</code> dependency:<br>• types exclusively used in method bodies<br>• types exclusively used in private members<br>• types exclusively found in internal classes (future versions of Gradle will let you declare which packages belong to the public API)</p></blockquote><p>ABI(Application Binary Interface)와 무관한 케이스에는 implementation을 쓰면 된다.</p><ul><li>타입이 메서드 바디 안에서만 쓰이는 경우</li><li>타입이 프라이빗 멤버(변수&#x2F;메서드 등등)에서만 쓰이는 경우</li><li>타입이 인터널 클래스에서만 쓰이는 경우</li></ul><h3 id="api를-써야할-때"><a href="#api를-써야할-때" class="headerlink" title="api를 써야할 때"></a>api를 써야할 때</h3><blockquote><p>An API dependency is one that contains at least one type that is exposed in the library binary interface, often referred to as its ABI (Application Binary Interface). This includes, but is not limited to:<br>• types used in super classes or interfaces<br>• types used in public method parameters, including generic parameter types (where <em>public</em> is something that is visible to compilers. I.e. , <em>public</em>, <em>protected</em> and <em>package private</em> members in the Java world)<br>• types used in public fields<br>• public annotation types</p></blockquote><p>ABI(Application Binary Interface)와 관련있는 케이스에는 api를 쓰면 된다.</p><ul><li>타입이 인터페이스나 슈퍼 클래스에서 쓰이는 경우</li><li>타입이 public&#x2F;protected&#x2F;package private 메서드의 파라미터(메서드의 인자 혹은 리턴타입 및 제네릭 파라미터 타입)에서 쓰일 때</li><li>타입이 퍼블릭 필드에서 쓰일 때</li><li>퍼블릭 어노테이션 타입일 때</li></ul><h2 id="그럼-implementation만-쓰면-만사-OK일까"><a href="#그럼-implementation만-쓰면-만사-OK일까" class="headerlink" title="그럼 implementation만 쓰면 만사 OK일까??"></a>그럼 implementation만 쓰면 만사 OK일까??</h2><p>아니다, 최대한 의존성을 줄여야한다.<br>implementation이라 할지라도 (test)runtimeClassPath에 포함되기 때문에 의존성 충돌로 인해 문제가 발생할 수 있다.<br>런타임 의존성 충돌로 인해 실제 런타임에 내가 만든 소스코드가 제대로 동작하지 않을 수 있다.<br>내가 사용한 모듈(컴파일 클래스패스에 추가한) 버전에서는 존재하는 메서드였는데 런타임 의존성 충돌로 최신버전으로 주입됐을 때 최신버전에서는 삭제된 메서드일 때 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/NoSuchMethodException.html">NoSuchMethodException</a> 같은 게 날 수 있다.<br>혹은 라이브러리의 버전이 바뀌면서 내부 동작이 바뀌는 등의 무서운 일이 발생한다면 더욱 큰 장애로 이어질 수도 있다.<br>그리고 컴파일 타임에 발견되지 않고 런타임에 발견되는 문제는 해당 코드 블럭이 실행돼야지만 발견되는 장애이기 때문에 더더욱 무섭다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;3줄 요약&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#implementation&quot;&gt;implementation&lt;/a&gt;을 사용하자&lt;/li&gt;
&lt;li&gt;implementation을 사용하더라도 라이브러리를 사용하는 &lt;a href=&quot;#%EA%B7%B8%EB%9F%BC-implementation%EB%A7%8C-%EC%93%B0%EB%A9%B4-%EB%A7%8C%EC%82%AC-OK%EC%9D%BC%EA%B9%8C&quot;&gt;consumer 측의 runtimeClassPath에 추가되기 때문에 런타임 의존성 충돌&lt;/a&gt;이 발생할 수 있으니 의존성은 최대한 적게 추가하자.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#api&quot;&gt;api&lt;/a&gt;가 필요한 건지 100번 고민하고 설계가 잘못된 건 아닌지 의심해 본 후 api를 사용한다. (api는 consumer의 compile&amp;#x2F;runtimeClassPath에 모두 추가된다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;들어가기에-앞서&quot;&gt;&lt;a href=&quot;#들어가기에-앞서&quot; class=&quot;headerlink&quot; title=&quot;들어가기에 앞서&quot;&gt;&lt;/a&gt;들어가기에 앞서&lt;/h2&gt;&lt;p&gt;의존성(라이브러리&amp;#x2F;프레임워크)을 추가하기 위해 build.gradle(or build.gradle.kts)에 아래와 같이 디펜던시들을 추가하게 된다.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    api(&lt;span class=&quot;string&quot;&gt;&amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    implementation(&lt;span class=&quot;string&quot;&gt;&amp;quot;com.fasterxml.jackson.module:jackson-module-kotlin&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="gradle" scheme="https://perfectacle.github.io/categories/gradle/"/>
    
    
    <category term="gradle" scheme="https://perfectacle.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>(독서노트) 제로 투 원 (ZERO to ONE) Part. 01</title>
    <link href="https://perfectacle.github.io/2022/01/22/book-review-zero-to-one-part-01/"/>
    <id>https://perfectacle.github.io/2022/01/22/book-review-zero-to-one-part-01/</id>
    <published>2022-01-22T15:02:19.000Z</published>
    <updated>2022-06-06T08:23:55.804Z</updated>
    
    <content type="html"><![CDATA[<p>평상 시 독서를 거의 안 하고, 짧은 글, 짧은 영상 위주의 인스턴트 식으로 살다보니 독해능력이 엄청나게 떨어졌다.<br>글을 읽어도 제대로 이해하지 못하고, 한 2~3문장 이전에 읽은 글이 기억나지 않는다.<br>책을 읽고, 해당 책이 좋다는 사실까지는 알았는데 이 책이 그래서 하고자 하는 말은 무엇이지? 무슨 내용의 책이지?<br>를 남들에게 요약해서 설명해주려해도 설명할 수가 없었다.<br>책을 읽긴 읽었는데 그래서 뭐? 책을 읽기 전과 책을 읽은 후의 나는 어떤 변화가 있나? 어떤 발전이 있나?… 그냥 책 하나 읽었다는 자기 만족 밖에 되지 않았다.<br>빠르게 정보를 습득하는 것도 중요하지만, 정보가 남아있지 않다면 그 시간마저 버린 것이기 때문에 이렇게 기록이라도 하는 의식적인 노력을 들여야 조금이나마 내 자신이 개선될 것 같아 노트를 남긴다.<br>+로 비판적 책읽기(책에 있는 내용을 무지성으로 수용하는 게 아니라 문장 하나, 단어 하나하나가 의미하는 게 무엇인지 곱씹어보기, 작가가 헛소리 하는 건 없는지 의심해보기)를 통해 작가와 소통하며 책을 읽는 듯한 느낌을 느껴보려고 하는 것도 있음.</p><h1 id="제로-투-원-ZERO-to-ONE"><a href="#제로-투-원-ZERO-to-ONE" class="headerlink" title="제로 투 원 (ZERO to ONE)"></a><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=21074303">제로 투 원 (ZERO to ONE)</a></h1><img src="/2022/01/22/book-review-zero-to-one-part-01/book-cover.jpeg" class=""><p>참고로 나는 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8377652">개정되기 이전 버전</a>을 읽었음.<br>읽게 된 계기는 회사 동료가 이 책을 읽고 가슴이 설렜다고 함.<br>그래서 사내에 기증된 도서에도 있길래 읽었음.<br>나의 난독+독해능력이 너무 딸려서 줄을 치면서(그나마 내용을 기억하기 위한 최소한의 행위&#x2F;노력) 읽고 싶었지만 회사 책이라 그러지는 못함.<br>그러다보니 그냥 읽기만 하고 다음날 되면 전날 내용 다 까먹음.<br>그러다보니 내가 이 책을 읽고 있기는 한데 남들한테 이 책이 무슨 내용이고 왜 좋고 어떤 영감을 받았는지 왜 추천하는지 하나도 설명하지 못함.<br>그래서 2독을 결심하고 조금이나마 노력을 들여 나의 기억력 + 독해력 향상을 위해 노트에 받아적다가 팔도 아프고, 아무 노트에 대충 정리해놓다보니 나중에 잊혀질까 아까워서 그냥 블로그에 적기로 결심함.<br>물론 손으로 적었을 때가 노력이 제일 많이 들어가다보니 기억이나 독해력 향상에는 도움이 많이 되는 것 같지만,<br>노트에 적고 또 장기보존을 위해 블로그에 또 적자니 시간도 아깝고… 시간이 무한정 한 것이 아니기 때문에 걍 블로그에 적기로 결심.</p><p>참고로 이 책은 <code>새로운 것을 창조하는 회사를 만드는 방법</code>을 다루는 책임.<br>따라서 스타트업 창업을 생각하거나 본인의 야망을 어떻게 실현시킬지, 어떤 생각으로 일을 하거나 인생을 살아가야하는지에 대한 도움이 될만한 책이라고 생각함.<br>굳이 창업 안 하더라도 성공한 사람, 혁신을 이뤄낸 사람들은 어떻게 생각하고 어떻게 행동했는지 를 통해 배울 수 있는 점이 많음.</p><h2 id="머릿말-0이-1이-되려면"><a href="#머릿말-0이-1이-되려면" class="headerlink" title="머릿말: 0이 1이 되려면"></a>머릿말: 0이 1이 되려면</h2><p>익숙한 것을 베끼는 건 1 -&gt; N이 되는 꼴임. (모방, 쉬움)<br>새로운 걸 만들어야 0 -&gt; 1이 되는 것임. (창조, 어려움)<br>창조(새로운 걸 만드는 행위)는 모든 순간에서 단 한번만 일어남: 검색엔진을 만들어서 제 2의 래리 페이지, 세르게이 브린이 될 수 있는가? 그건 모든 순간에 있어서 단 한 번 밖에 일어날 수 없는 행위임.<br>내가 검색엔진 만들면 그냥 1이 N이 되는 거임. (아니면 이미 많은 아이디어라면 N에서 N+@가 되는 거고…)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 무엇이 창조이고 무엇이 모방인가? 그 기준은 무엇인가? 창조가 아니면 전부 노답인가? One of them(모방)이 부정적이긴 하지만 후발주자들이 성공하는 케이스도 있지 않은가?  </span><br><span class="line">1 -&gt; N이 되다가 그 안에서 0 -&gt; 1을 찾아야하는 걸까??</span><br><span class="line">모든 걸 0에서 시작할 필요는 없는 것 아닐까??</span><br><span class="line">1 -&gt; N을 잘하는 것도 힘든데 0 -&gt; 1은 평생 시도도 못해보는 거 아닐까??  </span><br><span class="line">토스도 토스뱅크(카카오뱅크의 모방 아닌가?), 토스증권(이미 다른 증권사들이 하는 거 따라하는 거 아닌가?)을 보면 모방인 거 같은데...</span><br><span class="line">결국 그 안에서 창조를 만들어내야한다는 뜻일까?</span><br><span class="line">아니면 0 -&gt; 1이라는 행위를 내가 너무 맹신하고 있나? 꼭 0 -&gt; 1일 필요는 없는 것 아닐까?  </span><br><span class="line">아니면 내가 0 -&gt; 1이라는 행위에 대해 제대로 이해하지 못하고 있는 건 아닐까??</span><br></pre></td></tr></table></figure><p>하지만 이런 창조(0 -&gt; 1)는 매우 어렵고 수많은 기적이 필요함.<br>하지만 인간은 그런 기적을 만들어 낼 수 있음.<br>그리고 그 기적을 기술(technology)이라고 부름.<br>기술이 기적인 이유는 <code>더 적은 것으로 더 많은 일</code>을 해주기 때문. (오프라인 결제는 점원이 병목이지만 온라인 결제는 그런 병목도 없음, 그냥 서버만 있으면 더 많은 결제를 받아낼 수 있음. 점포도 필요 없고 인건비도 안 나가고 서버비만 나감.)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 결국엔 기술력이 핵심이란 것일까??</span><br><span class="line">창조적인 아이디어가 있어도 기술이 뒷받침 해주지 못하면 결국 실현 불가능한 아이디어이니까...??</span><br><span class="line">그럼 개발자인 나는 아이디어를 실현시킬 수 있는 기술력을 쌓는데 더 많은 노력을 해야할까??</span><br><span class="line">아이디어가 없어서(사실 아이디어를 짜내는 행위도 잘 하지 않으니 이건 핑계겠지만...) 사이드 프로젝트나 창업 생각은 하지도 못하고 있는데</span><br><span class="line">지금 내가 잘 할 수 있는 것(기술력 쌓기, 대용량 트래픽 잘 받아내기, 생산성 향상시키기 등등)인 기술력 향상에 더 집중하다보면 번뜩이는 아이디어를 빠르게 구현할 수 있지 않을까??</span><br></pre></td></tr></table></figure><p>책에서 이런 내용들은 초등학교 2학년 때나 배울법한 기본적인 사실이라고 함. (산업혁명(농업사회에서 자동화 사회? 석탄… 공장의 발전??) 같은 것을 배우는 그런 시점을 말하는 것인가??)<br>근데 우리가 이런 것들을 배웠음에도 불구하고 자주 까먹는 이유(애초에 이런 걸 생각조차 하지 못하는 이유)는 <code>대부분 했던 일을 반복하는 세상</code>속에서 우리가 살고 있기 때문이다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 반복하다보면 결국 익숙해지기 마련임.</span><br><span class="line">익숙해지면 편해지기 마련이고 편한 쪽으로 계속 가려는 게 사람 심리인 것 같음.</span><br><span class="line">결국 그 편함을 계속 추구하고 안주하는 게 제일 위험하다고 봄.</span><br><span class="line">발전이 없기 때문.</span><br><span class="line">지속적으로 comfort zone을 벗어나려는 노력을 하고 불편하고 스트레스를 받지만 그런 노력이 없다면 발전이 없는 거 같음.</span><br><span class="line">결국 반복되는 일상을 살다보니 기술력이 핵심이다(이건 내 생각), 기적을 만들어내야한다 라는 사실을 까먹고 살아가는 것 같음.</span><br><span class="line">반복되는 일상 속에서도 이건 왜 이렇게 해야하지? 이렇게 하면 더 편할 거 같은데? 왜 여기저기 정보가 파편화 돼있지?</span><br><span class="line">내 손 안 타고, 비개발자들도 확인하기 편하게 할 수는 없을까? 반복되는 업무를 어떻게 하면 내 손을 거치지 않고 끝낼 수 있을까?</span><br><span class="line">이런 생각을 계속 하다보면 결국 뭐라도 깨작대고 그 깨작댄 순간들로 인해 나에게 업무에 더 몰입할 수 있는 시간들이 주어지고 결국 생산성 향상으로 이루어짐.</span><br><span class="line">결국 나를 대신하는 무언가를 계속해서 만들어내는 기술력(자동화)가 나에게는 있기 때문에 이런 것들이 실현 가능한 것임.</span><br><span class="line">시간 없다, 할 일이 너무 많다 이런 핑계를 대지 않고 주말에라도 이런 것들을 찾아서 개선하는 노력을 조그만한 것이라도 하다보면(업무 환경을 개선할 수 있는 자동화 툴들을 많이 만들다던지)</span><br><span class="line">결국 생각이 발전/진화하여 더 큰 꿈을 이루어내는 아이디어까지 나오고 그간 내가 쌓아왔던 기술력이 빛을 발휘하지 않을까...??</span><br><span class="line"></span><br><span class="line">여튼 반복/편안함을 정말 위험한 신호로 받아들이고 끊임없이 Comfort zone을 벗어나 내 자신을 불편하게 만들고 그 불편함을 편하게 만들어서</span><br><span class="line">남들은 불편한 게 너무나 많은데 나한테는 그런 것들이 너무나 자연스럽고 익숙해서 더 많은 걸 이루어낼 수 있는 사람이 돼야겠음.</span><br></pre></td></tr></table></figure><p>그동안의 모든 혁신은 창조에서 왔음.<br>그리고 성공한 사람들은 예기치 못한 곳에서 가치를 찾았는데 기본적인 원리를 충실히 했기 때문임.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 내 생각에는 창조가 아니고 모방으로도 성공한 사람 많은 거 같은데??</span><br><span class="line">모방만 해도 빡센데??</span><br><span class="line">아니면 내가 혁신이라는 것을 너무 과소평가하고 있나?</span><br><span class="line">혁신은 정말 대단하고 그 누구도 상상하지 못하고, 상상을 했더라도 실현 가능성이 넘사 급이고, 그 넘사를 이뤄내야 혁신인가?</span><br><span class="line">사람들의 행동패턴을 변화하고, 사회에 긍정적인 영향을 끼치고, 인류를 구원한다는 그런 사명감으로 똘똘 뭉친 아이디어들을 실현했을 때 혁신이라고 부를 수 있는 것인가?</span><br><span class="line">혁신이란 게 그렇게 대단한 것이라면 나는 살면서 혁신을 이뤄낼 수 있을까??</span><br><span class="line">아니면 혁신에도 크기가 있는 게 아닐까?</span><br><span class="line">큰 혁신을 한 번에 이뤄내기는 어렵지만 자그만한 혁신들을 조금씩 꾸준히 이뤄내다 보면 그게 결국 큰 혁신이 되어 미래를 바꿀 수도 있는 것은 아닐까?</span><br><span class="line">내가 이뤄낼 수 있는 혁신들에는 무엇이 있을까??</span><br><span class="line">개발자인 내가 사회에 어떤 영향을 미칠 수 있을까??</span><br><span class="line">당장은 안 떠오르니까 사내에서 동료들에게 긍정적인 영향력을 끼칠 수 있는 혁신의 아이템을 발굴하고 실천/개선해나가다 보면 뭔가 나오지 않을까??</span><br><span class="line">코드리뷰를 좀 더 적극적으로 잘 도와준다거나? 주말에 공부한 내용들을 공유한다거나? 그들도 기술에 관심을 가지도록 내가 더 많은 노력을 기울여서 성장하는 조직을 만든다거나...?</span><br><span class="line">뭐 여러가지 아이디어들이 있을테지만 벌써부터 이런 걸 실천하고 성공적으로 마칠 생각을 하니 주말에 쉬면 안 되겠다는 생각이 들면서 피로감이 몰려온다...</span><br><span class="line"></span><br><span class="line">또한 기본적인 원리를 충실히 했기 때문이라고 하는데...</span><br><span class="line">그럼 나는 기본적인 원리를 충실히 지키지 않았나? 내가 알고있는 기본이 그들이 알고 있는 기본과는 다르거나 그 커버리지가 엄청 차이가 나는 걸까??</span><br><span class="line">TDD의 기본이라고 하면 테스트를 먼저 짜는 것이지만 나는 그것을 지키지 못하고 답답한 마음에 먼저 어플리케이션 소스코드 짜고 그 이후에 테스트를 끼워 맞추고 있는데...</span><br><span class="line">어찌보면 기본적인 원리(테스트를 먼저 짠다)도 지키지 않고, </span><br><span class="line">그 기본적인 원리를 지키기 위한 또다른 원리(프로덕션 코드에 바로 적용하기 어려우니 개인적으로 시간을 내어 익숙해지기 위한 훈련을 한다거나... 아니면 더 작은 단위에 대한 테스트를 먼저 짜보는 연습을 한다던가)를 모르기 때문이 아닐까??</span><br><span class="line">기본에 충실해라, 급할 수록 돌아가라... 라는 말을 많이 하지만 나의 성격이 급하고 시간이 없다는 핑계로 막 일하는 경우가 많은 것 같다.</span><br><span class="line">결국 그런 걸 개선하려면 어떻게 해야할까?</span><br><span class="line">어떻게 하면 급박한 상황 속에서도 평정심을 유지하며 기본을 지킬 수 있을까?</span><br><span class="line">실무를 하면서 당장은 고치기 힘들 것이므로 주말/평일에 따로 시간을 내서 기본에 충실하는 훈련을 해야하지 않을까?</span><br><span class="line">그런 훈련 방법에는 무엇이 있을까? 그리고 그 훈련을 효율적으로 하기 위해서는 어떻게 해야할까...??</span><br><span class="line">생각에 생각이 꼬리를 물고 결국 실천은 안 하고... 생각만 하면 피곤하고... 주말에 누워서 띵까띵까 유튜브나 보고 있고...</span><br><span class="line">성공한 사람이 되기 위해서는 정말 힘든 거 같다, 근데 뭐 생각해 보면 당연한 이치인 거 같기도 하고...</span><br><span class="line">평범한 사람들이 살듯이 주말에 띵까띵까 놀면서 성공하고 위대한 사람이 되고싶다고 생각하는 건 심하게 말하면 미친 생각, 도둑놈 심보/로또를 바라는 격이고 나에겐 그런 천운이 있지 않으니 정도를 가야하는 게 맞는 것 같다.</span><br></pre></td></tr></table></figure><h2 id="1-미래를-향해-도전하라"><a href="#1-미래를-향해-도전하라" class="headerlink" title="1. 미래를 향해 도전하라."></a>1. 미래를 향해 도전하라.</h2><p>Q: <code>정말 중요한 진실인데 남들이 당신한테 동의해주지 않는 것은 무엇인가요?</code><br>A: <code>대부분의 사람은 X라고 믿지만, 진실은 Y예요.</code></p><p>진실이 Y일지라도 Y라고 믿는 사람이 많지 않고(그건 많은 사람들이 알고 있는 진실일테므로, 책에서는 현재 교육 시스템이 문제가 있다고 지적하는 걸 예로 들고 있다.),<br>흔한 논쟁 중 한 쪽의 주장이 되지 않아야 좋은 대답이라고 할 수 있다고 한다. (책에선 신은 존재하지 않는다는 걸 예로 들고있다.)<br>대부분의 사람이 X라고 믿는 이유는 <code>학교에서 배우는 지식은 모든 사람들이 동의한 내용</code>이기 때문이고,<br>내가 Y라고 믿는 이유는 <code>미래를 예견</code>했기 때문이다. (물론 정확하지 않을 수 있겠지만…?)<br>미래가 중요한 이유는 <code>세상이 현재(지금 우리가 보는 세상)와 다를 것이기 때문</code>이다.<br>따라서 <code>현재와 10년 후의 미래가 다르지 않다면 그건 미래가 아직도 10년이나 남았다</code>는 것을 의미한다.<br>하지만 <code>현재와 10년 후의 미래가 급격하게 달라진다면, 그건 미래가 코앞에 와있다</code>는 뜻이다.</p><p>또한 이런 미래를 바라볼 수 있는 예견 능력(천재적인 아이디어)이 있다 할지라도 어찌보면 불편한 사실일 수 있는 이 내용을 내뱉을 수 있는 <code>용기</code>가 더 훌륭하다고 말한다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 책에서 미래는 아직 오지 않은 순간들의 총합이라고 했는데 나에겐 정말 충격이었다. (1독 할 때는 충격도 받지 못했다, 이 책을 빨리 읽어야겠다는 생각 때문에 이런 깨우침을 느끼지 못한 것 같다.)</span><br><span class="line">그 말 뜻을 또 곱씹어보면 현재와 미래가 다르지 않으면 아직 아무런 것도 오지 않은 것이고 그런 미래는 미래라고 부를 수 없는 것이다.</span><br><span class="line">그냥 미래가 시간이 지나서 미래라고 부를 수 있는 게 아니라 발전적인 미래를 뜻하는 건가?? 싶었다.</span><br><span class="line">그런 의미에서 또 생각해보면 과거 오스트랄로피테쿠스 시절에는 엄청나게 발전이 느렸지만 요즘에는 발전의 속도가 정말 미쳤다. (스마트폰의 발전만 보더라도...)  </span><br><span class="line">그렇다면 우리는 더욱 더 미래를 앞당기고 있고, 과거 조상들이 살았던 시간보다 더 많은 시간을 사는 듯한 효과를 누리는 것이 아닐까?? </span><br><span class="line">과거에는 어떤 발전/혁신을 이뤄내려면 수십~수백년이 걸렸다면 지금은 수개월 사이에도 혁신이 나오기도 한다.  </span><br><span class="line">그런 반복된 일상들을 살아왔던 조상에 비하면 우리는 몇배, 아니 몇십배는 더 많은 미래와 세상을 경험하며 살아가는 것이 아닐까?? </span><br><span class="line">이렇게 되면 우리는 지구의 수명도 점점 더 앞당기게 되는 것 같고(원래는 지구의 수명이 10억년이었다면 우리가 자꾸 미래를 앞당겼기 때문에 탄소를 많이 써서 5억년으로 줄였다던지...)</span><br><span class="line">그러다보니 환경의 중요성도 많이 깨달아야 할 것 같다.</span><br><span class="line">또 이건 잡설인데 미래를 자꾸 앞당긴다고 하다보니... 나이가 들면 들 수록 세월이 빠르게 흘러간다고 생각하는 것도 미래를 계속 앞당기고 있기 때문이 아닐까?</span><br><span class="line">라는 말도 안 되는 망상을 해보게 되었다. (생각해보면 나이가 들면 들 수록 세월이 빠르게 흘러간다고 생각하는 이유는 뇌의 어떤 작용이 나이가 들면서 달라지기 때문이 아닐까??)</span><br><span class="line"></span><br><span class="line">그리고 대부분의 사람들이 X라고 믿는 이유도 학교에서 배우는 지식들이 모든 사람들이 동의한 내용이라고 한 것도 좀 충격이었다.</span><br><span class="line">뭐 강남 대치동에 부잣집 자제들이 고액과외해서 서울대 가도 죽도 못 쓰는 사람들이 있다는 얘기를 들은 적이 있는데 이유들이 그런 것 때문 아닐까?  </span><br><span class="line">무지성 주입식 교육으로 과외선생님이 하라는대로 시키고 대학교 가니까 자유가 주어지니 어찌 해야할지 모르는 게 아닐까?</span><br><span class="line">그리고 어쩌저찌 대학에서는 잘 했다 할지라도 교수 마저도 사라지니 이제 또 능동적으로 어떻게 해야할지 몰라서 그런 게 아닐까?</span><br><span class="line">결국 그런 울타리 안에서 보호받다가 나왔을 때 어찌해야할지 모르는 현상이 나타나지 않으려면 선생님/교수/교과서/책 등등 많은 사람들이 신뢰하기로 합의한 내용에 대해서 비판적으로 받아들여야하지 않을까 싶다.  </span><br><span class="line">나야 뭐 고등학교 때는 그냥 공부를 잘 안 해서 무지성 수용할 것도 없었고, 하지만 대학을 가서 강의의 질에 엄청난 실망을 하고 교수와 학과, 더 나아가 학교에 대한 신뢰감이 바닥을 쳤다.  </span><br><span class="line">만약 내가 다른 학생들처럼 관심없는데 점수 맞춰서 학과를 왔거나 평상 시 관련 정보 습득을 게을리 했다면 나도 좋은 게 좋은 거지, 교수님이 우리보다 얼마나 더 많은 경험과 지식이 있을텐데 다 맞는 말씀 하시겠지 라고 생각했을 것 같다.</span><br><span class="line">물론 좋은 학교의 좋은 교수님이었다면 나에게 다른 인상을 심어줘서 무지성 수용을 했을지 모르겠지만, 그 때 안 좋은 학교의 안 좋은 교수들을 만남으로 인해 교수님들이 이상한 소리 하는 건 아닌지 의심하고 필터링 하게 되었다.  </span><br><span class="line">또한 내가 이렇게 비판적으로 생각해볼 수 있던 원인 중 하나는 주변에 개발자들을 알고 있었기 때문이다.</span><br><span class="line">오프라인 스터디를 통해 알게 된 스승 격이라 볼 수 있는 개발자 분들께 교수님께 들은 얘기가 실무에서도 먹히는지, 요즘 개발 생태계가 진짜 그렇게 돌아가는 게 맞는지</span><br><span class="line">물어보고 검증해보면서 그게 맞는 말인지 틀린 말인지 판단할 수 있는 기준이 생기게 되었다.  </span><br><span class="line">물론 나의 검증이 틀렸을 수도 있지만 적어도 나에겐 사실 여부를 판단할 수 있는 리소스(어찌보면 인맥)이 있었기 때문에 비판적으로 정보를 습득할 수 있었다.  </span><br><span class="line">이렇게 비판적으로 생각해볼 수 있는 힘을 기르려면 평상시 관련 정보 습득도 게을리하지 않고, 카더라~ 소식(블로그 등등)보다는 공식 문서나 오피셜 자료들 위주로 사실에 입각해 정보를 수용하는 자세를 가져야할 것 같다.  </span><br><span class="line">물론 무지성 수용이 빠르고 쉽게 정보를 습득할 수 있다는 측면에서는 너무나 편하고, 모든 내용을 비판적으로 수용하려면 시간을 한없이 써야하니 둘 사이의 밸런스를 잘 맞춰야할 것 같다.</span><br><span class="line"></span><br><span class="line">그리고 내가 정반대라고 믿게 된 이유는 미래를 예견했기 때문인데...(현재는 아니지만 미래에는 세상이 달라질 것이므로 미래 관점에서는 해당 사실이 진실이 되는 케이스)</span><br><span class="line">미래를 정확하게 예견하면 그럼 선두주자가 되는 것인가? 결국 선두주자가 되어 남들은 아무도 하지 못하는 시장에 들어가서 독점을 해야한다는 뜻일까??</span><br><span class="line">근데 그 미래가 너무 먼 미래라면 또 어떨까? 이것도 결국 너무 멀지 않은 미래에 대한 예견을 통해 선두주자가 되어야하는 것일까??</span><br><span class="line">근데 선두주자가 되었어도 결국 후발주자에게 빼앗기는 경우도 많은데...</span><br><span class="line">결국 미래를 예견하여 선두주자가 되었다 하더라도 후발주자가 따라오지 못할만큼의 격차를 그 사이에 엄청나게 벌려놓아서 시장을 잡아먹어야한다는 뜻인 것 같다.</span><br><span class="line"></span><br><span class="line">그리고 천재적인 아이디어(미래 예견 능력?)보다도 중요한 것이 용기라고 하는데 아마 이런 내용 중에는 다소 불편한 진실들이 많기 때문이 아닐까 싶다...</span><br><span class="line">사람들이 이건 무조건 맞지! 라고 생각하는 내용에 반대되는 개념을 들고오면 싸이코인가? 라고 생각할 수도 있기 때문이다. (지구는 둥글다 같은...??)</span><br><span class="line">근데 뭐 토스 팀의 코어밸류(핵심 문화, 가치) 중 하나인 불편함을 감수하는 용기(Dare to Make Conflicts)도 이런 걸 강조하기 위함이 아닐까 싶다.  </span><br><span class="line">좋은 게 좋은 거지~라고 생각하고 넘어갔다가 나중에 후폭풍이 몰려오는 경우가 많다.  </span><br><span class="line">그냥 상대방이 마음에 들지 않아 태클을 거는 게 아니라 정말 감정은 다 빼고 여러가지 근거(데이터를 기반한)를 토대로 피드백을 주는 것이다.</span><br><span class="line">여기서 또 어떻게 피드백을 줄 것인지는 개개인의 역량인 것 같지만 나는 다소 직설적으로 말하는 편이다.</span><br><span class="line">그걸 처음에 좀 거부감이 드는 사람도 있을지 모르겠지만, 나도 좋은 게 좋은 거지~ 란 생각으로 참으면서 많이 살아왔는데 그게 결국 좋게 끝난 적은 많지 않은 것 같다. (여러 인간관계에서 그렇게 살아왔는데 상대방은 몰라도 나는 불만족스러웠다.)</span><br><span class="line">또한 사사로운 감정이 들어간 관계라면 더더욱 이런 용기를 내는 게 나중에 나에게 올 여파가 두려워서 많이 용기를 못내는 편인데 회사는 프로답게 일을 하는 공간이고, </span><br><span class="line">프로끼리 사사로운 감정에 얽매이기 보다는 더 나은 방향으로 나아가기 위해서는 더 빠르고 정확한 피드백 전달을 위해선 잔인할만큼 직설적인 필요도 있는 것 같다.</span><br><span class="line">그런 측면에서 나는 용기가 있는 사람인가? 싸가지 없는 사람인가? 가끔 고민이 들 때가 있기도 하지만, 주변 동료들의 피드백으로는 직설적이기 때문에 피드백이 더 정확하게 작동한 거 같다는 내용이 있어서 앞으로도 이런 자세를 고수하지 않을까 싶다.</span><br><span class="line">물론 잔인할만큼 직설적이라고 해서 상대방에 대한 리스펙 없이 말을 하면 싸가지가 없어질 것이기 때문에 리스펙은 하되 정확한 사실 기반으로 전달하려는 그 밸런스 조절은 잘 해야할 것 같다.</span><br></pre></td></tr></table></figure><p>하지만 미래를 정확히 예견할 수 있는 사람은 아무도 없다고 한다.<br>그럼에도 불구하고 아래 두 가지 사실은 확실하다고 한다.</p><ol><li>미래는 지금과는 다를 것이라는 점<br>만약 그렇지 않다면 엄청난 위기라는 사실일까…?  </li><li>미래의 뿌리는 현재의 세상일 것이라는 점<br>그럼 현재를 정확히 판단해야 미래를 예견할 수 있는 능력을 키울 수 있을까??<br>책에서도 사람들의 의견과 반대되는 의견을 낼 줄 아는 사람은 <code>현재를 바라보는 시각의 차이</code>가 있기 때문이라고 한다.<br>결국 현재를 통찰하는 능력을 키우라는 거 같당. (물론 그 현재는 과거의 미래이기 때문에 과거에 대한 통찰도 중요한 거 같다.)</li></ol><h3 id="0에서-1로-진보된-미래"><a href="#0에서-1로-진보된-미래" class="headerlink" title="0에서 1로: 진보된 미래"></a>0에서 1로: 진보된 미래</h3><ol><li>수평적 진보: 효과가 입증된 것을 카피하는 것(1 -&gt; n), 우리가 이미 알고 있는 것이기 때문에 미래가 쉽게 그려진다.<br>ex) 한 개의 타자기를 보고 100개의 타자기로 만드는 것, 글로벌화 (한 곳에서 성공한 것을 모든 곳에서 성공하게 만드는 것), 중국(미국을 따라잡는 것, 하지만 모든 과정을 카피하는 게 아니라 중간에 불필요한 과정은 스킵)</li><li>수직적 진보(집중적 진보): 새로운 일을 하는 것(0 -&gt; 1), 아무도 한 적이 없는 일을 하는 것이기 때문에 미래가 쉽게 상상되지 않는다.<br>ex) 한 개의 타자기를 보고 워드프로세서를 만드는 것, 기술(technology, 굳이 컴퓨터 기술일 필요는 없고 새롭고 더 나은 방식으로 무언가를 가능하게 해주는 모든 것)</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 역시 빠른 성장에는 모방(카피)만 한 게 없는 것 같다.</span><br><span class="line">중국이 그렇~게 빨리 성장한 것도 모조리 다 짝퉁에 세계의 공장(값싼 인건비로 인한) 역할을 했기 때문이 아닐까 싶다.  </span><br><span class="line">하지만 그로인한 사이드 이펙트도 엄청난 것 같다.  </span><br><span class="line">결국 미국이 견제할 만큼 중국이 무서운 속도로 성장하자 미국에서는 중국을 견제하기 시작했고, 중국 자체적으로도 점점 성장 곡선이 꺾이고 있기 때문이다.  </span><br><span class="line">그럼 답은 빠른 카피/글로벌화를 이뤄가면서 동시에 새로운 기술로써 혁신(창조 행위)을 이루어내야하는 것일까??</span><br><span class="line">혁신만 하려면 불확실한 미래에 엄청 큰 배팅이고, 카피만 하다가는 언젠가 한계에 도달할테고...</span><br><span class="line">둘 다 어려운데(혁신이 훨씬 어렵긴 하지만) 둘을 동시에 할 수나 있을까??</span><br><span class="line">카피를 통해 감을 잡은 후에 혁신을 이뤄내야할까?</span><br><span class="line">아니면 혁신을 먼저 계획하고 그를 위한 여러 모방을 하다가 점점 호랑이 이빨 드러내듯이 슬슬 혁신을 해야하는 걸까??</span><br><span class="line">근데 토스에서 처음에 간편송금 한 거 보면 아무도 들어오지 않았던 시장을 공략(0-&gt;1)을 했기 때문에 성공한 거 같은데...</span><br><span class="line">그럼 역시나 여러가지 혁신을 계속해서 돌려보고, 그 중에 하나 맞는 걸 찾아서 쫙 끌어올려야하는 걸까??</span><br><span class="line">역시 쉽지않당.</span><br></pre></td></tr></table></figure><p>한동안 글로벌화가 진행되고 나면 여러 가지 융합과 획일성이 확대될 것이라고 대부분 생각한다고 함.<br>그를 뒷받침하는 증거로 선진국은 devloped(개발이 완료된)이라고 부르고, 개발도상국은 developing(개발 중인)으로 나누었다는 점이다.<br>선진국들은 이미 이룰 것을 다 이뤄서 끝마친 상태고, 개발도상국들은 선진국을 그저 따라잡는다는 의미를 내포하고 있다고 한다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 영어를 몰라서 선진국과 개발도상국의 의미를 그냥 뉴스나 사전만을 통해 접했는데 영어 단어로 보고 나니 체감이 확 됐다.  </span><br><span class="line">사회적으로 합의된 일반적인 통념(선진국은 더이상 발전이 없고, 개발도상국은 선진국을 따라가기만 하는...)이 무엇인지 알 수 있어 엄청난 충격이었다.</span><br><span class="line">근데 너무나 무서운 생각같다.</span><br><span class="line">이미 개발이 다 완료돼서 더이상 발전이 없는 나라에서 산다고? 나는 미국이 정말 살기 좋은 나라라고 생각했는데 그게 끝이라면? 미래가 현재와 똑같다면?</span><br><span class="line">그럼 국민들의 행복지수는 지금이 사상 최대치가 아닌가? 이 이상 행복할 수 없는 최대한계치에 도달한 거 같은데??</span><br><span class="line">개발도상국이 더 행복지수가 높다는 걸 얼핏 들었던 거 같은데 그 이유가 여기서 나오는 게 아닐까? 그들에게는 앞으로 끊임없는 발전이 있을 것이기 때문에?? (물론 모든 국민이 그렇게 생각하는 것은 아니겠지만...)</span><br><span class="line"></span><br><span class="line">난 선진국을 developed(개발이 완료된) 상태라고 생각해서 이름을 지었다는 것부터 그 이름을 지은 사람이 얼마나 쉽게 만족하는지 알 수 있을 것 같다. (정말 심각하게 표현하자면 무능하다고 까지 생각이 든다.)</span><br><span class="line">여기서 끝내버린다고? 그럼 후대의 자손들은? 우리들의 미래는? 그런 것도 생각하지 않고 저런 단어를 썼단 말인가?</span><br><span class="line">물론 선진국이라고 해서 발전이 없는 것은 아니지만 저런 단어를 보면 &quot;아 우리 할만큼 했어~&quot;라고 생각해서 금방 다른 나라에 역전될 것만 같아 불안하다.</span><br><span class="line">나는 한국이 선진국(developed)일지는 몰라도 마인드 만큼은 개발도상국(developing)을 지녔으면 좋겠다.</span><br><span class="line">나만 해도 이미 developed 상태라고 생각해서 공부를 멈추고 마땅한 노력 없이 그냥 토스에 평생 직장으로 천년만년 살아야지~ 란 생각을 가지기 시작하면 너무나 위험할 것 같다. (물론 그 안에서 다양한 챌린지를 통해 성장하긴 하겠지만...)</span><br><span class="line">아직도 주니어라고 생각하고(연차가 많지도 않고, 내가 생각한 미래와 현실 사이의 나의 기술 역량의 괴리감은 엄청나기 때문에...) 여기가 나의 최대치라고 생각하면 너무나 비참해진다.</span><br><span class="line">인생에 있어 큰 행복이나 취미도 없고 그나마 만족감을 느끼는 일과 성장에 있어서 이게 최대치라고 하면 앞으로 나는 어디서 행복을 찾는단 말인가...? (아직 자신에 대한 불만족이 너무 커서 행복하지가 않다.)</span><br><span class="line">내가 행복감을 느낄 만한게 크게 없기 때문에 그나마 행복/만족감을 느끼는 측면에서 계속 developing을 해야 내가 지속가능한 삶을 살 수 있을 것 같다.</span><br><span class="line">그걸 위해서는 끊임없이 comfort zone을 의식적으로 벗어나려고 노력을 해야할 것 같다. </span><br></pre></td></tr></table></figure><p>피터 틸(작가)은 <code>대부분의 사람은 글로벌화가 미래를 결정할 것이라고 생각하지만, 기술이 더 중요</code>하다고 말한다.<br>만약 글로벌화가 미친듯이 진행되어 중국&#x2F;인도의 인구가 미국 사람들처럼 똑같이 에너지를 쓴다면 에너지는 고갈될 것이고 지구의 환경은 더더욱 빠르게 황폐화될 것이기 때문이다.<br>또한 <code>시간이 흐른다고 해서 자연스레 새로운 기술이 나타나는 것도 아니다</code>.<br>과거 오스트랄로피테쿠스 시절을 생각해보면 얼마나 발전이 더뎠는가? 그런 사회에서 성공은 남의 것을 빼앗는 것 뿐이다. (영토 전쟁 등등)<br>그러다 점점 시간이 흐르면서 원시시대의 농경, 중세의 풍차 등등의 간헐적인 진보만 있다가 1760년대에 증기기관이 출현하면서 폭발적 진보가 있었다.<br>이런 폭발적인 진보가 1970년대까지 이어진 결과 우리는 미래는 더 진보된 미래가 돼있으리라는 사실을 믿게 되었다.<br>하지만 그런 일들은 일어나지 않았으며 최근까지의 진보는 대부분 컴퓨터&#x2F;통신 분야가 주를 이루었다.<br>저절로 세계가 더 나은 미래로 간다는 믿음은 잘못된 사실이었던 것이다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 뭐 에너지 처럼 희소성이 있다거나 지구 환경에 피해를 끼치는 요소 말고도 글로벌화의 종말은 더이상 발전없는 미래가 될 것 같기도 하다.</span><br><span class="line">지구의 모든 인구에게 글로벌화가 진행됐다면 그 이후는? 출산률이 더더욱 줄어들 게 될 미래에는?</span><br><span class="line">결국 글로벌화도 중요하지만 그보다 중요한 건 기술인 것 같다.</span><br><span class="line">그리고 그 기술을 그냥 막연하게 언젠가는 이런 세상이 오겠지~ 라고 천하태평한 마인드로 살아가는 것도 잘못된 믿음인 것 같다.</span><br><span class="line">나만해도 초등학생 때 2030년을 생각하면서 그림을 그려보라고 학교에서 시키면 날아다니는 자동차를 타겠지~ 같은 뻔한 그림을 그렸다.</span><br><span class="line">아직 2030년이 되려면 8년이 남긴 했지만 가까운 미래로 다가오자 그게 현실성이 있다고 생각이 되는가?</span><br><span class="line">결국 그런 혁신이 오려면 더 많은 시간이 걸리거나 아니면 그러한 시간을 앞당길만한 더 대단한 혁신들이 쏟아져나와야 할 것 같다.</span><br><span class="line">하지만 그런 미래는 이런 안일한 태도로는 절대 오지 않으리란 사실에는 틀림이 없는 것 같다.</span><br><span class="line">근데... 그럼 나는 어떻게 살아가야하는가?</span><br><span class="line">그냥 맨날 하던대로 자바(코틀린)/스프링(부트) 써서 개발하고 살아가는데... 미래를 혁신시킬만한 다른 기술들(오픈소스, 라이브러리/프레임워크 등등)을 만들어내야하는가?</span><br><span class="line">아니면 지금 내가 쓰고 있는 기술이라고 하더라도 그 기술들로 더 새로운 기술(비즈니스)를 창출해나가야할까?</span><br><span class="line">그것만이 답일까? 토스에서 10인분을 하도록 하는 건 혁신이 아닐까?</span><br><span class="line"></span><br><span class="line">그리고 글로벌화가 꼭 1 -&gt; N일까?에 대한 고민도 해보게 되었다.</span><br><span class="line">결국 기업이 0 -&gt; 1을 해서 국내시장을 잡아먹었다 하면 세계 시장으로 눈을 돌리게 될 것이다.</span><br><span class="line">하지만 국내에서 하던대로 1 -&gt; N이 끝날까? 그만큼 단순한 일일까?</span><br><span class="line">각 나라만의 문화와 여러가지 상황들이 있을텐데 절대 아닐 것이다.</span><br><span class="line">우리나라에서는 이게 당연한 건데 그 나라에서는 아닐 수 있다.  </span><br><span class="line">이런 걸 해결해나가는 것도 어찌보면 0 -&gt; 1이 아닐까??</span><br><span class="line">그렇게 봤을 때 1 -&gt; N 안에서도 잘게 쪼개보면 무수히 많은 0 -&gt; 1이 있지 않을까?? 싶다.</span><br><span class="line">이 책에서는 글로벌화 보다는 기술에 중심을 두고 있다보니 글로벌화에 대해 개인적으로 부정적 혹은 좀 낮게 보는 경향이 있는 것 같은데 이 또한 쉽지 않은 것 같다.</span><br><span class="line">결국 큰 그림과 인생에 있어서 마인드는 0 -&gt; 1을 끊임없이 만들어내려고 해야할테고 그 안에서 자연스레 1 -&gt; N도 이뤄내지 않을까?? 싶다.</span><br><span class="line"></span><br><span class="line">이건 여담이지만 지도를 보더라도, 해외를 나가보더라도 진짜 한국만을 가지고 생각하는 것은 우물 안 개구리이다.</span><br><span class="line">그런 관점에서 보면 1 -&gt; N만 달성했다 하더라도 진짜 대단한 것이다.</span><br><span class="line">근데 0 -&gt; 1을 이뤄내는 사람은... 정말 어떤 사람들일까?? 존경심이 생긴다.</span><br></pre></td></tr></table></figure><h3 id="신생기업과-새로운-생각"><a href="#신생기업과-새로운-생각" class="headerlink" title="신생기업과 새로운 생각"></a>신생기업과 새로운 생각</h3><p>새로운 기술은 새로운 모험, 즉 무언가를 새로 시작하며 나타나는 경우가 많다고 한다.<br><code>세상을 더 나은 곳으로 변화시킨 주체는 일종의 사명감으로 똘똘 뭉친 소규모 집단들</code>이었다.<br>큰 조직에서는 새로운 것을 개발하기가 어렵고, 관료적 계급 조직은 행동이 굼뜨고, 이해관계가 잔뜩 맞물려있는 조직은 위험을 감수하지 않는다.<br>반대편 극단인 외톨이형 천재(혼자)는 예술이나 문학의 고전을 남길지는 몰라도 산업 하나를 통째로 변화시키지는 못한다. (있다 해도 매우매우매우 드물 듯)<br>즉, 신생기업이 제대로 돌아가려면 <code>실제로 뭔가 할 수 있을 만큼 작은 규모로 유지</code>되어야 한다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 전형적인 대기업의 꼰대스러움/정치/실무역량과 관계 없는 이력서,면접 때문에 큰 조직에 대한 부정적 인식은 너무나 컸다.</span><br><span class="line">하지만 내가 1인 개발자에 대해 좀 과대평가 했던 부분도 있는 것 같다.  </span><br><span class="line">1인 개발자가 매달 게임 앱을 출시해서 광고비 같은 걸로 쏠쏠하게 돈을 번다는 걸 보고 오~ 괜찮은데? 라고 생각했는데 나의 꿈이 작았던 것 같다.</span><br><span class="line">결국 그런 사람이 이 세상에 어떤 영향을 끼쳤단 말인가? 그냥 본인 혼자 만족하는 수준에 그쳤다. (뭐 내가 모르는 영향력이 있을테지만 적어도 내가 기대하는 바 보다는 작은 것 같다.)</span><br><span class="line">처음엔 혼자 시작할지 몰라도 결국 마음이 맞고 미친 듯 헌신/몰입할 준비가 된 소수의 인원들로 똘똘 뭉쳐 키워나가야하는 것 같다.</span><br><span class="line">군중 심리인가... 사람이 많으면 누군가는 하겠지? 라고 사람들이 수동적인 자세를 취하기 마련이다.</span><br><span class="line">하지만 나 말고 할 사람이 없다면? 나라도 해야한다면? 그럼 하게 된다.</span><br><span class="line">비슷한 경험을 한 적이 있는데 바로 한 사람의 퇴사로 인해 깨닫게 되었다.</span><br><span class="line">해당 팀에서 중요 인물 한 사람이 퇴사하자 다른 인원들이 더 능동적으로 바뀌었다.  </span><br><span class="line">그 사람이 하던 업무를 내가 해야되니까... 즉 너무 인원이 많으면 그 사람들이 전부 100% 이상의 실력 발휘를 하지 못하는 것 같다. (그렇다고 그 팀이 인원이 많았던 것은 아니지만 한 사람의 커버리지가 너무 넓었던 건 아닌가 싶다.)</span><br><span class="line"> </span><br><span class="line">또한 요즘 드는 생각이 토스 정도면 대기업 아닌가? 이미 고일대로 고인 것인가?</span><br><span class="line">하지만 토스에서 제품을 만들고 그 안에서 성장과 혁신을 만들어내는 속도와 규모를 보면 전혀 그렇지 않다는 생각이 들지 않는다.</span><br><span class="line">외부에서 바라봤을 때는 매출 규모라던지, 기업 가치라던지, 인원이라던지 이런 외형적으로 보이는 요소에만 집중할 수 밖에 없는데 그런 기준에서는 분명 대기업이라고 보일지 모른다.</span><br><span class="line">하지만 조직들을 잘게 쪼개어 그 안에서 수많은 스타트업처럼 일하는 형태들로 인해 곳곳에서 성장과 혁신이 지속될 수 있는 것 같다.</span><br><span class="line">그럼에도 불구하고 토스의 찐 초창기만큼은 아닐테지만... 그래도 이정도 규모에서 이정도 속도감으로 일한다는 것은 상상하기 힘들다. </span><br></pre></td></tr></table></figure><p>그리고 좀 더 극적으로 말하면 신생기업은 <code>지금과는 다른 미래를 만들기 위한 당신의 계획을 납득시킬 수 있는 최대치의 사람</code>이라고 한다.<br>또한 <code>새로운 생각이 민첩함 보다 중요</code>하다고 하는데 규모가 작아야 새로운 생각을 더 자유롭게 할 수 있다고 한다.</p><p>그리고 이 책은 특정 지식의 기록은 아니고 메뉴얼도 아니라고 한다.<br>오히려 이 책은 <code>생각하는 연습을 해보는 자습서</code>라서 <code>여러 질문에 관한 책</code>이라고도 한다.<br><code>생각</code>이야말고 신생기업이 반드시 해야할 일이고, <code>당연시 되는 생각에 의문을 제기하고 백지상태에서 다시 사업을 생각</code>해야한다고 한다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">나의 생각: 신생 기업이 단순히 소규모라고 해서 규모만 중요한 게 아닌 거 같다.</span><br><span class="line">마음 맞는 사람도 그만큼 중요하고 그 마음 맞는 사람이 얼마나 더 나은 미래로 이끌만큼 역량이 되고, 나의 계획을 미래의 다른 사람들에게 얼마나 납득시킬 수 있는가? 도 중요한 것 같다.</span><br><span class="line">이 사람이 나하고 마음이 잘 맞을 수 있다. 그래서 쿵짝쿵짝 잘 할 수 있다.</span><br><span class="line">하지만 그 다음은? 미래는? 사람이 더 들어오지 않을 것인가?</span><br><span class="line">그럼 내가 그 때도 여전히 새로운 사람을 계속 설득하고 있을 것인가? 아니면 팀원들이 설득할 것인가? 그리고 또 그 다음 미래에는?</span><br><span class="line">결국 이 물음에 대한 해답은 성장하는 조직에 있는 것 같다.</span><br><span class="line">내가 토스 초기에 입사했을 때 시니어 개발자(진짜 내 인생에 있어서 나에게 막대한 영향을 끼쳤고 진심으로 리스펙하는 분) 분께 늦은 시간에 코드리뷰를 요청하여 새벽까지 진행된 적이 여러 번 있었다.</span><br><span class="line">그 때마다 나는 너무 죄송하지만... 그래도 뽑아먹을 건 뽑아먹어야지?? 라는 생각이 들었고 어느날 힘드시진 않는지, 짜증나지는 않는지 여쭤보았다.</span><br><span class="line">그 분께서는 물론 피곤하고 힘들긴 하지만 &quot;성장하는 조직과 성장하는 문화&quot;를 만드는 과정이라고 생각한다고 하셨다.</span><br><span class="line">지금 내가 힘들지라도 이 사람을 성장시켜서 그 사람이 이제는 어엿한 1인분을 하게 되어 나의 일을 덜어준다면...?</span><br><span class="line">또한 거기서 멈추는 게 아니라 성장하는 문화까지 습득하여 다른 팀원들의 성장까지 돕는다면?</span><br><span class="line">그리고 그 팀원들마저도 성장하는 문화를 기여하는데 도움이 된다면?</span><br><span class="line">무한히 성장하는 조직이 되지 않을까??</span><br><span class="line">나는 내 팀이 이렇게 되길 바란다.</span><br><span class="line">내가 막 그렇게 훌륭한 개발자는 아니지만 그래도 마인드만큼은 훌륭한 개발자들을 따라가려고 한다.</span><br><span class="line">내가 리스펙하는 사람이 나에게 막대한 영향을 끼쳐서 과거 우리팀이 성장했던 것 만큼 나도 성장하는 팀과 문화를 만들어 정말 남들이 같이 일하고 싶어하는 팀, 개발 역량 쭉쭉 성장하고</span><br><span class="line">미친듯한 몰입감과 열정/호기심으로 똘똘 뭉친 사람들끼리 그런 팀/세상을 만들고 싶다는 열망으로 가득하다.</span><br><span class="line">이렇게 되기 위해서는 나의 팀원은 나보다도 더 훌륭한 사람들로 가득차야 나도 자극받고 그로 인해 긍정적인 효과들이 무한대로 늘어날 것이다.</span><br><span class="line">물론 이 와중에 이런 문화를 같이 만들어나가는 게 아니라 누리러만 오는 사람도 있을 것이다.  </span><br><span class="line">물론 업무 효율에는 단기적으로 없는 것보다 있는 것이 낫겠지만... 정말 내가 스타트업을 꾸린다고 했을 때 이런 사람을 잘 보고 걸러내야 할 것 같다.  </span><br><span class="line">그런 측면에서 내가 토스 문화를 누리기만 하는 사람은 아닌지... 약간은 뜨끔하다.</span><br><span class="line"></span><br><span class="line">그리고 이 책이야말로 정말 비판적 책읽기를 권장하고 있었는데 역시 나의 낮은 독해능력으로 인해 그 중요도를 간파하지 못했다.</span><br><span class="line">당연시 되는 생각에 의문을 제기하고... 이거 정말 중요하다.</span><br><span class="line">지금 그렇게 책을 읽고 정리하니까 20페이지 읽는데만 4시간이나 걸리는 것 같다...</span><br><span class="line">또한 비판적 책읽기를 더 넓히면 책읽기에서 그치는 게 아니라 비판적으로 사고하기로 실생활에 옮길 수도 있다.</span><br><span class="line">이걸 정말 잘 하는 사람은 토스팀 리더인 승건 님 같다.</span><br><span class="line">승건 님과 많은 대화를 해보거나 승건 님에 대해 잘 아는 것은 아니지만, 미팅을 한 번 했을 때 나는 너무나 당연하고 절대 바뀌지 않고 이걸 할려면 너무나 많은 노력이 들어 할 엄두도 못 내고 있는 내용에 대해</span><br><span class="line">&quot;왜 그래야만 하죠? 너무 이상한데요? 이게 말이나 되는 얘기인가요?&quot;라는 얘기를 들었을 때 망치로 머리를 얻어맞은 기분이었다.</span><br><span class="line">물론 나는 디테일한 사항을 알고 있어서 더 그 내용에 대한 맥락이 많아 부정적으로 생각한 경향이 없잔아 있었겠지만, 어떻게 감히 그런 상상을 하고 그걸 입밖으로 내뱉는 용기가 있는 거지?</span><br><span class="line">진짜 이 사람 대단하다... 쩐다... 라고 생각한 순간 중 한 부분이었다.</span><br><span class="line">또한 특정 일을 두고도 나는 이걸 하면 뭐 때문에 안 되고, 어떤 민원이 있을 것이며 CS가 빗발칠 것이다 등등 안 되는 이유만 수십 수백가지를 댔었다.</span><br><span class="line">하지만 우리가 계속 그러한 태도로 나오자 한 사람은 &quot;왜 자꾸 안 되는 이유만 찾냐? 그걸 되게 하려면 어떤 이슈들을 해결하면 되는지 생각해보면 좋지 않겠냐?&quot;라는 피드백을 간접적으로 들었다.</span><br><span class="line">그 당시에도 머리에 좀 충격이 왔지만, 역시나 안 되는 이유가 너무 절대적이라 행동으로 옮기지 못했다.</span><br><span class="line">하지만 어떤 결정적 이유로 인해 그 일을 해야만 했고, 최선은 아니지만 차선책을 찾아서 어찌저찌 꾸역꾸역 진행한 경험이 있다.</span><br><span class="line">개인적으로 임팩트도 컸고 굉장히 잘 한 일이라고 생각하는데 그 때는 왜 그렇게 보수적으로 생각했는지 모른다.</span><br><span class="line">물론 아직 풀어가야할 숙제들이 많이 남아있지만, 그래도 고객 경험을 개선했다는 점에는 이견이 없기 때문에 앞으로도 이렇게 좀 비판적으로 사고하고 되게 할려면 어떻게 해야하는가?에 대해 포커싱하여 생각하고 움직여야할 것 같다.</span><br></pre></td></tr></table></figure><p>음… 생각보다 시간이 많이 걸려서 나머지 파트는 언제 작성 할 수 있을지… 이런 식으로 계속 읽어나갈 수 있을지는 고민이다.<br>(매일매일이 주말이라면 이렇게 할텐데 평일에는 이렇게까지 시간이 안 날 때가 많고, 여기에만 올인을 할 수 없으므로…)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;평상 시 독서를 거의 안 하고, 짧은 글, 짧은 영상 위주의 인스턴트 식으로 살다보니 독해능력이 엄청나게 떨어졌다.&lt;br&gt;글을 읽어도 제대로 이해하지 못하고, 한 2~3문장 이전에 읽은 글이 기억나지 않는다.&lt;br&gt;책을 읽고, 해당 책이 좋다는 사실까지는 알았는데 이 책이 그래서 하고자 하는 말은 무엇이지? 무슨 내용의 책이지?&lt;br&gt;를 남들에게 요약해서 설명해주려해도 설명할 수가 없었다.&lt;br&gt;책을 읽긴 읽었는데 그래서 뭐? 책을 읽기 전과 책을 읽은 후의 나는 어떤 변화가 있나? 어떤 발전이 있나?… 그냥 책 하나 읽었다는 자기 만족 밖에 되지 않았다.&lt;br&gt;빠르게 정보를 습득하는 것도 중요하지만, 정보가 남아있지 않다면 그 시간마저 버린 것이기 때문에 이렇게 기록이라도 하는 의식적인 노력을 들여야 조금이나마 내 자신이 개선될 것 같아 노트를 남긴다.&lt;br&gt;+로 비판적 책읽기(책에 있는 내용을 무지성으로 수용하는 게 아니라 문장 하나, 단어 하나하나가 의미하는 게 무엇인지 곱씹어보기, 작가가 헛소리 하는 건 없는지 의심해보기)를 통해 작가와 소통하며 책을 읽는 듯한 느낌을 느껴보려고 하는 것도 있음.&lt;/p&gt;
&lt;h1 id=&quot;제로-투-원-ZERO-to-ONE&quot;&gt;&lt;a href=&quot;#제로-투-원-ZERO-to-ONE&quot; class=&quot;headerlink&quot; title=&quot;제로 투 원 (ZERO to ONE)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.naver.com/bookdb/book_detail.nhn?bid=21074303&quot;&gt;제로 투 원 (ZERO to ONE)&lt;/a&gt;&lt;/h1&gt;&lt;img src=&quot;/2022/01/22/book-review-zero-to-one-part-01/book-cover.jpeg&quot; class&gt;
&lt;p&gt;참고로 나는 &lt;a href=&quot;https://book.naver.com/bookdb/book_detail.nhn?bid=8377652&quot;&gt;개정되기 이전 버전&lt;/a&gt;을 읽었음.&lt;br&gt;읽게 된 계기는 회사 동료가 이 책을 읽고 가슴이 설렜다고 함.&lt;br&gt;그래서 사내에 기증된 도서에도 있길래 읽었음.&lt;br&gt;나의 난독+독해능력이 너무 딸려서 줄을 치면서(그나마 내용을 기억하기 위한 최소한의 행위&amp;#x2F;노력) 읽고 싶었지만 회사 책이라 그러지는 못함.&lt;br&gt;그러다보니 그냥 읽기만 하고 다음날 되면 전날 내용 다 까먹음.&lt;br&gt;그러다보니 내가 이 책을 읽고 있기는 한데 남들한테 이 책이 무슨 내용이고 왜 좋고 어떤 영감을 받았는지 왜 추천하는지 하나도 설명하지 못함.&lt;br&gt;그래서 2독을 결심하고 조금이나마 노력을 들여 나의 기억력 + 독해력 향상을 위해 노트에 받아적다가 팔도 아프고, 아무 노트에 대충 정리해놓다보니 나중에 잊혀질까 아까워서 그냥 블로그에 적기로 결심함.&lt;br&gt;물론 손으로 적었을 때가 노력이 제일 많이 들어가다보니 기억이나 독해력 향상에는 도움이 많이 되는 것 같지만,&lt;br&gt;노트에 적고 또 장기보존을 위해 블로그에 또 적자니 시간도 아깝고… 시간이 무한정 한 것이 아니기 때문에 걍 블로그에 적기로 결심.&lt;/p&gt;
&lt;p&gt;참고로 이 책은 &lt;code&gt;새로운 것을 창조하는 회사를 만드는 방법&lt;/code&gt;을 다루는 책임.&lt;br&gt;따라서 스타트업 창업을 생각하거나 본인의 야망을 어떻게 실현시킬지, 어떤 생각으로 일을 하거나 인생을 살아가야하는지에 대한 도움이 될만한 책이라고 생각함.&lt;br&gt;굳이 창업 안 하더라도 성공한 사람, 혁신을 이뤄낸 사람들은 어떻게 생각하고 어떻게 행동했는지 를 통해 배울 수 있는 점이 많음.&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://perfectacle.github.io/categories/Notes/"/>
    
    <category term="독서" scheme="https://perfectacle.github.io/categories/Notes/%EB%8F%85%EC%84%9C/"/>
    
    
    <category term="독서노트" scheme="https://perfectacle.github.io/tags/%EB%8F%85%EC%84%9C%EB%85%B8%ED%8A%B8/"/>
    
    <category term="제로 투 원" scheme="https://perfectacle.github.io/tags/%EC%A0%9C%EB%A1%9C-%ED%88%AC-%EC%9B%90/"/>
    
    <category term="ZERO to ONE" scheme="https://perfectacle.github.io/tags/ZERO-to-ONE/"/>
    
  </entry>
  
  <entry>
    <title>라스베가스를 다녀오고... 5편 (feat. AWS re:Invent 2021) - 세미자 마지막 날부터 인천공항까지</title>
    <link href="https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-05/"/>
    <id>https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-05/</id>
    <published>2021-12-31T23:27:31.000Z</published>
    <updated>2022-06-06T08:23:56.480Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서 좋은 기회가 생겨 <a href="https://reinvent.awsevents.com/">AWS re:invent</a>(2021&#x2F;11&#x2F;29 ~ 2021&#x2F;12&#x2F;03)에 참석할 기회가 생겼다.<br>영어도 잘 못하고, 평상시 <a href="https://aws.amazon.com/">AWS</a>를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.<br>살면서 미국에 처음 가보는 것이다보니 <code>미국에서만 할 수 있는 걸 해보자</code>라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.<br>기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.<br>쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.</p><ul><li><a href="/2021/12/31/las-vegas-aws-reinvent-01/">1편 - 인천공항에서 세미나 첫 날까지 (11&#x2F;28 ~ 11&#x2F;29)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-02/">2편 - 세미나 둘째 날 (11&#x2F;30)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-03/">3편 - 세미나 셋째 날 (12&#x2F;01)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-04/">4편 - 세미나 넷째 날 (12&#x2F;02)</a></li><li>5편 - 세미나 마지막 날부터 인천공항까지(12&#x2F;03 ~ 12&#x2F;05) - 현재 게시물</li></ul><h2 id="용기내어-한마디라도-건네보기"><a href="#용기내어-한마디라도-건네보기" class="headerlink" title="용기내어 한마디라도 건네보기"></a>용기내어 한마디라도 건네보기</h2><p>어젯 밤 re:Play 행사를 갔다오고 나서 없던 자신감이 샘솟고 좀 더 미국에서만 경험할 수 있는 것을 경험해보고 싶다는 생각에 가득찼다.<br>그러다보니 동료 한 분과 아침식사를 하면서 무조건 외국 엔지니어들과 대화를 해보겠다는 목표를 세웠다.  </p><p>일단 테이블에 앉을 때도 2명 정도 앉아있으면서 우리한테 대답해줄 거 같은 착한 사람을 물색하였다.<br>목표를 포착하고 앉아서 말없이 우리끼리만 대화를 하였다.<br>그러다 동료가 용기내어 말을 걸었고, 알고보니 그들은 United 항공사 소프트웨어 엔지니어들이었다.<br>대충 뭔 이야기를 했던 것 같은데 잘 기억은 안 나고 ‘우리 샌프란시스코에서 너네 항공사 타고 라스베가스로 왔어~’와 같은 시덥잖은 대화를 했던 것 같다.</p><p>그리고 나서 너무 비통했다…<br>왜 시덥잖은 얘기 밖에 하지 못하는 것일까…<br>그 시덥잖은 얘기마저도 왜 이리 하기 힘든 걸까…<br>글로벌 트렌드, 외국인들은 어찌 생각하는지, 그들은 어떻게 일하는지, 어떤 기술 문화를 가지고 있는지, 세계가 주목하고 있는 문제들은 무엇일지…<br>너무나 궁금했지만 차마 물어볼 수가 없었다. 물어볼 줄도 모르고 얘기해줘봤자 이해도 못할 것이기 때문이다.</p><p>이대로 가기에는 너무나 아쉬워서 밥대신 빵이랑 커피만 들고 또 목표물을 수색하였다.<br>어느정도 선해 보이는 사람들이 눈에 들어왔고 그대로 앉아서 ‘How are you?’같은 시덥잖은 안부를 물어보았다.<br>알고보니 그들은 어떤 공공기관 사람이었고 엔지니어는 아니고 매니저였다.<br>뭐 대충 한국은 정부에서 클라우드에 대한 신뢰도가 없어서 도입하기 정말 힘들다 너네 신기하다 했는데 뭐 그들도 자기네들도 정부의 제제 등등 때문에 빡세게는 못 쓴다고 했다.<br>엔지니어가 아니면 그닥 할 말이 없어서 어느 정도 얘기하다가 빠이쳤다.</p><p>이대로 가기에는 또 안타까웠다. 결국 시덥잖은 얘기 말고 한 게 없지 않은가…<br>그래서 이번에는 좀 더 전략적으로 다가갔다.<br>리인벤트 참석자들이 메고 있는 목걸이는 검은줄이면 참석자, 노란줄이면 AWS 직원이었다.<br>그래서 한 번 노란줄을 공략해보기로 했고 마침 혼자 밥먹고 있는 사람이 눈에 들어와서 두리번 거리는 척 하다 가서 앉았다.<br>또 시작은 밥먹는 척 하다가 ‘How’s Going?’ 같은 시덥잖은 안부 인사로 시작하였다.<br>그리고 대화하다보니 그는 AWS의 솔루션 아키텍트였고, 한 기업의 M&amp;A 때문에 기술적인 컨설팅 같은 걸 해주고 있다고 하였다.<br>토스페이먼츠도 LGU+의 전자결제사업부와 M&amp;A를 진행했기 때문에 공통점이 있다고 판단하여 옳다구나 싶어 허접한 영어를 막 내뱉었다.<br>그들의 구닥다리 시스템 때문에 일일이 배포하고 롤백도 수기로 하다가 장애가 난 사례를 얘기해주었다.<br><code>Server 1 deploy, server 2 deploy, server 3 deploy... oh bug has occured! server 1 rollback, server 2 rollback, then they said rollback is done! but sometimes bug still occured!</code><br>진짜 occured 어떻게 발음해야하는 건지, 장애를 버그라고 얘기하면 되는 건지, 롤백이 완료되었다는 뭐라고 얘기해야하는 건지, 여전히 장애는 발생한다는 걸 영어로 뭐라고 얘기해야하는 건지…<br>무지성으로 랩하듯 그냥 말했다, 뭐라도 그와 공감대를 형성해야 기술적인 주제로 얘기를 이어나갈 수 있을 것 같았다.<br>다행히 바디랭귀지와 서버1 서버2 서버3의 임팩트가 있었는지 그도 웃으면서 내 얘기에 공감해주었다.<br>그리고 우리가 닥친 상황(레거시 시스템을 신규 시스템으로 마이그레이션)들을 얘기하면서 <code>Strangler Fig</code> 패턴에 대해 말해주며 점진적으로 기능을 마이그레이션 하는 것에 대해 설명해주었다.<br>뭔 소린지 잘 몰랐지만 Strangler Fig 패턴에 대한 세션을 들을 수 있었는데 너무 피곤해서 안 들었던 과거가 후회되었다.<br>그리고 용기내면 이렇게 조그만 인사이트라도 얻을 수 있는 사람이 존재하는데… 영어를 한다면?? 얼마나 큰 인사이트를 얻을 수 있는 기회가 여기 라스베가스에 있었던 것일까… 정말 비통했다.</p><p>이렇게 한바탕 외국인과 얘기를 해보고 나니 정말 한국만큼 핸디캡을 가지고 사는 나라도 없는 것 같았다. (다른 아시아인들은 잘 모르겠지만…)<br>국적을 빼놓고 보면 영어를 할 줄 알면 국적은 중요하지 않았다.<br>그들은 리모트로 일하면서 서로 다른 국가에 있는 사람들과 협업하고 리인벤트에 와서도 서로의 국가가 중요한 게 아니라 그냥 대화를 하면 되는 거였다.<br>하지만 우리는 <code>Where are you from?</code> 같은 게 필수 질문이 되었다.<br>그게 뭐가 중요한가? 그들이 어떤 환경에서 일하고 어떤 생각으로 일하고 어떤 문제를 얼마나 나이스하게 푸는 것이 중요한 건데…<br>정말 한국만 빼놓고 위아더월드로 그들만의 리그가 형성된 것 같았다.<br>그리고 한국 사람들을 보면 진짜 한국사람 끼리끼리 몰려다니고 그런 문화 자체가 다른 외국인들이 다가오기 힘들게 하는 문화같아 보이기도 하였다.<br>그냥 멀리서 뭉쳐다니는 사람 보면 ‘아 한국인인가보다…’하고 생각이 들 정도였다.</p><p>한국의 문화가 유독 뭉쳐다니는 거 좋아하는 것 같은데 이런 문화는 버려야할 문화…까지는 아닌데 좀 약해져야할 필요가 있다고 본다.<br>그렇기 때문에 용기내어 누군가에게 다가가기도 힘들고, 그 조직 외에 있는 사람이 들어오기도 힘든 문화인 것 같다.<br>그리고 영어 교육 진짜 뜯어고쳐야하는 것 같다.<br>말하기&#x2F;듣기 위주로 가르쳐서 진짜 영어 할 줄만 알면 한국인들도 엄청난 메리트를 타고 나는 것이라고 본다.<br>번역기가 아무리 발달됐다고 해도 해외에서 로밍 제대로 안 터지고, 음성 인식 제대로 안 되고 그걸로 대화하다가 맥이 끊긴다.<br>그냥 관광지 가서 바디랭귀지 하는 수준 밖에 번역기는 발달되지 않은 것 같다.<br>정말 영어는 정말정말진짜진짜 중요하다는 것을 또 새삼 깨닫게 되었다.</p><h2 id="라스베가스의-한-청년-래퍼"><a href="#라스베가스의-한-청년-래퍼" class="headerlink" title="라스베가스의 한 청년 래퍼"></a>라스베가스의 한 청년 래퍼</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/WzhFZdWnyYc" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>아침 식사를 마치고 세션을 들으러 가던 도중 육교에서 색소폰을 불고 있는 사람을 만나게 되었다.<br>평상시 재즈힙합도 좋아해서 이 공연도 꽤 즐겁게 들었다.<br>비트는 내 스타일이었지만 목소리는 조금 앵앵대는 느낌이 있어서 영 내 스타일은 아니었지만 굉장히 좋은 경험이었다.<br>물론 뭐라고 하는지는 못 알아들었다. (아이스크림 같은 건 들렸다.)</p><h2 id="세일즈포스-부스에-방문하다"><a href="#세일즈포스-부스에-방문하다" class="headerlink" title="세일즈포스 부스에 방문하다"></a>세일즈포스 부스에 방문하다</h2><img src="/2021/12/31/las-vegas-aws-reinvent-05/sales-force.jpeg" class=""><p>밖에서 봤을 때 굉장히 이쁘게 꾸민 부스가 있었다.<br>바로 세일즈포스였는데 세일즈포스란 기업은 평상시 관심있던 기업이 아니다보니 얘네들이 무슨 문제를 풀었는지 궁금했다. (굿즈도 받을 겸…)<br>근데 보다보니 세일즈포스가 슬랙도 인수했다는 사실을 이 때 알게 되었다.<br>대충 보니까 쇼핑몰 같은 거 만들기 쉽게하는 솔루션들이랑 뭐 여러가지 있어보였는데 크게 눈에 들어오는 건 없었다.<br>영어만 된다면 더 물어보고 싶었는데… 역시나 영어가 안되니 뭘 더 물어보고 싶어도 물어볼 수가 없었다.</p><h2 id="다시-관광모드로…"><a href="#다시-관광모드로…" class="headerlink" title="다시 관광모드로…"></a>다시 관광모드로…</h2><p>마지막 날이라 그런지 들을만한 세션이 얼마 없기도 하고 점심 장소로 이동을 하면서 주변 관광지들을 둘러보았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-05/las-vegas-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-05/las-vegas-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-05/las-vegas-03.jpeg" class=""><p>한국으로 치면 먹자골목 같은 분위기가 나는데 또 라스베가스 만의 분위기가 나서 신기했다.<br>한편으로는 평일 낮에 이런데 오는 사람들은 뭐하는 사람일까… 이 사람들도 휴가내고 놀러온 사람일까… 싶었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-05/in-n-out.jpeg" class=""><p>계속 가다보니 인앤아웃 버거집도 보였다.<br>점심 예약을 하지 않았더라면 한 번 먹어봤을 법 한데… 좀 아쉬웠다.</p><h2 id="플라밍고가-살고-있는-플라밍고-호텔"><a href="#플라밍고가-살고-있는-플라밍고-호텔" class="headerlink" title="플라밍고가 살고 있는 플라밍고 호텔"></a>플라밍고가 살고 있는 플라밍고 호텔</h2><img src="/2021/12/31/las-vegas-aws-reinvent-05/flamingo-01.jpeg" class=""><p>지나가다보니 <a href="https://www.caesars.com/flamingo-las-vegas">플라밍고 호텔</a>도 보였다.  </p><div class="video-container"><iframe src="https://www.youtube.com/embed/kdFoQXx7Cd0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>플라밍고 호텔은 이름에서 알 수 있듯이 실제로 플라밍고를 볼 수 있다.<br>새들이 지저귀는 소리가 마치 숲속에서 지저귀는 새들의 소리 같았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-05/flamingo-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-05/flamingo-03.jpeg" class=""><p>플라밍고 호텔도 내부에 볼만한 것들이 많으니 라스베가스에 왔으면 한 번 가볼법한 것 같다.<br>이렇게 라스베가스는 호텔마다 특색이 있어서 시간이 된다면 한번 쭉 둘러보는 것도 좋은 것 같다. (공짜로 볼만한 요소들이 많다.)</p><h2 id="고든램지가-운영하는-Pub-amp-Grill"><a href="#고든램지가-운영하는-Pub-amp-Grill" class="headerlink" title="고든램지가 운영하는 Pub &amp; Grill"></a>고든램지가 운영하는 Pub &amp; Grill</h2><img src="/2021/12/31/las-vegas-aws-reinvent-05/pub-n-grill-01.jpeg" class=""><p>회사 동료 분이 예약해주셔서 고든램지가 운영한다는 <a href="https://www.caesars.com/caesars-palace/restaurants/gordon-ramsay-pub-and-grill">Pub &amp; Grill</a>에서 점심을 먹게 되었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-05/pub-n-grill-02.jpeg" class="" title="우리가 먹었던 점심 코스요리"><img src="/2021/12/31/las-vegas-aws-reinvent-05/pub-n-grill-03.jpeg" class="" title="Onion &amp; Ale Soup로 추정되는 요리"><p>엄청 짰다.<br>확실히 미국 음식들은 짜다.<br>같이 갔던 사람의 말로는 이거 만드려면 무슨 양파가 카라멜 색이 될 때까지 엄청 열심히 뭐 굽는대나 해야한다고 한다.<br>노력은 가상한데 그에 비해 맛은 훌륭하지 못했다. 그냥저냥… 짠 거 빼면 좀 먹을만 했던 것 같다.  </p><img src="/2021/12/31/las-vegas-aws-reinvent-05/pub-n-grill-04.jpeg" class="" title="Classic Caesar로 추정되는 요리"><p>위에 어니언 스프가 좀 짰다면 얘랑 같이 먹으면 좀 간이 맞는 듯 했다.<br>빵이 들어가있는 샐러드인데 좀 더 힘을 준 샐러드 느낌이었다.<br>다른 동료 분께서 시켜서 먹어봤는데 맛있었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-05/pub-n-grill-05.jpeg" class="" title="Petite Roasted Beef Wellington으로 추정되는 요리"><p>이게 메인 요리였을 것이다.<br>소스 담은 것부터가 힘을 잔뜩 실은 느낌이었다.<br>확실히 고기가 고급지다는 것이 느껴졌지만 역시나 짰다.<br>짠 거 빼고는 너무나 맛있었고, 덕분에 소스는 그닥 안 찍어먹었던 거 같다.<br>미국인들이 왜 이렇게 성인병에 많이 걸리는지 알게 된 것 같았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-05/pub-n-grill-06.jpeg" class="" title="Sticky Toffee Pudding으로 추정되는 요리"><p>푸딩인 줄은 모르겠고 그냥 초코빵 같은 거 위에 아이스크림이 얹어져있었다.<br>단짠단짠 조합에 부합해보이긴 하지만 이것도 몹시나 달았던 것 같았다.<br>그래도 계속 짠 걸 먹는 것에 비해 오랜만에 달달한 걸 먹으니 먹을만 했다.<br>맛은 좋았다. (좀 많이 달았던 거 같긴 하지만…)</p><h2 id="시저스-호텔과-미라지-호텔"><a href="#시저스-호텔과-미라지-호텔" class="headerlink" title="시저스 호텔과 미라지 호텔"></a>시저스 호텔과 미라지 호텔</h2><img src="/2021/12/31/las-vegas-aws-reinvent-05/caesars-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-05/caesars-02.jpeg" class=""><p>지나가다가 또 <a href="https://www.caesars.com/caesars-palace">시저스 호텔</a>이 보여서 한 방 찍어보았다.<br>로마 황제 시저를 테마로 만든 호텔인 건지 로마의 건축문화를 본따 만든 듯한 조형물들이 많이 보였다.  </p><img src="/2021/12/31/las-vegas-aws-reinvent-05/mirage.jpeg" class=""><p><a href="https://mirage.mgmresorts.com/en.html">미라지 호텔</a>도 보았는데 폭포처럼 잘 꾸며놓았다.<br>미라지 호텔은 화산쇼가 유명하다는데 그거는 눈으로는 봤는데 사진으로 남겨놓은 거는 딱히 없다.<br>실제로 미라지 호텔 건너편에서 지나가다가 보았는데도 불길 때문에 좀 따뜻하다는 느낌이 들 정도였다.</p><h2 id="이제는-우리가-헤어져야-할-시간…"><a href="#이제는-우리가-헤어져야-할-시간…" class="headerlink" title="이제는 우리가 헤어져야 할 시간…"></a>이제는 우리가 헤어져야 할 시간…</h2><img src="/2021/12/31/las-vegas-aws-reinvent-05/in-taxi.jpeg" class="" title="막상 집에가려니 아쉬워서 택시에서 한 컷 찍어보았다."><img src="/2021/12/31/las-vegas-aws-reinvent-05/in-airplane.jpeg" class="" title="비행기 안에서 뷰가 아름다워서 한 컷 남겨보았다."><img src="/2021/12/31/las-vegas-aws-reinvent-05/bad-food.jpeg" class=""><p>샌프란시스코 공항에서 경유를 위해 기다리다가 무슨 유기농 음식점? 같은 곳에 들어가서 뭔지도 모르고 수프를 시켰는데… 웬 꿀꿀이 죽이 나왔다.<br>만원도 넘었는데 돈이 너무 아까웠고 억지로 먹다가 버렸다.<br>그리고 신기한 건 미국은 분리수거를 크게 안 하는 건지 그냥 음식물도 쓰레기통에 다 버리는 것 같았다.</p><p>마지막으로 한국으로 14시간 가량의 비행을 끝으로 이번 여행을 끝마쳤다…<br>라고 생각하기도 잠시 한국에서는 또 코로나가 빵 터지면서 입국 절차도 까다로워져 여기서만 1시간 넘게 대기했다.<br>또한 해외입국자는 코로나 검사를 무조건 받아야하는데 보건소에서 이거 기다리는 것만 2시간 반을 기다렸다…<br>한국에는 새벽에 들어왔지만 막상 집에 들어가니 점심시간이 넘었고 너무나 추웠다.<br>그리고 10일 간의 자가격리 기간동안 집에만 있으니 너무 답답했고, 다행히 음성이 나와서 그 후에는 무사히 출근할 수 있었다.</p><h2 id="AWS-re-Invent를-끝마치고나서-소감-12-x2F-03-12-x2F-05"><a href="#AWS-re-Invent를-끝마치고나서-소감-12-x2F-03-12-x2F-05" class="headerlink" title="AWS re:Invent를 끝마치고나서 소감 (12&#x2F;03 ~ 12&#x2F;05)"></a>AWS re:Invent를 끝마치고나서 소감 (12&#x2F;03 ~ 12&#x2F;05)</h2><p>정말정말정말 좋은 경험이었다. (영어를 할 수 있었더라면 배가 되었겠지만…)<br>비록 기술적 인사이트는 크게 얻지 못하였다 할지라도 내 인생에 있어서 큰 성장을 한 것 같았다.  </p><p>백날 천날 영어가 중요하다… 중요하다… 라고 듣기만 하고 영어로 된 아티클도 대충 배경지식으로 때려맞추고 소스코드로 검증해보는 식으로 했지만<br>실시간으로 사람들과 소통하려고 하다보니… 이건 정말 답이 없었다.<br>영어가 됐다면 기회의 땅 미국에서 더 많은 사람들과 대화하며 많은 인사이트를 얻어낼 수 있었을텐데 한 편으로는 아쉬웠다.  </p><p>또한 미국이라는 나라와 그 나라의 문화를 체험한다는 정말 값진 경험을 하게 되었다.<br>내가 살면서 미국이란 나라를 가볼 일이 있을까… 라는 생각으로 살아갔는데 정말 수천만원 어치의 경험을 한 것 같다.<br>내가 생각했던 미국과 직접 겪어본 미국은 달랐다.<br>미국 기업에 취업해서 미국에서 살아볼 수도 있지 않을까? 라는 생각을 가진 적이 있긴 했지만 직접 경험하고 오니 난 무조건 한국에서 살겠다고 마음 먹었다.<br>땅덩어리가 넓으니 차가 없으면 살기가 너무 힘들고(대중교통을 경험하지 않아서인지 정확한 판단은 아니겠지만), 주변 편의시설까지 가는데도 너무 힘들었다.<br>우리나라는 그냥 호텔 1층에 편의점이 있거나 주변에 널린 게 편의점인데 여기는 편의점 같은 곳을 가려면 또 호텔 밖으로 걸어서 육교랑 횡단보도를 몇 번이나 건너가야 했다.<br>그리고 편의점이라 부를법한 곳에 라면도 없었고, 내 입맛에 맞는 것은 별로 없었다.<br>팁 문화도 생소하기도 하고 얼마를 줘야할지 이런 거 고민할 필요도 없는 한국 가게들이 너무나 편해보였다.<br>그리고 길거리에는 대마초 냄새를 종종 맡을 수 있었고, 도시에 군견과 경찰을 보면 그나마 치안 좋은 게 이정도인데 여기 살려면 정말 정신을 바짝 차려야하는 것 같았다.<br>이렇게 직접 경험하고 나니 한국만큼 살기 편안하고 좋은 나라는 없다는 것을 깨닫게 되고 그런 곳은 잠깐 여행만 갔다 오고 한국에서 계속 살아야겠다는 다짐을 했다.</p><p>그리고 AWS 리인벤트를 경험하고 나서 고용 문화에 대해서도 다시 생각해보게 되었다.<br>우리나라는 노인 빈곤률이 높고 일자리도 잘 취업이 되지 않는다고 한다.<br>하지만 리인벤트에 진행 안내 요원으로 일을 했던 사람을 보면 아마 단기 아르바이트일 거 같았고, 나이가 지긋하신 분들도 많았다.<br>그런 분들이라고 해서 일을 못하는 것도 아니고 친절하게 일을 하고 즐겁게 일을 하는 것을 보니 이게 진짜 노인 공경인 건가… 고령화 사회에 기업들이 이런 일자리들을 줘야하는 것이 아닌가 하는 생각이 들었다.<br>우리나라는 유교문화라고는 하지만 말만 노인 공경하는 것 같은데 이런 실질적인 부분에서 오히려 미국이 노인 공경을 잘하는 것처럼 보였다.</p><p>또한 미국인들의 문화 중에 신기했던 게 모르는 사람한테도 인사 건네고 말을 건넨다는 것이다.<br>엘레베이터에서 처음 만난 노부부가 우리 보고 굿모닝을 시전하고, aws 리인벤트 참석하는 다른 외국인들이 너네도 리인벤트 때문에 왔냐고 물어보고…<br>심지어 아침을 먹을 때도 같은 테이블에 있었던 사람들이 우리에게 먼저 말을 걸어주기도 하였다.<br>이런 게 정인가… 싶기는 하지만 한국인들이 정이 많다 뭐 이런 얘기를 하지만 나는 차라리 이런 부분에서 정이 있다는 것을 느꼈다.<br>한국에서는 주변 이웃끼리도 인사를 잘 안 하는데 미국의 이런 문화에서는 정말 이웃끼리도 잘 지낼 것 같다는 생각이 들었다.<br>그리고 한국은 괜히 뭐 잘못 하면 ‘왜 나대냐’라는 듯한 시선이 있는데 미국에서는 이런 분위기에 대해서 굉장히 자유롭고 관대한 것 같았다.<br>그러다보니 이런 문화 속에서 더 토론이나 자유로운 의견 공유가 가능한 것 같았다.<br>그리고 MBTI에서 I(내향적)와 E(외향적)이 있는데 미국인들은 죄다 E처럼 보였다.<br>행사 진행요원 할아버지와 할머니가 춤추고 재미나게 일을하는 걸 보면 정말 일을 재미있고 신나게 하는 듯 해보였다.<br>근데 얘기하는 걸 들어보면 둘은 오늘 처음 만났거나 AWS 행사에서 처음 만난 것 같았다.<br>그들은 인생도 즐겁게 살고, 일도 즐겁게 하는 듯 해 보였다.<br>어떻게 그렇게 사는 걸까? 그건 자연스레 뿌리박힌 그들의 문화(인사를 자유롭게 건네고, 말은 먼저 건네도 이상하게 보지 않는 문화)와 관련이 있지 않을까 싶었다.</p><p>한국은 정말 살기 좋은 동네이고 치안도 짱짱맨인 동네이다.<br>하지만 사람들 간에 살아가는 방식이나 문화 측면에서는 너무 보수적인 것들은 좀 버려야할 필요가 있다고 본다.<br>그래야 더 자유로운 의사소통이 되고 다양한 의견 공유를 통해 더 나은 방향으로 나아갈 수 있으리라고 본다.<br>한국 사람들이 머리는 정말 똑똑한데 그들만의 리그에 갇혀 산다는 느낌도 들어서 글로벌 트렌드도 주도한다던지 그들과 함께 어우러져 세계를 이끌어나갈 수 있는 기업과 인재들이 더욱 더 나오길 바란다.</p><p>앞으로 인생에 다시는 이런 좋은 기회와 경험들이 주어질지 모르겠지만, 앞으로 올 기회를 잡기 위해 준비된 사람이 되어야겠다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;회사에서 좋은 기회가 생겨 &lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;AWS re:invent&lt;/a&gt;(2021&amp;#x2F;11&amp;#x2F;29 ~ 2021&amp;#x2F;12&amp;#x2F;03)에 참석할 기회가 생겼다.&lt;br&gt;영어도 잘 못하고, 평상시 &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.&lt;br&gt;살면서 미국에 처음 가보는 것이다보니 &lt;code&gt;미국에서만 할 수 있는 걸 해보자&lt;/code&gt;라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.&lt;br&gt;기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.&lt;br&gt;쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-01/&quot;&gt;1편 - 인천공항에서 세미나 첫 날까지 (11&amp;#x2F;28 ~ 11&amp;#x2F;29)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-02/&quot;&gt;2편 - 세미나 둘째 날 (11&amp;#x2F;30)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-03/&quot;&gt;3편 - 세미나 셋째 날 (12&amp;#x2F;01)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-04/&quot;&gt;4편 - 세미나 넷째 날 (12&amp;#x2F;02)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5편 - 세미나 마지막 날부터 인천공항까지(12&amp;#x2F;03 ~ 12&amp;#x2F;05) - 현재 게시물&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;용기내어-한마디라도-건네보기&quot;&gt;&lt;a href=&quot;#용기내어-한마디라도-건네보기&quot; class=&quot;headerlink&quot; title=&quot;용기내어 한마디라도 건네보기&quot;&gt;&lt;/a&gt;용기내어 한마디라도 건네보기&lt;/h2&gt;&lt;p&gt;어젯 밤 re:Play 행사를 갔다오고 나서 없던 자신감이 샘솟고 좀 더 미국에서만 경험할 수 있는 것을 경험해보고 싶다는 생각에 가득찼다.&lt;br&gt;그러다보니 동료 한 분과 아침식사를 하면서 무조건 외국 엔지니어들과 대화를 해보겠다는 목표를 세웠다.  &lt;/p&gt;
&lt;p&gt;일단 테이블에 앉을 때도 2명 정도 앉아있으면서 우리한테 대답해줄 거 같은 착한 사람을 물색하였다.&lt;br&gt;목표를 포착하고 앉아서 말없이 우리끼리만 대화를 하였다.&lt;br&gt;그러다 동료가 용기내어 말을 걸었고, 알고보니 그들은 United 항공사 소프트웨어 엔지니어들이었다.&lt;br&gt;대충 뭔 이야기를 했던 것 같은데 잘 기억은 안 나고 ‘우리 샌프란시스코에서 너네 항공사 타고 라스베가스로 왔어~’와 같은 시덥잖은 대화를 했던 것 같다.&lt;/p&gt;</summary>
    
    
    
    <category term="기타" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
    <category term="잡동사니" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88/"/>
    
    
    <category term="reinvent" scheme="https://perfectacle.github.io/tags/reinvent/"/>
    
    <category term="여행" scheme="https://perfectacle.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>라스베가스를 다녀오고... 4편 (feat. AWS re:Invent 2021) - 세미나 넷째 날</title>
    <link href="https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-04/"/>
    <id>https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-04/</id>
    <published>2021-12-31T21:28:31.000Z</published>
    <updated>2022-06-06T08:23:56.448Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서 좋은 기회가 생겨 <a href="https://reinvent.awsevents.com/">AWS re:invent</a>(2021&#x2F;11&#x2F;29 ~ 2021&#x2F;12&#x2F;03)에 참석할 기회가 생겼다.<br>영어도 잘 못하고, 평상시 <a href="https://aws.amazon.com/">AWS</a>를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.<br>살면서 미국에 처음 가보는 것이다보니 <code>미국에서만 할 수 있는 걸 해보자</code>라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.<br>기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.<br>쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.</p><ul><li><a href="/2021/12/31/las-vegas-aws-reinvent-01/">1편 - 인천공항에서 세미나 첫 날까지 (11&#x2F;28 ~ 11&#x2F;29)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-02/">2편 - 세미나 둘째 날 (11&#x2F;30)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-03/">3편 - 세미나 셋째 날 (12&#x2F;01)</a></li><li>4편 - 세미나 넷째 날 (12&#x2F;02) - 현재 게시물</li><li><a href="/2021/12/31/las-vegas-aws-reinvent-05/">5편 - 세미나 마지막 날부터 인천공항까지(12&#x2F;03 ~ 12&#x2F;05)</a></li></ul><h2 id="날아서-그랜드캐니언까지"><a href="#날아서-그랜드캐니언까지" class="headerlink" title="날아서 그랜드캐니언까지"></a>날아서 그랜드캐니언까지</h2><p>라스베가스에 오기 전까지만 해도 잘 몰랐는데 라스베가스와 그랜드캐니언은 가까웠다.<br>물론 차를 타고 가면 갔다 오는데 하루 종일이 걸릴 정도라서 그닥 가깝다고 느껴지지 않을지 모르지만… 미국의 땅덩어리를 생각해보면 가까운 수준인 것 같다.<br>새벽부터 차를 타고 갈 체력도 없기도 하고… 우리는 관광이 주 목적이 아닌 AWS 리인벤트가 주 목적이기 때문에 하루를 몽땅 날려버릴 수는 없었다.<br>그리고 차를 타고 가는 것도 매우 지루하기도 하고 주변 풍경도 막상 크게 볼 것이 없다고 한다.<br>그러다보니 비용이 비싸긴 하지만… (인당 56만원 정도 냈던 것 같다.)</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/helicopter-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/helicopter-02.jpeg" class=""><p>버스를 타고 헬기장까지 이동하고 나서야 뭔가 헬기를 탄다는 게 실감이 났다.<br>나는 헬리콥터하면 영화에서 밖에 보지 못했기 때문에 뭔가 양옆이 뚫려있고, 머신건 같은 게 달려있어서 굉장히 위험하다고 생각을 했다.<br>그러다보니 신체포기 각서 같은 걸 서명하고 탑승할 줄 알았는데 그런 건 없었고, 양 옆에 문도 있어서 나름 안전하였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/self-camera.jpeg" class="" title="헬기에 탑승해서 헤드셋까지 끼고 있으니 나름 파일럿 같아 보였다."><div class="video-container"><iframe src="https://www.youtube.com/embed/jkSM4MlWsKo" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>헬기가 이륙하는 장면을 찍어보았는데 정말 이때부터 실감이 제대로 났다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/hoover-dam.jpeg" class=""><p>헬기로 후버댐을 보니 진짜 미국의 대자연의 경관을 한껏 만끽할 수 있었다.  </p><img src="/2021/12/31/las-vegas-aws-reinvent-04/in-helicopter-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/in-helicopter-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/in-helicopter-03.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/in-helicopter-04.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/in-helicopter-05.jpeg" class=""><p>헬기로 이동하는 중에 절벽을 깎아 내린듯 한 비슷비슷한 풍경들이 눈에 들어왔다.<br>차로 이걸 몇시간 동안 지나갈 생각을 하면 너무 지루했을 것 같다.<br>역시 돈이 짱인 거 같다. (돈으로 시간을 살 수 있다는 말이 무엇인지 크게 체감하였다.)</p><div class="video-container"><iframe src="https://www.youtube.com/embed/QnClfLnj7jI" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>헬기에서 착륙한 후 그랜드캐니언을 한바퀴 쭉 찍어보았다. (뒤에 더 있지만 사람 얼굴들이 좀 나와서 잘랐다.)</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/grand-canyon-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/grand-canyon-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/grand-canyon-03.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/grand-canyon-04.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/grand-canyon-05.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/grand-canyon-06.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/grand-canyon-07.jpeg" class=""><p>주위를 삥 둘러보았는데 뭐 비슷한 광경이었다.<br>미국의 대자연… 우와… 한 1~2분 정도 체감한 것 같다.<br>그 이상의 감흥이 오지는 않았지만 뭐 그래도 한국에서 해볼 수 없는 경험이었고 자연들도 아름다웠기 때문에 나름 만족한다.<br>하지만 누가 또 오자고 하면 글쎄… 다시 올 정도는 아닌 것 같다.<br>그리고 이런 척박한 환경에 선인장도 자라고, 까마귀도 날아다니는 걸 보고 진짜 어디에든 생물이 존재는 한다는 사실도 신기했다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/breakfast.jpeg" class=""><p>아점 겸 해서 다과를 준비해줬다.<br>이것도 헬기 예약할 때 들어가있는 거긴 한데 여기선 뭐든 무서워서 이거 돈 안 내는 거냐고 물어보고 먹었다.<br>그리고 좀 느긋하게 먹고 싶었는데 헬기 기사가 시간 됐다고 싸갈 거면 싸가라고 재촉하였다. (물론 바람도 많이 불어서 좀 춥기도 하였다.)</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/in-helicopter-06.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/in-helicopter-07.jpeg" class=""><p>돌아가는 길에도 몇컷 찍기는 했는데 이미 오면서 본 광경이기도 하고 비슷비슷해 보여서 흥미가 좀 떨어진 상태이긴 했다.</p><h2 id="다시-일상-속으로…"><a href="#다시-일상-속으로…" class="headerlink" title="다시 일상 속으로…"></a>다시 일상 속으로…</h2><p>오전에는 관광모드로 그랜드캐니언을 갔다왔다면 오후에는 라스베가스에 온 본질인 AWS 세션 듣기에 집중했다.<br>그 중에도 넷플릭스 세션들이 인사이트 얻기 좋다는 얘기를 들어서 넷플릭스의 Keeping Netflix reliable using prioritized load shedding 세션을 들었다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/TmNiHbh-6Wg" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>발표자료는 이미 2020년 11월에 넷플릭스 테크 블로그에 올라온 <a href="https://netflixtechblog.com/keeping-netflix-reliable-using-prioritized-load-shedding-6cc827b02f94">Keeping Netflix Reliable Using Prioritized Load Shedding</a>을 토대로 제작되었다.</p><p>어떻게 하면 넷플릭스가 서비스의 품질을 더 지킬 수 있는 건지에 대한 세션 발표였다.  </p><img src="/2021/12/31/las-vegas-aws-reinvent-04/netflix-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/netflix-02.jpeg" class=""><p>나는 뒷단 서비스들이 망가졌을 때 서킷브레이커를 도입하여 장애 전파를 막는 것까지만 생각하였다.<br>하지만 트래픽이 너무 과하거나 기타 등등의 사유로 API Gateway가 힘들어한다면…? 같은 상황은 생각해보지 못했다.<br>넷플릭스는 트래픽이 하도 많아져 이런 상황까지 겪어봤을테고, 무작정 서버를 증설하는 대신 다른 방법으로 문제를 해결했다. (물론 너무 심각하면 증설해야하지만)<br>트래픽의 우선순위를 부여하여 리소스가 얼만큼 남았을테니 중요하지 않은 트래픽들은 실패로 떨구고… 하는 방식을 통해 유저의 실시간 스트리밍에는 영향이 절대 없도록 했다는 내용이다.<br>영어로 진행된 세션이니만큼 100% 이해를 하지는 못했지만, 괜히 넷플릭스가 테크 기업이 된 게 아니구나… 이런 식으로까지 생각을 해서 문제 해결을 해야하는구나… 하고 깨달았다.<br>나의 경우에도 대입해보면 결제&#x2F;환불 같은 중요 트래픽은 살리고 그 나머지 트래픽은 실패로 떨굼으로써 어떻게든 결제와 환불에는 문제가 없게 끔 트래픽에 우선순위를 정할 수도 있겠구나… 하는 생각이 들었다.</p><p>그리고 세션이 끝나고 넷플릭스 엔지니어가 질문을 받는 시간을 가졌는데… 영어를 할 줄 모르지만 괜히 주변에 가서 뭐라도 하나 더 줏어 들었다.<br>이해가 되지는 않았지만 세계적인 엔지니어와 영어로 대화하는 다른 엔지니어를 보면서… 너무 부러웠다.<br>우리가 가지고 있는 문제들은 넷플릭스 엔지니어라면 어떻게 해결했을까? 그들은 어떤 문화와 사고방식을 갖고 있길래 이런 식으로까지 기술을 도입하게 된 것일까?<br>영어를 하지 못한다는 사실이 너무나 가슴이 아팠던 상황이었다…</p><h2 id="또-다시-관광모드로…"><a href="#또-다시-관광모드로…" class="headerlink" title="또 다시 관광모드로…"></a>또 다시 관광모드로…</h2><img src="/2021/12/31/las-vegas-aws-reinvent-04/crawfish.jpeg" class=""><p>저녁은 <a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=tori-tours&logNo=221194196161">Hot N Juicy crawfish</a>에서 먹었다.<br>해산물이 나온다는 거 말고 아무것도 모른 채로 먹었는데 살짝 매콤하지만 맛있었다.<br>비닐 장갑을 껴도 그 사이로 국물이 슬쩍 들어오는 것도 같았고… 손에 냄새도 좀 벤다는 점이 단점인 것 같았다.<br>그리고 뭐 먹긴 하는데 메뉴가 계속 먹다보면 질리기도 하고 배가 막 엄청 부르지는 않았다.<br>그리고 TV에는 또 무슨 소 제압하기? 같은 대결을 하는지 카우보이들이 나와서 줄을 던져서 황소를 얼마나 빠른 시간 안에 제압하는지를 겨루는 방송이 나오고 있었다.<br>정말 미국은 카우보이 문화가 많이 발달한 것 같았다.<br>나는 스페인의 투우 같은 것만 생각했었는데 미국도 서부 시대에 카우보이 문화가 많이 발달했다고 한다.</p><h2 id="간지-터지는-흑인-드러머"><a href="#간지-터지는-흑인-드러머" class="headerlink" title="간지 터지는 흑인 드러머"></a>간지 터지는 흑인 드러머</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/Lkc9PWMQQtQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>나는 개인적으로 힙합을 좋아하고 그 중에서도 드럼의 쿵치딱 거리는 소리가 좋아 붐뱁 장르를 좋아한다.<br>그러다보니 3개월 정도 드럼을 배우기도 하였고 드럼 소리를 좋아하는 편이었다.<br>근데 우연히 길을 가던 도중에 조약하지만 드럼 요소라 불릴만한 장비를 갖추고 있고… 거기다 소울풀 한 흑인이 앉아있다?<br>이건 못 참치~란 생각으로 한 곡 연주해줄 수 있냐고 물어보자 돈을 내야 연주해준다고 하였다.<br>어디서 들었는데 ‘프로는 돈으로 말한다’라는 얘기가 있었는데 딱 그 말이 떠오르면서 프로처럼 보였다.<br>그리고 팁을 주겠다 얘기하고 바로 즉흥연주가 시작되었다.<br>흑인의 드럼연주도 기가 막혔지만 진짜 간지 터지는 포인트는 백인 노인과의 합주이다.<br>나는 둘이 팀인 줄 알았다, 근데 알고보니 백인 노인도 그냥 길가던 행인 중 한명이었다.<br>내가 생각한 예술가의 이상적인 그림이었고 정말 나의 심금을 울리는 연주였다.<br>바로 당장 귀국하자마자 드럼 레슨 끊어야겠다고 생각이 들 정도였다. (하지만 아직까지 드럼 학원은 등록하지 않았다.)<br>이런 사람들이야말로 돈을 잘 벌어야하고 잘 돼야한다는 생각에 나름 팁을 두둑히 줬던 걸로 기억한다.<br>한국에도 이런 공연들이 많아졌으면 하고 나의 심금을 울릴 수 있는 이런 연주라면 그에 대응하는 대가를 지불하고 볼 용의가 얼마든지 있다.</p><h2 id="라스베가스-속-에펠탑"><a href="#라스베가스-속-에펠탑" class="headerlink" title="라스베가스 속 에펠탑"></a>라스베가스 속 에펠탑</h2><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-03.jpeg" class=""><p>조약하지만 에펠탑을 흉내낸 관광코스가 있길래 가보았다.<br>안에 들어가는 건 공짜지만 타워 위로 올라가서 구경하는 것은 돈을 내야한다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-04.jpeg" class=""><p>진짜 라스베가스에서 카지노 빼면 섭할 정도로 어딜가나 카지노가 보였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-05.jpeg" class=""><p>우리나라도 남산타워에 사랑의 자물쇠인가 뭐시기인가… 있는데 어디가 원조인지 궁금해졌다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-06.jpeg" class=""><p>에펠타워 꼭대기까지는 엘레베이터를 타고 이동하는데 이렇게 투명하게 뻥 뚫려있어서 밖이 보인다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-07.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-08.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-09.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/eiffel-tower-10.jpeg" class=""><p>에펠타워 꼭대기에서 본 뷰도 정말 멋졌다.<br>그리고 뜻밖에 다른 외국인 커플이 프로포즈하는 장면도 보았다.<br>결혼하려면 이정도 되는 근사한 곳에 와서 반지 주면서 프로포즈를 해야 결혼할 수 있는 것 같았다.<br>여자는 감동한 듯 울먹이며 남자를 끌어안았다. (이 순간 모두가 박수를 치며 축하해주었다.)<br>근데 여기서 또 재밌는게 남자&#x2F;여자 둘 만 있던 게 아니라 남자 측 엄마로 추측되는 사람도 함께 있었다는 사실이다.<br>우리나라로 치면 시어머니 앞에서 남자가 프로포즈를 한 건데… 마마보이인가? 이 생각도 살짝 들기도 하면서 문화 충격이었다.<br>한국에서 좀 과장해서 막장드라마 시나리오였다면 시어머니가 ‘네가 우리 애를 벌써부터 잡는구나 잡아?’하는 시나리오도 연출될 수 있을만한 그림이었다.<br>하여튼 미국이란 동네는 참으로 신기했다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/wtcCM90n2Ck" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>에펠타워의 하나의 장점은 벨라지오 호텔의 분수쇼를 위에서 볼 수 있다는 사실이었다.<br>땅에서 보는 분수쇼도 멋있었지만 위에서 본 분수쇼는 또 달랐다.<br>땅에서 보면 1차원 적으로 밖에 보지 못해 분수가 일렬로 나열돼있는 줄 알았는데 위에서 보니 동그란 모양의 분수도 있다는 사실을 알 수 있게 되었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/ty.jpeg" class=""><p>이런 타워 아래로 내려오면 국룰처럼 기념품 가게가 있다.<br>나는 여태까지 <a href="https://shop.ty.com/">ty</a>가 <code>T</code>hank <code>Y</code>ou의 줄임말인 줄 알았는데 브랜드 로고라는 걸 처음 알게 되었다.</p><h2 id="re-Play"><a href="#re-Play" class="headerlink" title="re:Play"></a>re:Play</h2><img src="/2021/12/31/las-vegas-aws-reinvent-04/replay-01.jpeg" class=""><p>re:Play는 AWS re:Invent에서 행사 마지막 전날 밤에 진행되는 파티 같은 행사이다.<br>진짜 이건 미쳤다. 말로 설명이 안 된다. 테크 기업에서 스케일이 큰 행사를 하기도 힘든데 이렇게 넓은 대지를 빌려 파티 문화까지 만들었다고?<br>정말 정말 이건 미쳤다고 생각이 들고 아마존이란 기업에 존경심이 생겼다. </p><div class="video-container"><iframe src="https://www.youtube.com/embed/jDjWCgoqGGs" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>입구를 따라 쭉 들어오다보면 월드 디제이 페스티벌 마냥 디제이가 신나는 음악을 흔들어 제끼고 있었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/replay-dj-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/replay-dj-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/replay-dj-03.jpeg" class=""><p>그 와중에 오징어게임을 리믹스 한 음악을 틀고 있었다. 국뽕이 차오르는 순간이었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/replay-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-04/replay-03.jpeg" class=""><p>re:Play에는 탁구 등등 여러 놀이거리도 있었지만 우리는 장애물 피하기 같은 것과 팀먹고 연타하여 누가 제일 빠르게 누르나 같은 걸 해보았다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/MXpNtFt5pcY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>뭐니뭐니 해도 re:Play의 꽃은 디제잉인 것 같았다.<br>한국에서는 클럽 같은 곳을 한 번 밖에 가보지 않았고 재미도 없었지만, 시간이 흐른 탓인지 나름 재미있었다.<br>하지만 미국이라 그런지 이런 곳에서까지 대마초를 피는 사람이 있었고 정말 냄새가 역해서 토하는 줄 알았다.</p><p>대마초하니까 떠오른 건데 마약에 호기심이 있다가도 그 역한 냄새를 맡으면 호기심이 싹 사라진다.<br>라스베가스에서도 특정 길거리를 지나가거나 하면 항상 역한 대마초 냄새가 났다.<br>처음에는 몸 한 3주간 안 씻은 노숙자 몸에서 나는 냄새인 줄 알았는데 대마초 냄새였다.<br>정말 그정도로 역하고 미국이란 나라에 한 번 더 충격을 받게 된 계기였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-04/replay-t-shirt.jpeg" class=""><p>행사가 끝날 때 쯤 나오면 사람이 몰릴 것 같아 미리 나오면서 또 어디 줏어먹을 거 없나… 두리번 거리는 하이에나처럼 돌아다니다가 티셔츠를 득템하였다.<br>행사 막바지라 그런지 필요한 만큼 다 가져가라고 해서 진짜 한 10장은 들고 온 것 같았다.<br>2장은 집에서 잠옷으로 요긴하게 쓰고 있고, 나머지는 회사 동료들에게 뿌렸다.</p><h2 id="세미나-넷째-날까지의-소감-12-x2F-02"><a href="#세미나-넷째-날까지의-소감-12-x2F-02" class="headerlink" title="세미나 넷째 날까지의 소감 (12&#x2F;02)"></a>세미나 넷째 날까지의 소감 (12&#x2F;02)</h2><p>아침 일찍부터 스케쥴을 시작해서 밤 늦게까지 놀다보니 하루가 참 길었다.<br>확실히 그랜드캐니언을 보니 미국은 자연도 그 나라에 일부분인 것 마냥 엄청난 스케일을 자랑하였다.<br>캠핑 같은 거 좋아하는 사람한테는 천국일 거 같다는 생각이 들었다.<br>또한 넷플릭스라는 기업의 기술역량에 다시 한 번 존경심이 생겼다.<br>평상시 <a href="https://github.com/Netflix/Hystrix">Hystrix</a>니 <a href="https://github.com/Netflix/zuul">Zuul</a>이니 여러 오픈소스를 만들 정도의 기업이라 기술 중심 기업이라는 것은 어느정도 알고 있었는데 역시나 스케일이 다른 것 같았다.</p><p>그리고 넷째 날이 정말 제대로 라스베가스를 즐겼다는 생각이 들었다.<br>간지 폭발하는 흑인 드러머를 만난 건 내 인생에 있어서 잊을 수 없었다.<br>또한 re:Play라는 미친 파티를 경험하고 나서 아마존에 대한 존경심이 샘솟았다.</p><p>내일만 버티면 된다는 생각에 이제 좀 마음이 놓이는 날이었다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;회사에서 좋은 기회가 생겨 &lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;AWS re:invent&lt;/a&gt;(2021&amp;#x2F;11&amp;#x2F;29 ~ 2021&amp;#x2F;12&amp;#x2F;03)에 참석할 기회가 생겼다.&lt;br&gt;영어도 잘 못하고, 평상시 &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.&lt;br&gt;살면서 미국에 처음 가보는 것이다보니 &lt;code&gt;미국에서만 할 수 있는 걸 해보자&lt;/code&gt;라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.&lt;br&gt;기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.&lt;br&gt;쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-01/&quot;&gt;1편 - 인천공항에서 세미나 첫 날까지 (11&amp;#x2F;28 ~ 11&amp;#x2F;29)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-02/&quot;&gt;2편 - 세미나 둘째 날 (11&amp;#x2F;30)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-03/&quot;&gt;3편 - 세미나 셋째 날 (12&amp;#x2F;01)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4편 - 세미나 넷째 날 (12&amp;#x2F;02) - 현재 게시물&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-05/&quot;&gt;5편 - 세미나 마지막 날부터 인천공항까지(12&amp;#x2F;03 ~ 12&amp;#x2F;05)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;날아서-그랜드캐니언까지&quot;&gt;&lt;a href=&quot;#날아서-그랜드캐니언까지&quot; class=&quot;headerlink&quot; title=&quot;날아서 그랜드캐니언까지&quot;&gt;&lt;/a&gt;날아서 그랜드캐니언까지&lt;/h2&gt;&lt;p&gt;라스베가스에 오기 전까지만 해도 잘 몰랐는데 라스베가스와 그랜드캐니언은 가까웠다.&lt;br&gt;물론 차를 타고 가면 갔다 오는데 하루 종일이 걸릴 정도라서 그닥 가깝다고 느껴지지 않을지 모르지만… 미국의 땅덩어리를 생각해보면 가까운 수준인 것 같다.&lt;br&gt;새벽부터 차를 타고 갈 체력도 없기도 하고… 우리는 관광이 주 목적이 아닌 AWS 리인벤트가 주 목적이기 때문에 하루를 몽땅 날려버릴 수는 없었다.&lt;br&gt;그리고 차를 타고 가는 것도 매우 지루하기도 하고 주변 풍경도 막상 크게 볼 것이 없다고 한다.&lt;br&gt;그러다보니 비용이 비싸긴 하지만… (인당 56만원 정도 냈던 것 같다.)&lt;/p&gt;
&lt;img src=&quot;/2021/12/31/las-vegas-aws-reinvent-04/helicopter-01.jpeg&quot; class&gt;</summary>
    
    
    
    <category term="기타" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
    <category term="잡동사니" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88/"/>
    
    
    <category term="reinvent" scheme="https://perfectacle.github.io/tags/reinvent/"/>
    
    <category term="여행" scheme="https://perfectacle.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>라스베가스를 다녀오고... 3편 (feat. AWS re:Invent 2021) - 세미나 셋째 날</title>
    <link href="https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-03/"/>
    <id>https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-03/</id>
    <published>2021-12-31T20:42:31.000Z</published>
    <updated>2022-06-06T08:23:56.444Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서 좋은 기회가 생겨 <a href="https://reinvent.awsevents.com/">AWS re:invent</a>(2021&#x2F;11&#x2F;29 ~ 2021&#x2F;12&#x2F;03)에 참석할 기회가 생겼다.<br>영어도 잘 못하고, 평상시 <a href="https://aws.amazon.com/">AWS</a>를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.<br>살면서 미국에 처음 가보는 것이다보니 <code>미국에서만 할 수 있는 걸 해보자</code>라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.<br>기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.<br>쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.</p><ul><li><a href="/2021/12/31/las-vegas-aws-reinvent-01/">1편 - 인천공항에서 세미나 첫 날까지 (11&#x2F;28 ~ 11&#x2F;29)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-02/">2편 - 세미나 둘째 날 (11&#x2F;30)</a></li><li>3편 - 세미나 셋째 날 (12&#x2F;01) - 현재 게시물</li><li><a href="/2021/12/31/las-vegas-aws-reinvent-04/">4편 - 세미나 넷째 날 (12&#x2F;02)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-05/">5편 - 세미나 마지막 날부터 인천공항까지(12&#x2F;03 ~ 12&#x2F;05)</a></li></ul><h2 id="미국의-원할머니-보쌈이-AWS에서-발표를-한다고-12-x2F-01"><a href="#미국의-원할머니-보쌈이-AWS에서-발표를-한다고-12-x2F-01" class="headerlink" title="미국의 원할머니 보쌈이 AWS에서 발표를 한다고?? (12&#x2F;01)"></a>미국의 원할머니 보쌈이 AWS에서 발표를 한다고?? (12&#x2F;01)</h2><p>요번 리인벤트에서는 특정 서비스에 딥다이브 하기 보다는 좀 더 추상적인 ‘아키텍처’ 관점의 세션들을 많이 들어보았다.<br>내가 AWS의 서비스에 대한 이해도가 낮기도 하다보니 내 소스코드에도 적용 가능한 추상적인, 이론적인 내용들은 무엇이 있을까?하다보니<br>이벤트 드리븐, 클라우드 네이티브, 모던, next generation 뭐 이런 키워드 있는 것들을 주로 들었던 것 같다.<br>하지만 영어가 되지 않아 대부분 이해가 되지 않던 와중 나를 충격에 빠뜨린 세션이 있었다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/U5GZNt0iMZY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Building next-gen applications with <code>event-driven</code> architectures라는 세션이었는데 이벤트 드리븐에 꽂혀서 신청했던 세션이다.<br>나는 당연히 테크 기업이 나와서 발표를 하겠거니… 라고 생각했는데 <a href="https://www.tacobell.com/">타코벨</a>에서 나와서 발표를 하였다.<br><code>잠깐만... 타코벨?? 타코... 그 멕시코 음식 파는 기업 아니야??</code><br>라는 생각이 뇌리를 스쳐지나갔다.<br>우리나라로치면 원할머니 보쌈이 AWS 리인벤트에 나와서 이벤트 드리븐 아키텍쳐로 자기네들이 가진 문제를 풀었다고 하는 것이다.<br>말이 되는가? 원할머니 보쌈은 음식이 메인이고 기껏해야 배민이나 쿠팡이츠, 요기요 같은 플랫폼 기업에 음식점 등록하고 수수료 떼는 게 끝 아닌가?<br>우리나라에서 푸드 테크기업이라고 불리면서 직접적으로 음식을 만들어 파는 곳이 있는가? 라고 했을 때 떠오르는 곳이 없었다.  </p><p>그래… 타코벨에서 AWS를 어찌저찌 썼다고 치자… 그래서 그들은 무슨 문제를 풀었던 걸까??</p><img src="/2021/12/31/las-vegas-aws-reinvent-03/tacobell-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-03/tacobell-02.jpeg" class=""><p>미국의 슈퍼볼 같은 행사의 TV 광고를 한 번 때리면 주문량이 미친 듯이 폭주한다는 것이다.<br>그래서 그들은 배달기사 &#x2F; 음식점 &#x2F; 고객 사이에서 발생하는 상호작용 사이에서 이벤트 드리븐을 적용했다는 것이다.<br>그것도 서버리스로!! 그래서 미친듯이 폭발하는 트래픽을 견뎌낼 수 있었다고 한다…</p><p>이들은 배민 같은 중간 플랫폼 사업자들을 끼지 않고 직접 배달을 하고 있었고, 음식점 포스에도 기술을 도입했다.<br>생각이나 해보자… 월드컵 경기 중간에 TV에서 네네치킨 광고를 한다고 네네치킨에서 이벤트 드리븐 아키텍쳐를 상상이나 할 수 있을까?<br>그냥 배민 같은 곳이 안 터지길 빌어야하는 것이다.  </p><p>이걸 보고 또 느낀 점이 있었다…<br>역시 사업은 글로벌로 해야하는구나… 그래야 어떤 비즈니스도 돈이 될 정도의 트래픽들이 모인다는 사실이다.<br>우리나라가 미국 정도의 인구규모만 되더라도 내수시장에서 먹고 살 수 있겠지만… 이미 한국은 저출산 시대와 그 사이에 피터지는 경쟁으로 인해 거대 플랫폼 기업들이 다 뜯어먹고 있는 시장같아 보였다.<br>미국 정도 규모에서 일부만 먹더라도… 한국에서의 10%와 미국에서의 10%는 정말 하늘과 땅 차이이기 때문에 인구가 깡패라는 점도 느꼈다.<br>우리나라가 미국 정도 인구 규모에 슈퍼볼 같이 배달이 폭주할 만한 행사들이 종종 있다면… 원할머니 보쌈에서도 이벤트 드리븐 아키텍쳐를 고민할 날이 오지 않을까??</p><p>이번 세션이 나한테 큰 충격을 준 만큼 정말 질문하고 싶은 내용이 많았다.</p><ul><li>한국에서는 단순 음식점이 테크기업이 된 사례는 없는 것으로 알고 있는데 너네는 어떻게 이런 생각을 했냐? 우버이츠 이런 거 쓸법도 한데…</li><li>서버리스? 그거 쓰면 미리 서버 배포 안 해놔도 순간 미칠듯한 트래픽 버틸 수 있니? 대부분 오토스케일링이 되기 전에 피크 치고 서버 다 뻗어서 미리 2~3배 서버 증설해놓는데 서버리스는 그럴 필요가 없는 거니?</li><li>우리는 스프링을 써서 서버리스로 소스코드 관리하면 재사용성도 떨어지고, 어플리케이션 컨텍스트 띄우느라 콜드스타트도 굉장히 심할 거 같은데… 너네는 어떻게 이런 문제를 해결했니? 스프링에는 적합하지 않다고 생각하니?</li></ul><p>세션을 들은지 한참이 지난 지금에 와서도 이렇게 질문들이 생각이 나는데… 이런 질문을 할 수 없는 나의 영어 실력이 참으로 비통했다.<br>진짜… 영어를 할 줄 아는 사람이면 나 정도는 금방 제끼겠구나… 영어가 내 앞길을 막는 날이 언젠가 올 줄 알았는데 오늘이 그날이구나… 하고 느꼈다.<br>라고 말하면서 이전 포스트에서도 말했듯이 영어공부를 열심히 하지 않는 걸 보면… 어디 해커스 학원 같은데 돈이라도 쳐발라야 돈이 아까워서 공부를 할까 싶다.</p><h2 id="점점-지쳐가는-일상들…"><a href="#점점-지쳐가는-일상들…" class="headerlink" title="점점 지쳐가는 일상들…"></a>점점 지쳐가는 일상들…</h2><p>라스베가스에 온지 4일 째가 되었다.<br>그러다보니 먹고자고 세션 듣는 것들이 일상이 되었다.  </p><img src="/2021/12/31/las-vegas-aws-reinvent-03/lunch.jpeg" class=""><p>그럼에도 불구하고 aws에서 제공하는 식단들은 너무나 물렸고, 이제는 맛도 없다고 느껴지고… 얼른 육개장 사발면 한사발 얼큰하게 때리고 싶은 마음 뿐이었다…</p><img src="/2021/12/31/las-vegas-aws-reinvent-03/reflection-room-rest.jpeg" class=""><p>시차적응이 된 것도 같지만 아침부터 세션을 듣고 호텔들을 돌아다니다보면 지치는 건 마찬가지였다.<br>세션을 들어도 이해가 잘 되지 않으니 자포자기같은 심정을 먹다보니 자연스레 체력을 좀 보충하자는 생각에 또 리플렉션 룸에서 휴식을 청했다.<br>리플렉션 룸에서 쉬면서 노트북으로 Self-paced lab도 할 수 있어서 그나마 좀 내 템포대로 진행할 수 있어 편했다.</p><h2 id="소소한-행복-찾기"><a href="#소소한-행복-찾기" class="headerlink" title="소소한 행복 찾기"></a>소소한 행복 찾기</h2><p>세션을 듣기도 더이상 지치다보니 자연스레 ‘미국에서만 할 수 있는 걸 찾아보자’란 생각에 또 AWS 부스 이곳 저곳 기웃기웃 거렸다.<br>하지만 역시 언어의 장벽에 막히고 자신감이 많이 줄어들은 상태라 많은 곳을 둘러보지는 못했다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/jmgMf3VfV_Q" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>그러다 뭔가 미국에서 밖에 할 수 없는 것이 눈에 들어왔다.<br>정확한 명칭은 뭔지는 모르겠지만 카우보이 뭐시기가 아닐까… 싶다.<br>확실히 미국은 이런 카우보이 문화가 발달한 것인지 이런 놀이문화도 있는 것이 신기했다.<br>내 앞에 여러 사람들이 10초 대 초반에 떨어지는 걸 보고 나는 더 오래 버티리라는 다짐을 하고 올라타게 되었다.<br>근데 막상 찍힌 동영상을 보니 즐기기 보다는 ‘기록을 깨겠다’라는 경쟁심으로 불타있어 보였다.<br>다른 외국인들은 한손으로 타고 소리도 지르고 즐기던데… 나는 즐기러 온 게 아닌가? 라는 생각이 들었다.<br>여기까지 와서도 어떻게든 이겨보겠다는 그런 생각에 스트레스를 날려보내려면 마음을 다르게 고쳐먹어야겠다는 생각도 들었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-03/venetian-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-03/venetian-02.jpeg" class=""><p>셋째 날도 그냥 지나가다가 또 안 찍은 것 같은 공간을 몇 개 찍어보았다.<br>셋째 날은 그냥저냥 지쳐서 크게 한 건 없던 것 같다.</p><h2 id="세미나-셋째-날까지의-소감-12-x2F-02"><a href="#세미나-셋째-날까지의-소감-12-x2F-02" class="headerlink" title="세미나 셋째 날까지의 소감 (12&#x2F;02)"></a>세미나 셋째 날까지의 소감 (12&#x2F;02)</h2><p>셋째 날에도 영어의 필요성을 절실히 체감하였지만 타코벨 세션이 정말 큰 충격을 주었다.<br>일개 음식점이라고 생각했던 기업이 테크기업이 됐다고?? 이벤트 드리븐 아키텍쳐를 고민한다고??<br>우리나라에서 감히 상상이나 할 수 있겠는가? 원할머니 보쌈이나 네네치킨 같은 곳에서…??<br>왜 미국을 기회의 땅이라고 하는 건지… 왜 미국 같은 곳에 와서 경험을 해봐야하는 건지 뼈저리게 느낀 날이었다.<br>우리나라에서는 조그만 비즈니스도 스케일이 커질 수 있고, 낙후한 산업이라고 생각했던 부분들이 미국에서는 거기마저도 기술을 도입하고 클라우드 위에서 돌아간다는 것이 신기했다.<br>영어를 못해도 이정도 깨달음을 얻을 수 있는데… 영어를 할 수 있었더라면 그들에게서 얼만큼의 인사이트들을 얻어낼 수 있을까?<br>감히 상상조차 되지 않았고, 영어 할 줄 아는 사람들이 진짜진짜 너무너무 부러웠다.</p><p>그리고 셋째 날 쯤… 되다보니 한국에 가고싶어졌다.<br>첫날에는 우와~ 라스베가스다~ 주변 풍경도 너무 삐까뻔쩍하고 멋있다~ 란 생각에 가득차있었다.<br>하지만 하루 이틀 지나다보니 그런 게 일상이 되었고, 오늘도 내일도 먹고자고세션듣고 먹고자고세션듣고 반복일 걸 생각하니 지루했다. (거기다 영어까지 못하니…)<br>남들은 여행으로 힐링을 한다지만 나는 딱히 힐링이 된다는 느낌 보다는 그냥 침대에 누워서 유튜브 보는 게 더 행복했다.<br>한편으로는 내 사비를 들여 친구들과 여행을 오면 좀 다른 느낌일까… 싶기도 했다.<br>나한테 이정도면 장기여행이고, 여행에 대한 나의 가치관을 다시 생각하게 된 계기가 된 것 같아 나중에 유럽여행에 대한 것도 고민을 좀 해봐야할 것 같다.<br>살면서 유럽도 별로 가볼 일이 없어서 가보긴 할 거 같지만 과연 내 생각만큼 즐겁고 행복할지는 이번 여행을 통해 더더욱 불확실해졌다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;회사에서 좋은 기회가 생겨 &lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;AWS re:invent&lt;/a&gt;(2021&amp;#x2F;11&amp;#x2F;29 ~ 2021&amp;#x2F;12&amp;#x2F;03)에 참석할 기회가 생겼다.&lt;br&gt;영어도 잘 못하고, 평상시 &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.&lt;br&gt;살면서 미국에 처음 가보는 것이다보니 &lt;code&gt;미국에서만 할 수 있는 걸 해보자&lt;/code&gt;라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.&lt;br&gt;기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.&lt;br&gt;쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-01/&quot;&gt;1편 - 인천공항에서 세미나 첫 날까지 (11&amp;#x2F;28 ~ 11&amp;#x2F;29)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-02/&quot;&gt;2편 - 세미나 둘째 날 (11&amp;#x2F;30)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3편 - 세미나 셋째 날 (12&amp;#x2F;01) - 현재 게시물&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-04/&quot;&gt;4편 - 세미나 넷째 날 (12&amp;#x2F;02)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-05/&quot;&gt;5편 - 세미나 마지막 날부터 인천공항까지(12&amp;#x2F;03 ~ 12&amp;#x2F;05)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;미국의-원할머니-보쌈이-AWS에서-발표를-한다고-12-x2F-01&quot;&gt;&lt;a href=&quot;#미국의-원할머니-보쌈이-AWS에서-발표를-한다고-12-x2F-01&quot; class=&quot;headerlink&quot; title=&quot;미국의 원할머니 보쌈이 AWS에서 발표를 한다고?? (12&amp;#x2F;01)&quot;&gt;&lt;/a&gt;미국의 원할머니 보쌈이 AWS에서 발표를 한다고?? (12&amp;#x2F;01)&lt;/h2&gt;&lt;p&gt;요번 리인벤트에서는 특정 서비스에 딥다이브 하기 보다는 좀 더 추상적인 ‘아키텍처’ 관점의 세션들을 많이 들어보았다.&lt;br&gt;내가 AWS의 서비스에 대한 이해도가 낮기도 하다보니 내 소스코드에도 적용 가능한 추상적인, 이론적인 내용들은 무엇이 있을까?하다보니&lt;br&gt;이벤트 드리븐, 클라우드 네이티브, 모던, next generation 뭐 이런 키워드 있는 것들을 주로 들었던 것 같다.&lt;br&gt;하지만 영어가 되지 않아 대부분 이해가 되지 않던 와중 나를 충격에 빠뜨린 세션이 있었다.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/U5GZNt0iMZY&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="기타" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
    <category term="잡동사니" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88/"/>
    
    
    <category term="reinvent" scheme="https://perfectacle.github.io/tags/reinvent/"/>
    
    <category term="여행" scheme="https://perfectacle.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>라스베가스를 다녀오고... 2편 (feat. AWS re:Invent 2021) - 세미나 둘째 날</title>
    <link href="https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-02/"/>
    <id>https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-02/</id>
    <published>2021-12-31T18:06:31.000Z</published>
    <updated>2022-06-06T08:23:56.428Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서 좋은 기회가 생겨 <a href="https://reinvent.awsevents.com/">AWS re:invent</a>(2021&#x2F;11&#x2F;29 ~ 2021&#x2F;12&#x2F;03)에 참석할 기회가 생겼다.<br>영어도 잘 못하고, 평상시 <a href="https://aws.amazon.com/">AWS</a>를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.<br>살면서 미국에 처음 가보는 것이다보니 <code>미국에서만 할 수 있는 걸 해보자</code>라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.<br>기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.<br>쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.</p><ul><li><a href="/2021/12/31/las-vegas-aws-reinvent-01/">1편 - 인천공항에서 세미나 첫 날까지 (11&#x2F;28 ~ 11&#x2F;29)</a></li><li>2편 - 세미나 둘째 날 (11&#x2F;30) - 현재 게시물</li><li><a href="/2021/12/31/las-vegas-aws-reinvent-03/">3편 - 세미나 셋째 날 (12&#x2F;01)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-04/">4편 - 세미나 넷째 날 (12&#x2F;02)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-05/">5편 - 세미나 마지막 날부터 인천공항까지(12&#x2F;03 ~ 12&#x2F;05)</a></li></ul><h2 id="어느정도-익숙해지기-시작한-세미나-둘째-날"><a href="#어느정도-익숙해지기-시작한-세미나-둘째-날" class="headerlink" title="어느정도 익숙해지기 시작한 세미나 둘째 날"></a>어느정도 익숙해지기 시작한 세미나 둘째 날</h2><img src="/2021/12/31/las-vegas-aws-reinvent-02/morning-road.jpeg" class=""><p>베네시안 호텔에 아침부터 키노트가 있어서 이동을 하였다.<br>그래도 반복되는 길을 이틀 동안 왔다갔다 하다보니 도시의 풍경과 길들이 익숙해지기 시작했다.<br>또 신기한 것은 라스베가스 호텔 근처에서는 24시간 내내 음악 소리가 들리는 것 같았다.<br>밤에는 시끄러운 음악이 들렸던 것 같은데 아침에는 또 잔잔한 음악이었나… 여튼 분위기에 맞는 음악이 길거리에 울려퍼지는 게 신기했다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/breakfast.jpeg" class="">  <p>어제만 해도 김치나 라면이 마려웠는데 잠자고 일어나니 그새 까먹고 빵보니 또 눈이 돌아가서 두 개나 집었다.<br>약간 좀 과하게 집었나… 생각이 들어 뒤를 쳐다봤는데 외국인들도 빵은 하나만 집고 있었다.<br>평상시에 아침도 잘 먹지 않는데 두개는 역시나 과했는지 한 개 밖에 먹지 못했다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/band.jpeg" class=""><p>아침을 먹고 키노트 세션을 들으러 갔는데 대기시간에 유명한지 안 유명한지 모르겠는 밴드가 공연을 하였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/key-note.jpeg" class=""><p>키노트가 시작되어 연설을 했고 내가 샌프란시스코 - 라스베가스로 이동할 때 탔던 United 항공사라던지 나스닥 거래소라던지 이런 기업들이 어떻게 AWS를 사용해서 문제를 해결했는지 설명해주었다.<br>영어라서 뭔소린지 제대로 못 알아듣고, 그냥 그런갑다~란 생각으로 듣곤 했다.<br>나중에 알고보니 키노트는 동시통역을 제공해줬다고 한다.<br>근데 다른 키노트에서 들어보았는데 헤드셋이 너무 압박해서 귀가 아픈데 막상 주변 잡음은 다 들렸다.<br>그리고 영어를 한국어로 통역하다보니 어순이 맞지 않아 발표자가 한참 말하고 나서 한국어로 따다다다 통역을 하는 경우도 생겼고,<br>무엇보다 통역하는 사람이 엔지니어가 아닌 거 같은 게 통역의 퀄이 썩… 좋지 않았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/dj.jpeg" class=""><p>키노트가 끝나서 또 다른 세션 장소로 이동 중이었는데 아침부터 DJ는 열일하고 있었다.<br>어제 저녁에도 다른 DJ가 있었던 것 같은데 아마 몇교대를 계속 돌리는 것 같았다…</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/toss-payments.jpeg" class=""><p>그리고 칠판같은 공간에 여러 낙서가 있었고 기업을 홍보하는 듯한 문구도 있었다.<br>나는 악필이라 딱히 적지 않았고 동료 분께서 회사명을 적은 걸 기념해서 한 컷 찍어보았다.<br>(가끔 이렇게 영어 속에 다른 한글로 된 기업들의 문구를 보면 뭔가 반갑고 신기했다.)</p><h2 id="코로나-검사를-받기-위한-여정"><a href="#코로나-검사를-받기-위한-여정" class="headerlink" title="코로나 검사를 받기 위한 여정"></a>코로나 검사를 받기 위한 여정</h2><p>코시국이다보니 입국할 때도 코로나 PCR 음성 검사 확인서가 있어야했다. (물론 출국할 때도 영문으로 된 확인서가 필요하기에 한국에서 8만원 가량을 내고 민간 병원에서 진행하였다.)<br>백신 2차 접종여부에 따라 달라지지만 나는 2차 접종을 했기 때문에 출국하기 72시간 이전에 검사받은 확인서가 필요하였다.<br>금요일 저녁에 출국이기 때문에 적당히 화요일 오후에 진행하였다.<br>무료로 해주는 곳은 시간이 좀 걸려서 혹시나 출국 전까지 안 나올 가능성이 존재하여 따로 유료로 하는 곳도 알아보았는데 호텔까지 와서 검사를 해주는데 30만원 가량이 들었다.<br>리스크에 도박을 해야했지만 30만원은 좀 선넘는다는 생각에 무료로 하거나 좀 더 싸게 할 수 있는 방법을 찾아보게 되었다.<br>대부분이 드라이브 쓰루 검사 밖에 지원을 해주지 않았지만 <a href="https://book.curative.com/sites/32612">curative</a> 사이트에서 라스베가스에 Walk in(차 없이 걸어서) 검사가 가능한 곳을 찾았다.<br>혼자 리스크를 감수하기에는 좀 쫄려서 동료 한 명을 섭외하고 같이 무료로 코로나 검사 예약을 진행하였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/area15-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-02/area15-02.jpeg" class=""><p>택시를 타고 이동하였는데 이상한 자동차 전시물과 건물, 주차장 말고 코로나 검사라고 보일법한 공간이 보이지 않았다.<br>그래서 뭔가 이상하여 건물을 쭉 한바퀴 돌아도 여전히 코로나 검사 안내 표지판이 하나도 보이지 않아 직원으로 보이는 사람 아무나 붙잡고 물어보았다.<br>뭐 영어는 잘 통하지 않았지만 대충 어느 방향으로 가라 정도까지만 알아듣고 또 가다가 이해가 안 되면 주변에 있는 사람 붙잡고 물어볼 예정이었다.<br>직원이 안내한 공간으로 아무리 가도 주차장 말고 다른 큰 건물 같은 건 보이지 않았다.<br>그러다 주차장 가장 구석에 컨테이너 박스가 하나 있는 것이 보였고 거기서 코로나 검사를 진행한다는 작은 안내표시판 같은 게 있어서 그걸 보고 겨우겨우 코로나 검사를 마칠 수 있었다.<br>가끔 코로나 검사 결과가 너무 빨리 나와 72시간이라는 기준을 준수하지 못하는 경우도 있어서 일부러 해당 시간 지나서 결과가 나오게 해달라고 얘기를 하고 그 다음날 검사 결과 이메일이 날아와서 코로나 검사는 다행히 잘 끝마칠 수 있었다.</p><h2 id="세션-말고-할만한-건-뭐가-있지"><a href="#세션-말고-할만한-건-뭐가-있지" class="headerlink" title="세션 말고 할만한 건 뭐가 있지?"></a>세션 말고 할만한 건 뭐가 있지?</h2><img src="/2021/12/31/las-vegas-aws-reinvent-02/self-paced-lab.jpeg" class=""><p>세션을 계속 듣긴 듣는데 집중은 안 되고… 이해는 안 되고… 슬슬 지쳐갔다.<br>과연 세션을 무리해서 듣는 게 의미가 있을까? 라스베가스 현지에서만 할 수 있는 건 뭘까? 하고 고민하다가 찾은 게 Self-paced lab이었다.<br>들어가면 강의실에 온 거 마냥 자리에 PC(안타깝게 윈도우)들이 깔려있고 AWS 콘솔에 로그인을 하면 상황을 선택하여 AWS의 서비스들을 사용하여 해결하는 방식으로 AWS 서비스에 익숙해질 수 있게 만들어주었다.<br>들어가니 한국인 AWS 솔루션 아키텍트 사람도 있어서 간단한 대화를 나누었다. 내가 AWS를 직접 썼더라면 더 다양한 걸 물어봤을텐데 평상시 사용을 하지 않아서 궁금증이 덜 한 상태에서 만나서 별로 얘기할 껀덕지는 없었다.<br>그리고 나는 이해도가 느려서 그냥 상황 해결만 하는 것에 그치지 않고 이것 저것 설정을 바꿔보고 어떻게 동작하는지 궁금해서 뭔가 하나를 익히는데 오랜 시간이 걸리는 편이었는데 다른 일정 때문에 하나의 시나리오도 제대로 끝내지 못해 아쉬웠다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/expo-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-02/expo-02.jpeg" class=""><p>저녁 먹기 전까지 또 시간이 살짝 붕 떠서 엑스포 구경을 갔다.<br>여기서부터 진짜 영어의 필요성을 절실히 체감하였다.<br>우선 여기 있는 기업들의 이름을 처음 들어보는 것도 많았는데 그들이 풀고자 하는 문제는 무엇이고, 그들의 솔루션들을 썼을 때 얼마나 편리해지는지 궁금했다.<br>그들은 어떤 AWS 서비스들을 사용해서 문제를 해결했는지 등등 궁금한 것은 많았는데 영어가 되지 않으니 용기가 생기지 않았다.<br>그들 입장에서도 말이 통해야 설명할 맛이 나고 홍보를 할텐데 대화도 안 통하는 사람이 와서 뻘쭘하게 서있거나 제대로 질문도 못하면 뭐라고 생각할까? 란 생각이 들어 선뜻 말을 걸지 못했다.<br>그래서 그냥 낯익은 기업이 보이면 스티커 가져가도 되냐? (Can I get some stickers?)와 같은 수준의 영어만 말하고 스티커만 몇 개 수집하고 말았다.<br>진짜 영어를 하지 못한다는 게 비통하다는 걸 처음으로 깨닫게 되는 순간이었다.<br>세션 이해 못하는 것 정도야 나중에 유튜브에서 다시 보면 되겠지… 정도로 말았는데 글로벌 테크 기업에서 주된 관심사는 무엇일까? 그들은 어떻게 해결했을까? 등등<br>어떻게 보면 여기에서 밖에 얻지 못할 것 같은 정보들을 하나도 얻지 못했다.<br>역시 기회는 준비된 자에게 오고, 준비가 되지 않은 자는 이렇게 회사에서 돈을 퍼줘서 떠먹여줘도 먹지 못한다는 사실을 절실히 깨닫게 되었다.<br>(라고 말하지만 그럼에도 불구하고 한국에 와서 열심히 영어공부하지 않는 걸 보면 사람은 쉽게 바뀌지 않는 것 같다…)</p><h2 id="또-다시-관광모드로…"><a href="#또-다시-관광모드로…" class="headerlink" title="또 다시 관광모드로…"></a>또 다시 관광모드로…</h2><img src="/2021/12/31/las-vegas-aws-reinvent-02/korean-meat.jpeg" class=""><p>저녁은 <a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=ks287&logNo=221201934657">진생</a>이란 곳에서 먹었다.<br>한인식당이다보니 들어가마자 TV에서 K-pop 같은 게 틀어져있었고 종업원들도 한국인이고 한국인 손님들도 많아서 뭔가 한국에 온 듯한 이질감이 들었다.<br>김치찌개 같은 얼큰한 걸 먹지 않아서 아쉬웠지만 그래도 삼겹살 같은 한국 음식을 먹었다는 것에 위안 삼았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/new-york-new-york.jpeg" class=""><p>저녁을 먹고 주변을 좀 둘러다 보다 들어가기로 했는데 <a href="https://newyorknewyork.mgmresorts.com/en.html">뉴욕뉴욕 호텔</a>을 만나게 되었다.<br>베네시안 호텔이 이탈리아 베니스를 테마로 만들어졌다면 뉴욕뉴욕 호텔은 미국의 뉴욕을 테마로 만들어진 호텔이다.<br>한국에서 비슷하게 영어마을 같은 게 있지만 이건 진짜 제대로 흉내낸 듯한 느낌이었다. (개인적으로는 제대로 흉내냈다고 느꼈지만 동료들은 그냥 어줍짢게 흉내낸 느낌이 든다고도 하였다.)</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/coca-cola-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-02/abc.jpeg" class=""><p>관광지 답게 기념품 상점들이 많았다.<br>그것도 단순한 기념품 상점이 아닌 글로벌 기업들의 기념품 상점이라고 하니 궁금하였다. (하지만 뭐 하나도 사지는 않았다.)</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/coca-cola-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-02/coca-cola-03.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-02/coca-cola-04.jpeg" class=""><p>코카콜라 기념품 샵인데 진짜 별에 별 게 다 있었다.<br>코카콜라 찐팬들이라면 눈 돌아갈테지만 나는 그정도까지는 아니고 즐겨먹는 음료이기 때문에 그냥 눈으로만 즐겼다.<br>귀여운 북극곰 인형 정도 하나 사서 조카한테 줄까 싶었지만 인형은 너무 많다고 누나가 그래서 딱히 사지는 않았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/mnms-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-02/mnms-02.jpeg" class=""><p><a href="http://www.m-ms.co.kr/">m&amp;m’s</a>라는 초콜릿인지 과자 기업의 기념품 샵도 있었다.<br>자주 먹지는 않지만 그냥 슈퍼마켓에서 종종 보던 로고라서 궁금증에 들어갔고 가족단위로 놀러온 사람들에게는 좋은 관광코스가 될 것 같았다.<br>아이들도 좋아하는 듯 보였다.<br>하지만 여기서도 뭐 딱히 사지는 않았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-02/bellagio.jpeg" class="" title="너무 얼굴이 적나라하게 나와서 모자이크처리를 했다."><p>그리고 마지막 날의 대미를 장식을 <a href="https://bellagio.mgmresorts.com/en.html">벨라지오 호텔</a>의 분수쇼를 관람하였다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/p3BF0TF-0MQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>벨라지오 호텔의 분수쇼는 꼭 한 번 보는 걸 추천한다.<br>물론 계속 하는 건 아니고 30분인가 몇분 주기로 하긴 하지만 안 보고 오면 너무 아까운 쇼인 것 같다.</p><h2 id="세미나-둘째-날까지의-소감-11-x2F-30"><a href="#세미나-둘째-날까지의-소감-11-x2F-30" class="headerlink" title="세미나 둘째 날까지의 소감 (11&#x2F;30)"></a>세미나 둘째 날까지의 소감 (11&#x2F;30)</h2><p>영어의 필요성을 절실히 체감하였다.<br>기회의 땅이라는데 나는 준비가 안 돼있어서 남이 떠먹여줘도 기회를 얻지 못했다.<br>진짜 영어를 할 줄 아는 건 쇼미더머니 치트키를 쓰는 것이나 다름이 없는 것 같았다.<br>내가 아무리 기술적 역량이 뛰어난다한들 세상의 흐름에 뒤쳐지는 건 너무나 빠르게 진행이 될 것 같았다.<br>라고 말하고 한국에 와서 영어 공부를 열심히 하지 않는 걸 보면… 음… 어떻게 해야 사람이 바뀔런지 궁금하기도 하다.</p><p>또한 둘째 날부터 그나마 호텔 근방을 조금이나마 벗어나보았다.<br>코로나 검사를 하러 우버인가 리프트를 타고 근방으로 가보긴 했는데 확실히 차 없으면 미국에서는 관광이 너무 힘들 것 같았다.<br>영어도 안 되니 대중교통을 이용하여 원하는 목적지까지 가는 건 너무나 두려웠다. (로밍을 했는데 인터넷이 잘 되지 않아 지도 앱을 보고 따라가는 것도 한계가 있어보였다.)<br>그리고 호텔 주변은 그냥 일반 도심같은 느낌이 들었는데 차를 타고 조금만 이동하니 주변이 사막이라는 걸 체감할 수 있게 끔 황량한 풍경들이 조금씩 보이는 것 같았다.<br>둘째 날부터 조금씩 호텔 근방을 벗어나보고 벨라지오 분수쇼도 보고 하다보니 ‘아… 드디어 라스베가스에 왔구나…’라는 느낌이 들었다.<br>그 전까지는 근방에서만 활동하다보니 그냥 AWS 리인벤트 세션 들으러 온 기분 밖에 나지 않았는데 뭔가 주변 관광 코스라고 할법한 공간들을 돌아다녀 보니 라스베가스에 왔다는 느낌을 조금이나마 체감할 수 있었다.</p><p>그리고 잠들기 전에 또 느낀 게 하나 있다.<br>어떻게 마지막 날까지 <code>버티지?</code><br>버틴다는 생각이 들은 이유는 기름진 음식들, 반복된 패턴(일어나서 밥먹고 세션듣고 밥먹고 세션듣고 밥먹고 잠자기), 세션을 들어도 이해가 안 되니 지루함이 컸다.<br>마지막 날까지 버텨내야한다는 생각을 하다보니 점점 더 무리하게 세션을 듣는 것을 포기하고 선택과 집중을 해야겠다는 생각이 들었다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;회사에서 좋은 기회가 생겨 &lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;AWS re:invent&lt;/a&gt;(2021&amp;#x2F;11&amp;#x2F;29 ~ 2021&amp;#x2F;12&amp;#x2F;03)에 참석할 기회가 생겼다.&lt;br&gt;영어도 잘 못하고, 평상시 &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.&lt;br&gt;살면서 미국에 처음 가보는 것이다보니 &lt;code&gt;미국에서만 할 수 있는 걸 해보자&lt;/code&gt;라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.&lt;br&gt;기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.&lt;br&gt;쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-01/&quot;&gt;1편 - 인천공항에서 세미나 첫 날까지 (11&amp;#x2F;28 ~ 11&amp;#x2F;29)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2편 - 세미나 둘째 날 (11&amp;#x2F;30) - 현재 게시물&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-03/&quot;&gt;3편 - 세미나 셋째 날 (12&amp;#x2F;01)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-04/&quot;&gt;4편 - 세미나 넷째 날 (12&amp;#x2F;02)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-05/&quot;&gt;5편 - 세미나 마지막 날부터 인천공항까지(12&amp;#x2F;03 ~ 12&amp;#x2F;05)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;어느정도-익숙해지기-시작한-세미나-둘째-날&quot;&gt;&lt;a href=&quot;#어느정도-익숙해지기-시작한-세미나-둘째-날&quot; class=&quot;headerlink&quot; title=&quot;어느정도 익숙해지기 시작한 세미나 둘째 날&quot;&gt;&lt;/a&gt;어느정도 익숙해지기 시작한 세미나 둘째 날&lt;/h2&gt;&lt;img src=&quot;/2021/12/31/las-vegas-aws-reinvent-02/morning-road.jpeg&quot; class&gt;
&lt;p&gt;베네시안 호텔에 아침부터 키노트가 있어서 이동을 하였다.&lt;br&gt;그래도 반복되는 길을 이틀 동안 왔다갔다 하다보니 도시의 풍경과 길들이 익숙해지기 시작했다.&lt;br&gt;또 신기한 것은 라스베가스 호텔 근처에서는 24시간 내내 음악 소리가 들리는 것 같았다.&lt;br&gt;밤에는 시끄러운 음악이 들렸던 것 같은데 아침에는 또 잔잔한 음악이었나… 여튼 분위기에 맞는 음악이 길거리에 울려퍼지는 게 신기했다.&lt;/p&gt;</summary>
    
    
    
    <category term="기타" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
    <category term="잡동사니" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88/"/>
    
    
    <category term="reinvent" scheme="https://perfectacle.github.io/tags/reinvent/"/>
    
    <category term="여행" scheme="https://perfectacle.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>라스베가스를 다녀오고... 1편 (feat. AWS re:Invent 2021) - 인천공항에서 세미나 첫 날까지</title>
    <link href="https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-01/"/>
    <id>https://perfectacle.github.io/2021/12/31/las-vegas-aws-reinvent-01/</id>
    <published>2021-12-31T14:29:31.000Z</published>
    <updated>2022-06-06T08:23:56.392Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서 좋은 기회가 생겨 <a href="https://reinvent.awsevents.com/">AWS re:invent</a>(2021&#x2F;11&#x2F;29 ~ 2021&#x2F;12&#x2F;03)에 참석할 기회가 생겼다.<br>영어도 잘 못하고, 평상시 <a href="https://aws.amazon.com/">AWS</a>를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.<br>살면서 미국에 처음 가보는 것이다보니 <code>미국에서만 할 수 있는 걸 해보자</code>라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.<br>기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.<br>쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.</p><ul><li>1편 - 인천공항에서 세미나 첫 날까지 (11&#x2F;28 ~ 11&#x2F;29) - 현재 게시물</li><li><a href="/2021/12/31/las-vegas-aws-reinvent-02/">2편 - 세미나 둘째 날 (11&#x2F;30)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-03/">3편 - 세미나 셋째 날 (12&#x2F;01)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-04/">4편 - 세미나 넷째 날 (12&#x2F;02)</a></li><li><a href="/2021/12/31/las-vegas-aws-reinvent-05/">5편 - 세미나 마지막 날부터 인천공항까지(12&#x2F;03 ~ 12&#x2F;05)</a></li></ul><h2 id="인천공항에서-라스베가스까지…-11-x2F-28"><a href="#인천공항에서-라스베가스까지…-11-x2F-28" class="headerlink" title="인천공항에서 라스베가스까지… (11&#x2F;28)"></a>인천공항에서 라스베가스까지… (11&#x2F;28)</h2><p>한국시간 기준 일요일 저녁 출발이었고, 코시국이라 인천공항은 사람이 별로 없었다.<br>하지만 미국으로 가는 항공편만 사람이 좀 북적여서 수하물을 붙이는데 30분 가량 걸렸다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/asiana-kr-to-us.jpeg" class="" title="아시아나 항공이라 그런지 저가항공과 달리 항공정보도 승객이 직접 눌러볼 수 있어서 신기했다."><img src="/2021/12/31/las-vegas-aws-reinvent-01/airline-food-01.jpeg" class=""><p>코시국이라 기내식이 없을 줄 알았는데 식욕은 거스를 수 없는 본능이기 때문인지 나왔다.<br>생애 첫 기내식이라 기대를 품고 먹었고 그냥저냥 나쁘지 않게 먹었다.  </p><img src="/2021/12/31/las-vegas-aws-reinvent-01/airline-food-02.jpeg" class=""><p>또 몇시간이 흘러 두 번째 기내식이 나왔다.<br>10시간이 넘는 비행시간이라 그런지 두 번이나 나왔는데 두 번째부터 물렸다.<br>그냥 먹고 자고 먹고 자고 마치 사육당하는 기분이었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/sfo-01.jpeg" class=""><p>바로 라스베가스로 가는 게 아니라 샌프란시스코 공항에 경유하게 되었다.<br>인천공항까지만 하더라도 미국으로 간다는 느낌이 전혀 들지 않았다.<br>한국인에게 체크인 하고, 한국인 승무원이 탑승하고, 비행기에도 대부분이 한국인이어서 미국을 간다는 것이 체감되지 않았다.<br>하지만 샌프란시스코 공항에 도착하고 나서부터는 광고판이며 간판이며 모두 영어였다.<br>또한 비행기에서도 바로 내 옆자리에 외국인이 앉아있었고, 또 한국과의 가장 큰 차이점은 승무원들의 외모였다.<br>한국은 승무원하면 ‘젊고 이쁘다’인데 미국은 ‘인종도 다양하고 연령도 다양하다’였다.<br>연세가 좀 있는 듯한 흑인 승무원 분도 계셨는데 왠지 모르게 전문성이 가득해보였다.<br>이렇듯 한국과 미국은 승무원이라는 직종에서부터도 큰 차이가 있어보였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/las-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/las-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/las-03.jpeg" class=""><p>카지노의 도시답게 라스베가스는 공항부터 카지노가 보였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/las-taxi.jpeg" class=""><p>공항에 택시들이 줄서있는 건 어딜가나 국룰인 것 같다.</p><h2 id="본격-호텔-Wynn-도착"><a href="#본격-호텔-Wynn-도착" class="headerlink" title="본격 호텔(Wynn) 도착"></a>본격 호텔(Wynn) 도착</h2><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-03.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-04.jpeg" class=""><p>우리는 <a href="https://www.wynnlasvegas.com/">Wynn Las Vegas</a> 호텔에 머무르게 되었다.<br>근데 입구에서부터 정말 압도되었고… 내부는 이미 크리스마스 장식이 너무 이쁘게 되어있었다.<br>한국에서 이런 호텔을 가본 적이 없었다보니(있는지도 모르겠지만) 여기 정말 호텔이 맞나?란 생각이 들 정도로 너무너무 근사했다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-casino-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-casino-02.jpeg" class=""><p>크리스마스 장식의 감동도 잠시… 카지노의 도시답게 호텔에는 카지노 슬롯머신들이 삐까뻔쩍하게 즐비해있다.<br>전에 일본에 놀러간 적이 있었는데 카지노와 비슷한 빠칭코를 경험 한 적이 있었다.<br>그 때 일본인들은 빠칭코에는 관심은 없고 그냥 시간을 죽이러 오는 사람들도 많아보였다.<br>약속시간까지 기다리기 애매할 때 빠칭코 가게에 가서 그냥 머신을 돌려만 놓고 핸드폰을 보는 사람들도 많았기 때문이다.<br>카지노도 그런 느낌으로 하는 걸까… 궁금증이 많았지만 겁도 나고 피곤했기 때문에 바로 시도해보지는 않았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-room-01.jpeg" class=""><p>오션뷰도 아닌 Crypto 뷰…<br>AWS Reinvent 기간이라 그런지 힐튼 호텔 광고에 crypto.com이 보이니 뭔가 오묘했다…<br>시간이 지나면 데이터독이나 기타 테크 기업들의 광고도 나왔다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-room-02.jpeg" class=""><p>방은 아쉽게도 1인실이 아닌 2인실이었다. (이것마저 1인실을 바라면 너무 도둑놈 같아 보인다.)<br>슬리퍼는 당연히 없을 것 같아서 한국에서 하나 가져왔고, 호텔에 있는 음료&#x2F;과자 같은 거 밑에 저울이 달려있어 무게가 조금이라도 달라지면 바로 과금이 된다고 했다.</p><h2 id="걸어서-베네시안-Ventian-호텔로…-feat-Midnight-Madness"><a href="#걸어서-베네시안-Ventian-호텔로…-feat-Midnight-Madness" class="headerlink" title="걸어서 베네시안(Ventian) 호텔로… (feat. Midnight Madness)"></a>걸어서 베네시안(Ventian) 호텔로… (feat. Midnight Madness)</h2><p>호텔에서 짐정리 한 후 세미나 등록을 위해 <a href="https://www.venetianlasvegas.com/">The Venetian Resort Las Vegas</a> 호텔로 이동을 하였다.<br>나도 잘 몰랐는데 라스베가스의 호텔들은 세미나나 각종 컨벤션들을 위해 사용된다고 한다.<br>호텔 안에 그런 걸 위해 별도의 공간들이 많이 마련돼있고, AWS는 단순 한 호텔이 아닌 Wynn, Venetian, Caesars Forum 등등 다양한 곳에서 진행이 되었다.<br>호텔 간 이동거리는 걸어서 한 15분 정도 걸렸던 것 같고, 그 안에 카지노도 있기 때문에 길을 헤매는 경우도 많았다.<br>그러다보니 하루에 최소 2만보는 걸었고 아침 일찍부터 듣게되면 오후에는 시차적응 + 안하던 걷기 운동을 하게 됨에 따른 피로감이 몰려와서 졸리곤 하였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-to-midnight-madness-view-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-to-midnight-madness-view-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-to-midnight-madness-view-03.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-to-midnight-madness-view-04.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-to-midnight-madness-view-05.jpeg" class=""><p>베네시안 호텔로 걸어서 약 15분 정도를 이동하였는데 그냥 길거리들이 다 삐까뻔쩍하고 관광의 도시답게 정말 잘 꾸며놓았다.<br>속으로 그래… 이게 미국이지… 이런 생각을 하면서 걸었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/venetian-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/venetian-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/venetian-03.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/venetian-04.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/venetian-05.jpeg" class=""><p>베네시안 호텔은 이탈리아의 관광도시인 베니스(Venezia)를 테마로 만든 호텔이라고 한다.<br>그래서인지 이탈리아에나 있을 법한 분위기들을 주로 연출하고 있는데 바다에서 배를 타는 듯한 느낌의 관광상품도 있는데 나중에 가족이나 연인끼리 오면 그냥 한번 해볼법 한 것 같다.  </p><img src="/2021/12/31/las-vegas-aws-reinvent-01/reinvent-registration-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/reinvent-registration-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/reinvent-registration-03.jpeg" class=""><p>베네시안 호텔에 들어가서 aws 리인벤트를 등록하러 가는데 AWS 로고가 보이고 관련된 장소들이 등장하자 뭔가 압도되는 느낌이 들었다.<br>아무리 국내에서 날고 긴다하는 테크 기업들이 있다지만 ‘글로벌 기업은 진짜 다르구나… 어떻게 이런 스케일로 행사를 진행할 수 있지??’ 이런 생각이 들었다.<br>또 한편으로 ‘나 놀러온 게 아니라 세미나 들으러 온 거였지?’ 하고 정신이 확 들기도 했다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/reinvent-registration-04.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/reinvent-registration-05.jpeg" class=""><p>Registration 부스에 가서 등록을 마치고 Swag 부스에서 AWS Reinvent 10주년 기념 후드집업도 받았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/outback.jpeg" class=""><p>등록을 마치고 미국에서의 첫끼니는 아웃백에서 먹게 되었다.<br>아웃백의 본고장인 미국에서 먹는다는 것에 매우 설렜지만 주문을 하는 것부터가 난항이었다.<br>한국 아웃백도 별로 가본 적이 없어서 메뉴도 잘 모르고 선택할 것도 많아서 선택장애가 오곤 하였는데 미국은 영어로 된 메뉴판에서 영어로 주문한다고 하니 거기서부터가 난관이었다.<br>다행히 일행 중에 영어를 잘하시는 분이 계셔서 주문을 성공적으로 마치고 아주 맛있게 먹었다.<br>또한 미국이라 그런지 양이 참 많았다. 7명이서 메뉴를 5개 시켰는데도 남을 정도였다.</p><p>아, 여담으로 아웃백은 가게를 찾아 들어가는 것부터가 또 문제였다.<br>아웃백은 2층에 있는데 2층으로 가려면 1층을 통해 갔어야했는데 1층에 또 카지노가 있어서 어디로 가야하는지부터도 찾는데 시간이 좀 걸렸었다.<br>진짜 라스베가스는 카지노 없으면 섭할 정도로 카지노는 어딜 가나 존재하는 것 같았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/midnignt-madness-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/midnignt-madness-02.jpeg" class=""><p>저녁을 먹고 AWS 리인벤트의 전야제인 <a href="https://reinvent.awsevents.com/play/">Midnignt Madness</a>에 참석하였는데<br>일반인 참여자가 올라와서 락음악에 맞추어 허공에 드럼&amp;기타질하기, OX 퀴즈 등등 같은 것이 진행되었지만 미국 블랙코메디인지 나하고는 코드가 잘 맞지 않았다.<br>그리고 한국은 잘 모르겠지만 미국은 묘기 스포츠 같은 것들이 잘 형성돼있어서인지 자전거&amp;스케이트 보드로 엄청난 퍼포먼스를 보여주었다.</p><h2 id="본격-AWS-re-Invent-시작-11-x2F-29-1일차"><a href="#본격-AWS-re-Invent-시작-11-x2F-29-1일차" class="headerlink" title="본격 AWS re:Invent 시작 (11&#x2F;29, 1일차)"></a>본격 AWS re:Invent 시작 (11&#x2F;29, 1일차)</h2><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-night-view.jpeg" class="" title="밤에는 씨티뷰인 것처럼 보인다."><img src="/2021/12/31/las-vegas-aws-reinvent-01/wynn-morning-view.jpeg" class="" title="아침에 보니 보이지 않았던 잔디들(골프장)이 보인다."><div class="video-container"><iframe src="https://www.youtube.com/embed/wqXkjH0BKR4" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>윈 호텔의 커튼은 자동으로 걷고, 칠 수 있다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/starbucks.jpeg" class=""><p>첫날은 아침을 제공해주지 않았고, 스타벅스에 가서 샌드위치랑 커피로 간단히 떼웠다.<br>본토 스타벅스라 그런지 아침부터 대기줄이 길었고, 한번 쯤 미국 스타벅스에 가본다는 자그마한 목표도 달성을 해보았다.</p><p>그리고 시간이 좀 남아서 reflection room을 돌아보았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/reflection-room-01.jpeg" class=""><p>reflection room이라는 용어를 처음 들어봐서 구글에 검색해보았을 때는 ‘와… 거울이 가득한 고요한 방에서 명상을 하는 공간인가? 심신의 안정을 찾는 공간인가?’라는 생각이 들면서 이런 공간까지 있는 진짜 대단한 행사라는 생각이 들었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/reflection-room-02.jpeg" class=""><p>하지만 실상은 그냥 공간하나 대여해서 요가매트 깔아놓고 알아서 명상&amp;요가 하는 공간이었다.<br>나는 요가나 명상을 별로 해본 적이 없다보니 실제로는 시차 적응이 안 돼서 졸릴 때 종종 리플렉션 룸에 와서 잠을 청하곤 했다. (빈백도 있어서 잠 자기 편안했다.)<br>호텔까지 가려면 또 20분 가량 걸어서 가야하다보니 엄두도 안 났는데 그래도 휴식하기 적당한 공간이라 종종 애용하였다.<br>그리고 또 놀란 게 이슬람교인지 모르겠지만 오후에 특정 시간이 되니 하나 둘 리플렉션 룸으로 오더니 특정 방향을 보고 절을 하는 것을 보고 ‘와… 찐 종교인이구나…’하고 신기했던 경험도 있다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/lunch-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/lunch-02.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/lunch-03.jpeg" class=""><p>점심부터는 AWS 측에서 제공해줘서 가까운 호텔에 가면 먹을 수 있었다.<br>아웃백을 먹을 때까지만 해도 고기나 기름진 음식이 너무 좋았고 초딩 입맛인 나한테는 너무나 좋았다.<br>하지만 아침에 스타벅스에서 샌드위치를 먹고 나서 점심에도 또 샌드위치를 먹을 생각을 하니… 너무나 물렸다.<br>쌀은 없고, 얼큰한 음식도 없어서 이때부터 조금씩 고통이었다.<br>그래도 아직은 세미나 첫날이기 때문에 먹을만 하였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/building-modern-cloud-application-01.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/building-modern-cloud-application-02.jpeg" class=""><p>세션을 듣긴 들었는데… 영어이다보니 이해 안 되는 게 태반이었다. (AWS를 안 쓰다보니 이해가 안 되는 것도 많았고…)<br>확실히 이 때부터 영어의 필요성을 체감하기 시작한 것 같다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/venetian-06.jpeg" class=""><img src="/2021/12/31/las-vegas-aws-reinvent-01/venetian-07.jpeg" class=""><p>어제는 베네시안 호텔 외부를 주로 봤다면 베네시안 호텔에서 세션을 듣다보니 베네시안 호텔 내부도 돌아다니다 어제는 못봤던 곳들도 많이 보게 되었다.<br>그러다 베네시안 호텔 2층에서 마치 하늘이 뚫려있는 듯한 공간을 만났다.<br>하지만 정말 세트장처럼 꾸며놓아서 저기서 밥을 먹게 된다면 진짜 이탈리아 베니스에 온듯한 느낌이 들 것 같았다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/leadership-session.jpeg" class=""><p>일반적인 세션 말고 리더십 세션은 오페라나 뮤지컬 공연장 같은 큰 공간에서 하였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/pho-kim-long.jpeg" class=""><p>첫날 저녁은 라스베가스에서 유명한 쌀국수 집이라는 <a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=welasvegas&logNo=220965094742">Pho Kim Long</a>에 다녀왔다.<br>막상 찍고보니 음식 사진은 없고 간판만 찍었다.<br>맛의 조예가 깊지 않다보니 뭐 엄청 대단하다… 다르다… 특별하다… 라고 느끼기보다는 그냥 뭐 먹을만 했다? 맛있다? 정도였다.<br>그래도 계속되는 샌드위치&#x2F;고기 파티에서 조금은 벗어나서 색다른 음식을 먹을 수 있어 좋았다.<br>그래도 김치랑 라면이 마렵긴 마찬가지였다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/fountain.jpeg" class=""><p>대충 첫날의 일정을 마치고 돌아오면서 어디서 못 본 것 같은 분수라서 한 컷 찍었다.</p><img src="/2021/12/31/las-vegas-aws-reinvent-01/colleague-01.jpeg" class=""><p>첫날의 일정이 생각보다 빡세서 일행은 이슈를 처리하다가 중간에 잠이 들어버렸다…</p><h2 id="세미나-첫날까지의-소감-11-x2F-28-11-x2F-29"><a href="#세미나-첫날까지의-소감-11-x2F-28-11-x2F-29" class="headerlink" title="세미나 첫날까지의 소감 (11&#x2F;28 ~ 11&#x2F;29)"></a>세미나 첫날까지의 소감 (11&#x2F;28 ~ 11&#x2F;29)</h2><p>인천공항에서(11&#x2F;28)부터 세미나 첫날(11&#x2F;29)까지의 소감은 ‘이제 첫날이라고?’였다.<br>15~6시간 정도 되는 긴 비행(중간 경유시간 포함)부터 낯선 문화, 기름진 음식들, 그리고 세션을 들으러 호텔을 이리저리 이동하는 것까지…<br>아직 첫날 밖에 끝나지 않았다는 것이 믿기지 않았다.<br>인천에서 미국으로 갈 수록 시간이 느려지는데 그러다보니 한국시간(KST) 11&#x2F;28 저녁 8시 쯤에 출발해서 라스베가스 현지시간(PST) 11&#x2F;28 저녁 6시 쯤에 도착하였는데 이것도 한 몫 한 것 같긴 하다.<br>여행 가면 시간이 빨리간다는데 난 왜 이리 시간이 안 가는 거지?<br>라는 생각이 들다가 아 맞다… 나 여행온 거 아니지… 라고 다시 정신을 차리곤 하였다.<br>가장 큰 문제는 세미나에 집중하려해도 AWS 배경지식 부족 + 언어에서 오는 문제점으로 인해 세션에 집중할 수 없었다.<br>그래도 회사에서 지원까지 받았고 나 대신 열심히 일하는 동료들도 있는데… 라는 생각으로 내일부터는 좀 더 세션을 이해해야겠다고 다짐하였다.<br>그리고 너무 과하게 스케쥴을 잡다보니 피곤하고 시간에 쫓기듯 이동하다보니 점심도 제대로 못 먹고 세션을 들으러 가기도 하였다.<br>그래서 좀 템포를 조절하여 세션을 들어야겠다고 생각하였다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;회사에서 좋은 기회가 생겨 &lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;AWS re:invent&lt;/a&gt;(2021&amp;#x2F;11&amp;#x2F;29 ~ 2021&amp;#x2F;12&amp;#x2F;03)에 참석할 기회가 생겼다.&lt;br&gt;영어도 잘 못하고, 평상시 &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;를 직접 쓰지 않은지 오래 되기도 했지만 견문을 넓히자는 차원에서 지원하여 갔다오게 되었다.&lt;br&gt;살면서 미국에 처음 가보는 것이다보니 &lt;code&gt;미국에서만 할 수 있는 걸 해보자&lt;/code&gt;라는 목표를 세우고 갔으나 많은 실패들이 있었고, 영어가 잘 안되다보니 aws reinvent 컨벤션 후기 보다는 라스베가스 여행기가 되어버린 것 같았다.&lt;br&gt;기술적인 부분에서 인사이트를 크게 얻지 못해 창피하여 aws reinvent 후기는 적지 못하고, 미국이라는 기회의 땅에 가본 경험을 휘발성 데이터로 냅두기 아까워 기억들이 더이상 날아가기 전에 이렇게라도 기록을 해둬야할 거 같아서 이 글을 쓰게 되었다.&lt;br&gt;쓰다보니 사진이 많아서인지 글이 좀 루즈해지는 감이 없잖아 있어 파트를 좀 쪼개보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1편 - 인천공항에서 세미나 첫 날까지 (11&amp;#x2F;28 ~ 11&amp;#x2F;29) - 현재 게시물&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-02/&quot;&gt;2편 - 세미나 둘째 날 (11&amp;#x2F;30)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-03/&quot;&gt;3편 - 세미나 셋째 날 (12&amp;#x2F;01)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-04/&quot;&gt;4편 - 세미나 넷째 날 (12&amp;#x2F;02)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/31/las-vegas-aws-reinvent-05/&quot;&gt;5편 - 세미나 마지막 날부터 인천공항까지(12&amp;#x2F;03 ~ 12&amp;#x2F;05)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;인천공항에서-라스베가스까지…-11-x2F-28&quot;&gt;&lt;a href=&quot;#인천공항에서-라스베가스까지…-11-x2F-28&quot; class=&quot;headerlink&quot; title=&quot;인천공항에서 라스베가스까지… (11&amp;#x2F;28)&quot;&gt;&lt;/a&gt;인천공항에서 라스베가스까지… (11&amp;#x2F;28)&lt;/h2&gt;&lt;p&gt;한국시간 기준 일요일 저녁 출발이었고, 코시국이라 인천공항은 사람이 별로 없었다.&lt;br&gt;하지만 미국으로 가는 항공편만 사람이 좀 북적여서 수하물을 붙이는데 30분 가량 걸렸다.&lt;/p&gt;
&lt;img src=&quot;/2021/12/31/las-vegas-aws-reinvent-01/asiana-kr-to-us.jpeg&quot; class title=&quot;아시아나 항공이라 그런지 저가항공과 달리 항공정보도 승객이 직접 눌러볼 수 있어서 신기했다.&quot;&gt;</summary>
    
    
    
    <category term="기타" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
    <category term="잡동사니" scheme="https://perfectacle.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88/"/>
    
    
    <category term="reinvent" scheme="https://perfectacle.github.io/tags/reinvent/"/>
    
    <category term="여행" scheme="https://perfectacle.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>(Spring Boot) spring-boot-configuration-processor 활용하기</title>
    <link href="https://perfectacle.github.io/2021/11/21/spring-boot-configuration-processor/"/>
    <id>https://perfectacle.github.io/2021/11/21/spring-boot-configuration-processor/</id>
    <published>2021-11-21T14:43:06.000Z</published>
    <updated>2022-06-06T08:23:56.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Configuration-Metadata"><a href="#Configuration-Metadata" class="headerlink" title="Configuration Metadata"></a>Configuration Metadata</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html">https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html</a></p><blockquote><p>Spring Boot jars include metadata files that provide details of all supported configuration properties.<br>The files are designed to let IDE developers offer contextual help and “code completion” as users are working with <code>application.properties</code> or <code>application.yml</code> files.</p></blockquote><p>Configuration Metadata는 IDE에서 yml 혹은 properties에서 사용하는 Configuration의 자동완성을 도와주는 메타데이터이다. (소스코드에는 영향을 1도 안 미친다.)</p><img src="/2021/11/21/spring-boot-configuration-processor/configuration-metadata-auto-completion.png" class="" title="application.yml을 작성하다보면 spring 관련 configuration들은 자동완성이 잘 된다."><img src="/2021/11/21/spring-boot-configuration-processor/configuration-metadata-navigate.png" class="" title="해당 configuration에서 Command + B를 누르면 실제 Properties 클래스로 이동까지 된다."><h2 id="커스텀-Configuration-Metadata-정의"><a href="#커스텀-Configuration-Metadata-정의" class="headerlink" title="커스텀 Configuration Metadata 정의"></a>커스텀 Configuration Metadata 정의</h2><img src="/2021/11/21/spring-boot-configuration-processor/custom-property.png" class="" title="커스텀한 프로퍼티는 인식을 하지 못하는 것 같다."><img src="/2021/11/21/spring-boot-configuration-processor/turn-off-spring-boot-configuration-processor.png" class="" title="Configuration Property 클래스에서도 Spring Boot Configuration Annotation Processor가 설정돼지 않았다고 한다."><img src="/2021/11/21/spring-boot-configuration-processor/custom-spring-boot-configuration-metadata-json.png" class="" title="자동완성을 위해서는 resources&#x2F;META-INF&#x2F;spring-configuration-metadata.json을 작성하면 된다."><img src="/2021/11/21/spring-boot-configuration-processor/custom-property-auto-completion.png" class="" title="이제 자동완성 및 어떤 클래스에서 사용하고 있는지 추적까지 잘 된다."><img src="/2021/11/21/spring-boot-configuration-processor/turn-off-spring-boot-configuration-processor.png" class="" title="네비게이션은 잘 되지만 아직까지도 Spring Boot Configuration Annotation Processor가 설정돼지 않았다고 보여준다."><h2 id="자동으로-Configuration-Metadata-생성하기-spring-boot-configuration-processor"><a href="#자동으로-Configuration-Metadata-생성하기-spring-boot-configuration-processor" class="headerlink" title="자동으로 Configuration Metadata 생성하기 (spring-boot-configuration-processor)"></a>자동으로 Configuration Metadata 생성하기 (spring-boot-configuration-processor)</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata.annotation-processor">https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata.annotation-processor</a></p><blockquote><p>You can easily generate your own configuration metadata file from items annotated with <code>@ConfigurationProperties</code> by using the <code>spring-boot-configuration-processor</code> jar.<br>The jar includes a Java annotation processor which is invoked as your project is compiled.</p></blockquote><p>@ConfigurationProperties 어노테이션이 붙은 클래스에 대한 Configuration Metadata File은 spring-boot-configuration-processor를 통해 생성할 수 있다고 한다.</p><p>build.gradle.kts에 <a href="https://kotlinlang.org/docs/kapt.html">kapt</a> 플러그인을 활성화시켜준다. (코틀린 컴파일러로 컴파일하기 때문에 자바로 작성한 어노테이션을 해석하지 못하기 때문)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kotlin(<span class="string">&quot;kapt&quot;</span>) version <span class="string">&quot;1.6.0&quot;</span></span><br></pre></td></tr></table></figure><p>build.gradle.kts에 아래 디펜던시들을 추가해준다. (멀티 모듈인 경우 모든 모듈에 일일이 추가하는 게 귀찮으니 루트의 build.gradle.kts에 추가해주는 것이 좋다.)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">annotationProcessor(<span class="string">&quot;org.springframework.boot:spring-boot-configuration-processor&quot;</span>)</span><br><span class="line">kapt(<span class="string">&quot;org.springframework.boot:spring-boot-configuration-processor&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2021/11/21/spring-boot-configuration-processor/re-run-spring-boot-configuration-processor.png" class="" title="생성된 metadata를 업데이트하려면 Spring Boot Configuration Annotation Processor를 다시 돌리라고 나온다. (하지만 몇 번이고 어노테이션 프로세서를 돌려도 해당 알림을 사라지지 않기 때문에 그냥 숨기는 걸 추천한다.)"><img src="/2021/11/21/spring-boot-configuration-processor/run-gradle-kapt-task.png" class="" title="Annotation Processor를 돌리려면 kaptKotlin 태스크를 실행시키면 된다. (자바 프로젝트에서는 compileJava 태스크를 실행시키면 된다.)"><img src="/2021/11/21/spring-boot-configuration-processor/generated-configuration-metadata-json-location.png" class="" title="annotation processor에 의해 메타데이터가 생성되었다."><img src="/2021/11/21/spring-boot-configuration-processor/generated-configuration-metadata-json.png" class="" title="description 같은 건 없지만 나름 쓸만하게 뽑혔다."><img src="/2021/11/21/spring-boot-configuration-processor/custom-property-navigate.png" class="" title="자동완성이나 네비게이션도 잘 된다."><p>다만 몇 가지 한계점이 있는데 아래와 같다.</p><ol><li>@ConfigurationProperties에 대해서만 동작하기 때문에 @Value와 같이 단순하게 사용한 경우에는 해당 configuration에 대해서 metadata가 생성되지 않는다.</li><li>properties나 yml에 정의만 해놓고 @ConfigurationProperties 클래스를 생성하지 않은 경우에는 해당 configuration에 대해서 metadata가 생성되지 않는다.</li><li>properties나 yml의 위치하는 모듈과 @ConfigurationProperties 클래스가 위치하는 모듈이 다른 경우에는 해당 configuration에 대해서 metadata가 생성되지 않는다. 소스코드가 돌아가는데는 전혀 문제가 없지만 올바른 설계인지 고민을 한 번 해보는 것이 좋다.</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Configuration-Metadata&quot;&gt;&lt;a href=&quot;#Configuration-Metadata&quot; class=&quot;headerlink&quot; title=&quot;Configuration Metadata&quot;&gt;&lt;/a&gt;Configuration Metadata&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html&quot;&gt;https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Boot jars include metadata files that provide details of all supported configuration properties.&lt;br&gt;The files are designed to let IDE developers offer contextual help and “code completion” as users are working with &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Configuration Metadata는 IDE에서 yml 혹은 properties에서 사용하는 Configuration의 자동완성을 도와주는 메타데이터이다. (소스코드에는 영향을 1도 안 미친다.)&lt;/p&gt;
&lt;img src=&quot;/2021/11/21/spring-boot-configuration-processor/configuration-metadata-auto-completion.png&quot; class title=&quot;application.yml을 작성하다보면 spring 관련 configuration들은 자동완성이 잘 된다.&quot;&gt;</summary>
    
    
    
    <category term="Spring Boot" scheme="https://perfectacle.github.io/categories/Spring-Boot/"/>
    
    
    <category term="Spring Boot" scheme="https://perfectacle.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>(Spring) 외부 API의 Response 객체를 만들 때 null을 주의하자</title>
    <link href="https://perfectacle.github.io/2021/09/20/spring-web-response-deserialization-for-null/"/>
    <id>https://perfectacle.github.io/2021/09/20/spring-web-response-deserialization-for-null/</id>
    <published>2021-09-20T02:57:30.000Z</published>
    <updated>2022-06-06T08:23:56.572Z</updated>
    
    <content type="html"><![CDATA[<p>소스코드 외부 세계에서 내부 세계로 데이터를 전달하기 위해서는 미리 정해진 프로토콜 및 API를 통해 데이터를 주고받게 된다.<br>일반적으로 우리가 많이 사용하는 Restful API(혹은 HTTP API)는 대부분 json의 형태로 데이터를 주고 받게 된다.<br>그럼 json 문자열이 우리가 정의한 Response 객체로 매핑을 할 때 null을 어떻게 핸들링 해야할까에 집중해서 간단히 정리해보았다.<br>해당 포스트와 연관성이 높은 <a href="/2021/09/20/spring-web-request-deserialization-for-null">(Spring) 외부에서 호출하는 Request 객체를 만들 때 null을 주의하자</a>도 읽는 것을 추천한다.</p><h2 id="코틀린"><a href="#코틀린" class="headerlink" title="코틀린"></a>코틀린</h2><p>코틀린은 nullable을 지원하다보니 소스코드에서 null에 대한 체크를 매번하지 않아도 돼서 매우 편하다.<br>하지만 이건 우리 소스코드 내부의 사정이고 소스코드 외부에서 들어오는 데이터의 경우에는 단정지을 수 없다.<br>그 단적인 예가 네트워크를 통해 들어오는 HTTP API의 응답이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseV1</span></span>(</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> text: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>이런 응답 객체가 있다고 할 때 과연 number와 text는 non-null을 100% 보장할 수 있을까??</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> restTemplateBuilder: RestTemplateBuilder</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> restTemplate: RestTemplate</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="keyword">init</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> mockHttpServer = WireMockServer(wireMockConfig().dynamicPort())</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">            mockHttpServer.start()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AfterAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">            mockHttpServer.stop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">init</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span> = <span class="literal">true</span></span><br><span class="line">        restTemplate = restTemplateBuilder.rootUri(<span class="string">&quot;http://localhost:<span class="subst">$&#123;mockHttpServer.port()&#125;</span>&quot;</span>).build()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> `응답 객체 전송 시에 non-<span class="literal">null</span> 필드가 누락돼있으면 RestClientException을 던진다`<span class="params">()</span></span> &#123;</span><br><span class="line">        mockHttpServer.givenThat(WireMock.any(UrlPattern.ANY).willReturn(WireMock.okJson(<span class="string">&quot;&quot;&quot;&#123;&quot;number&quot;: 13&#125;&quot;&quot;&quot;</span>)))</span><br><span class="line">        <span class="keyword">val</span> expected = HttpMessageNotReadableException::<span class="keyword">class</span>.java</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">actual</span> = assertThrows&lt;RestClientException&gt; &#123; restTemplate.getForObject(<span class="string">&quot;/&quot;</span>, ResponseV1::<span class="keyword">class</span>.java) &#125;.cause</span><br><span class="line"></span><br><span class="line">        assertThat(<span class="keyword">actual</span>).isInstanceOf(expected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>외부 API의 응답을 모킹하기 위해 <a href="http://wiremock.org/">wiremock</a>을 사용하였다.<br>만약 외부 API의 응답 중 text 필드가 오지 않았더라면 RestClientException(cause exception은 HttpMessageNotReadableException)을 던지게 된다.  </p><p>그러면 아래와 같이 코드를 개선해볼 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseV2</span></span>(</span><br><span class="line">    number: <span class="built_in">Int</span>?,</span><br><span class="line">    text: String?</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">val</span> number = number ?: <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> text = text ?: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우선 생성자를 전부 nullable로 정의해서 객체의 성공을 보장하고, 멤버변수는 전부 기본값을 정의해서 non-null을 보장하였다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> `응답 객체 전송 시에 non-<span class="literal">null</span> 필드가 누락돼있으면 기본값이 할당된다`<span class="params">()</span></span> &#123;</span><br><span class="line">    mockHttpServer.givenThat(WireMock.any(UrlPattern.ANY).willReturn(WireMock.okJson(<span class="string">&quot;&quot;&quot;&#123;&quot;number&quot;: 13&#125;&quot;&quot;&quot;</span>)))</span><br><span class="line">    <span class="keyword">val</span> expected = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">actual</span> = restTemplate.getForObject(<span class="string">&quot;/&quot;</span>, ResponseV2::<span class="keyword">class</span>.java)?.text</span><br><span class="line"></span><br><span class="line">    assertThat(<span class="keyword">actual</span>).isEqualTo(expected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>혹시나 Data Class를 꼭 사용해야한다면 아래와 같이도 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseV3</span></span>(</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> text: String</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="keyword">constructor</span>(number: <span class="built_in">Int</span>?, text: String?) : <span class="keyword">this</span>(</span><br><span class="line">        number = number ?: <span class="number">0</span>,</span><br><span class="line">        text = text ?: <span class="string">&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jackson은 기본 생성자를 리플렉션하여 객체를 생성하는데 기본 생성자가 없으니 객체 생성을 위해 사용할 생성자에 @JsonCreator 어노테이션을 달아주었다.</p><h2 id="자바"><a href="#자바" class="headerlink" title="자바"></a>자바</h2><p>자바에서도 똑같이 null에 대한 검증을 모두 끝마친 깔끔한 response dto 객체를 원할 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Request</span><span class="params">(<span class="keyword">final</span> Integer number, <span class="keyword">final</span> String text)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number == <span class="literal">null</span> ? <span class="number">0</span> : number;</span><br><span class="line">        <span class="built_in">this</span>.text = text == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> :text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적으로 응답 객체를 수정하는 행위는 소스코드의 예측력을 떨어뜨리므로 불변객체로 만들고,<br>불변객체이므로 getter를 사용하나 필드에 직접 접근하나 재할당하지 못한다는 사실은 똑같기 때문에 불필요하게 getter 메서드를 사용하지 않고, 접근이 필요한 필드의 경우에만 public 접근 지정자를 사용하여 직접 필드를 참조하도록 하였다.<br>jackson은 기본 생성자를 리플렉션하여 객체를 생성하는데 기본 생성자가 없으니 객체 생성을 위해 사용할 생성자에 @JsonCreator 어노테이션을 달아주었다.<br>또한 클라이언트로부터 어떤 요청이 들어올지 모르니 일단 생성자에서는 전부 null을 허용하고 기본값을 할당하였다.  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;소스코드 외부 세계에서 내부 세계로 데이터를 전달하기 위해서는 미리 정해진 프로토콜 및 API를 통해 데이터를 주고받게 된다.&lt;br&gt;일반적으로 우리가 많이 사용하는 Restful API(혹은 HTTP API)는 대부분 json의 형태로 데이터를 주고 받게 된다.&lt;br&gt;그럼 json 문자열이 우리가 정의한 Response 객체로 매핑을 할 때 null을 어떻게 핸들링 해야할까에 집중해서 간단히 정리해보았다.&lt;br&gt;해당 포스트와 연관성이 높은 &lt;a href=&quot;/2021/09/20/spring-web-request-deserialization-for-null&quot;&gt;(Spring) 외부에서 호출하는 Request 객체를 만들 때 null을 주의하자&lt;/a&gt;도 읽는 것을 추천한다.&lt;/p&gt;
&lt;h2 id=&quot;코틀린&quot;&gt;&lt;a href=&quot;#코틀린&quot; class=&quot;headerlink&quot; title=&quot;코틀린&quot;&gt;&lt;/a&gt;코틀린&lt;/h2&gt;&lt;p&gt;코틀린은 nullable을 지원하다보니 소스코드에서 null에 대한 체크를 매번하지 않아도 돼서 매우 편하다.&lt;br&gt;하지만 이건 우리 소스코드 내부의 사정이고 소스코드 외부에서 들어오는 데이터의 경우에는 단정지을 수 없다.&lt;br&gt;그 단적인 예가 네트워크를 통해 들어오는 HTTP API의 응답이다.&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ResponseV1&lt;/span&gt;&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; number: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; text: String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;이런 응답 객체가 있다고 할 때 과연 number와 text는 non-null을 100% 보장할 수 있을까??&lt;/p&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://perfectacle.github.io/categories/Spring/"/>
    
    
    <category term="Spring" scheme="https://perfectacle.github.io/tags/Spring/"/>
    
    <category term="Jackson" scheme="https://perfectacle.github.io/tags/Jackson/"/>
    
    <category term="Web" scheme="https://perfectacle.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>(Spring) 외부에서 호출하는 Request 객체를 만들 때 null을 주의하자</title>
    <link href="https://perfectacle.github.io/2021/09/20/spring-web-request-deserialization-for-null/"/>
    <id>https://perfectacle.github.io/2021/09/20/spring-web-request-deserialization-for-null/</id>
    <published>2021-09-20T02:04:28.000Z</published>
    <updated>2022-06-06T08:23:56.572Z</updated>
    
    <content type="html"><![CDATA[<p>소스코드 외부 세계에서 내부 세계로 데이터를 전달하기 위해서는 미리 정해진 프로토콜 및 API를 통해 데이터를 주고받게 된다.<br>일반적으로 우리가 많이 사용하는 Restful API(혹은 HTTP API)는 대부분 json의 형태로 데이터를 주고 받게 된다.<br>그럼 json 문자열이 우리가 정의한 Request 객체로 매핑을 할 때 null을 어떻게 핸들링 해야할까에 집중해서 간단히 정리해보았다.<br>해당 포스트와 연관성이 높은 <a href="/2021/09/20/spring-web-response-deserialization-for-null">(Spring) 외부 API의 Response 객체를 만들 때 null을 주의하자</a>도 읽는 것을 추천한다.</p><h2 id="코틀린"><a href="#코틀린" class="headerlink" title="코틀린"></a>코틀린</h2><p>코틀린은 nullable을 지원하다보니 소스코드에서 null에 대한 체크를 매번하지 않아도 돼서 매우 편하다.<br>하지만 이건 우리 소스코드 내부의 사정이고 소스코드 외부에서 들어오는 데이터의 경우에는 단정지을 수 없다.<br>그 단적인 예가 네트워크를 통해 들어오는 HTTP API의 요청이다.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestV1</span></span>(</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> text: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">api</span><span class="params">(<span class="meta">@RequestBody</span> request: <span class="type">RequestV1</span>)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 요청 객체와 API가 있다고 할 때 과연 number와 text는 non-null을 100% 보장할 수 있을까??  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebMvcTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mockMvc: MockMvc</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> `요청 객체 전송 시에 non-<span class="literal">null</span> 필드를 누락하면 HttpMessageNotReadableException 예외를 던진다`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> expected = HttpMessageNotReadableException::<span class="keyword">class</span>.java</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">actual</span> = mockMvc.post(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">            contentType = MediaType.APPLICATION_JSON</span><br><span class="line">            content = <span class="string">&quot;&quot;&quot;&#123;&quot;number&quot;: 13&#125;&quot;&quot;&quot;</span></span><br><span class="line">        &#125;.andExpect &#123;</span><br><span class="line">            status &#123; isBadRequest() &#125;</span><br><span class="line">        &#125;.andReturn().resolvedException</span><br><span class="line"></span><br><span class="line">        assertThat(<span class="keyword">actual</span>).isInstanceOf(expected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클라이언트에서 http 요청을 보낼 때 충분히 필수 필드를 누락할 수 있고, 이 때 서버에서 HttpMessageNotReadableException 예외를 던지게 된다.<br><code>org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot construct instance of ... problem: Parameter specified as non-null is null: method example.web.mvc.RequestV1.&lt;init&gt;, parameter text</code><br>기본적으로 이 경우에는 DefaultHandlerExceptionResolver에서 예외를 핸들링하여 warn 로그를 찍게 된다.<br>이런 경우에는 HttpMessageNotReadableException 보다는 MethodArgumentNotValidException 예외를 던지는 것이 더 적합해보인다.  </p><p>그러면 아래와 같이 코드를 개선해볼 수 있다.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestV2</span></span>(</span><br><span class="line">    number: <span class="built_in">Int</span>?,</span><br><span class="line">    text: String?</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Min(1)</span></span><br><span class="line">    <span class="keyword">val</span> number = number ?: <span class="number">0</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">val</span> text = text ?: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">api</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> request: <span class="type">RequestV2</span>)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우선 생성자를 전부 nullable로 정의해서 객체의 성공을 보장하고, 멤버변수는 전부 기본값을 정의해서 non-null을 보장하였다.<br>생성자의 인자를 기준으로 요청을 검증하는 게 아니라 이미 생성된 객체를 기준으로 검증을 하기 때문에 멤버변수에 할당된 기본값 기준으로 어노테이션을 설정해야한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> `요청 객체 전송 시에 유효하지 않은 필드가 존재하면 MethodArgumentNotValidException 예외를 던진다`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> expected = MethodArgumentNotValidException::<span class="keyword">class</span>.java</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">actual</span> = mockMvc.post(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        contentType = MediaType.APPLICATION_JSON</span><br><span class="line">        content = <span class="string">&quot;&quot;&quot;&#123;&quot;number&quot;: 13&#125;&quot;&quot;&quot;</span></span><br><span class="line">    &#125;.andDo &#123; print() &#125;.andExpect &#123;</span><br><span class="line">        status &#123; isBadRequest() &#125;</span><br><span class="line">        <span class="comment">// 응답으로 어떤 필드가 유효하지 않은지 추가하려면 @ExceptionHandler를 사용하여 MethodArgumentNotValidException를 핸들링 해야한다.</span></span><br><span class="line">        content &#123; string(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line">    &#125;.andReturn().resolvedException</span><br><span class="line"></span><br><span class="line">    assertThat(<span class="keyword">actual</span>).isInstanceOf(expected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>혹시나 Data Class를 꼭 사용해야한다면 아래와 같이도 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestV3</span></span>(</span><br><span class="line">    <span class="meta">@field:Min</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="meta">@field:NotBlank</span></span><br><span class="line">    <span class="keyword">val</span> text: String</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="keyword">constructor</span>(number: <span class="built_in">Int</span>?, text: String?) : <span class="keyword">this</span>(</span><br><span class="line">        number = number ?: <span class="number">0</span>,</span><br><span class="line">        text = text ?: <span class="string">&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자 함수가 아닌 멤버변수에 어노테이션을 설정하기 위해 @field라고 어노테이션 타겟을 명시했다.<br>(참고: <a href="https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets">Annotation use-site targets</a>)<br>또한 jackson은 기본 생성자를 리플렉션하여 객체를 생성하는데 기본 생성자가 없으니 객체 생성을 위해 사용할 생성자에 @JsonCreator 어노테이션을 달아주었다.</p><h2 id="자바"><a href="#자바" class="headerlink" title="자바"></a>자바</h2><p>자바에서도 똑같이 null에 대한 검증을 모두 끝마친 깔끔한 request dto 객체를 원할 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    <span class="meta">@Min(1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> number;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Request</span><span class="params">(<span class="keyword">final</span> Integer number, <span class="keyword">final</span> String text)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number == <span class="literal">null</span> ? <span class="number">0</span> : number;</span><br><span class="line">        <span class="built_in">this</span>.text = text == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> :text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적으로 요청 객체를 수정하는 행위는 소스코드의 예측력을 떨어뜨리므로 불변객체로 만들고,<br>불변객체이므로 getter를 사용하나 필드에 직접 접근하나 재할당하지 못한다는 사실은 똑같기 때문에 불필요하게 getter 메서드를 사용하지 않고, 접근이 필요한 필드의 경우에만 public 접근 지정자를 사용하여 직접 필드를 참조하도록 하였다.<br>jackson은 기본 생성자를 리플렉션하여 객체를 생성하는데 기본 생성자가 없으니 객체 생성을 위해 사용할 생성자에 @JsonCreator 어노테이션을 달아주었다.<br>또한 클라이언트로부터 어떤 요청이 들어올지 모르니 일단 생성자에서는 전부 null을 허용하고 기본값을 할당하였다.<br>생성된 요청 객체의 멤버변수에는 적절한 벨리데이션을 위한 어노테이션을 추가하면 된다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;소스코드 외부 세계에서 내부 세계로 데이터를 전달하기 위해서는 미리 정해진 프로토콜 및 API를 통해 데이터를 주고받게 된다.&lt;br&gt;일반적으로 우리가 많이 사용하는 Restful API(혹은 HTTP API)는 대부분 json의 형태로 데이터를 주고 받게 된다.&lt;br&gt;그럼 json 문자열이 우리가 정의한 Request 객체로 매핑을 할 때 null을 어떻게 핸들링 해야할까에 집중해서 간단히 정리해보았다.&lt;br&gt;해당 포스트와 연관성이 높은 &lt;a href=&quot;/2021/09/20/spring-web-response-deserialization-for-null&quot;&gt;(Spring) 외부 API의 Response 객체를 만들 때 null을 주의하자&lt;/a&gt;도 읽는 것을 추천한다.&lt;/p&gt;
&lt;h2 id=&quot;코틀린&quot;&gt;&lt;a href=&quot;#코틀린&quot; class=&quot;headerlink&quot; title=&quot;코틀린&quot;&gt;&lt;/a&gt;코틀린&lt;/h2&gt;&lt;p&gt;코틀린은 nullable을 지원하다보니 소스코드에서 null에 대한 체크를 매번하지 않아도 돼서 매우 편하다.&lt;br&gt;하지만 이건 우리 소스코드 내부의 사정이고 소스코드 외부에서 들어오는 데이터의 경우에는 단정지을 수 없다.&lt;br&gt;그 단적인 예가 네트워크를 통해 들어오는 HTTP API의 요청이다.  &lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RequestV1&lt;/span&gt;&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; number: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; text: String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Controller&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PostMapping&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@RequestBody&lt;/span&gt; request: &lt;span class=&quot;type&quot;&gt;RequestV1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;이런 요청 객체와 API가 있다고 할 때 과연 number와 text는 non-null을 100% 보장할 수 있을까??  &lt;/p&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://perfectacle.github.io/categories/Spring/"/>
    
    
    <category term="Spring" scheme="https://perfectacle.github.io/tags/Spring/"/>
    
    <category term="Jackson" scheme="https://perfectacle.github.io/tags/Jackson/"/>
    
    <category term="Web" scheme="https://perfectacle.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>(Java) Fail Fast Iterator</title>
    <link href="https://perfectacle.github.io/2021/08/14/fail-fast-iterator/"/>
    <id>https://perfectacle.github.io/2021/08/14/fail-fast-iterator/</id>
    <published>2021-08-14T19:20:03.000Z</published>
    <updated>2022-06-06T08:23:56.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제상황"><a href="#문제상황" class="headerlink" title="문제상황"></a>문제상황</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; mappings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">(<span class="keyword">final</span> CardCompanyCode cardCompanyCode)</span> &#123;</span><br><span class="line">    mappings.entrySet().forEach(e -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getValue() != cardCompanyCode) <span class="keyword">return</span>;</span><br><span class="line">        mappings.remove(e.getKey());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>맵에서 entrySet(key&#x2F;value 쌍)을 가져와 forEach 돌면서 특정 조건에 맞으면 맵에서 요소를 삭제했더니 한 번만 요소가 삭제되고나서 ConcurrentModificationException을 던졌다.</p><p>여기서 아래와 같은 의문점이 생겼다.</p><ol><li>맵의 요소를 삭제하는 건데 왜 예외를 던질까?</li><li>왜 한 번만 요소 삭제에 성공하는 걸까?</li><li>하나의 쓰레드에서 작업했는데 왜 <code>Concurrent</code>ModificationException을 던진 걸까?</li></ol><h2 id="Fail-Fast"><a href="#Fail-Fast" class="headerlink" title="Fail Fast"></a>Fail Fast</h2><blockquote><p>In systems design, a fail-fast system is one which immediately reports at its interface any condition that is likely to indicate a failure. Fail-fast systems are usually designed to stop normal operation rather than attempt to continue a possibly flawed process. Such designs often check the system’s state at several points in an operation, so any failures can be detected early. The responsibility of a fail-fast module is detecting errors, then letting the next-highest level of the system handle them.</p></blockquote><p><a href="https://en.wikipedia.org/wiki/Fail-fast">위키피디아 Fail-fast</a>에서 따온 건데, 실패 조건에 부합한다면 바로 후속 작업 같은 걸 멈추는 걸 fail-fast라고 부르는 것 같다.<br>비슷하게 gradle에서 테스트 같은 태스크를 돌릴 때 fail-fast 옵션을 킬 수 있는데, 하나의 테스트라도 실패하면 그 뒤에 테스트들은 실행조차 하지 않고 테스트가 실패했다고 처리하는 방식이다.<br>비슷한 맥락으로 runtime에서 터질 에러를 compile-time으로 땡겨와서 에러를 잡는 것도 Fail-fast 전략이라고도 부르는 것 같다. (자바에서는 not null 타입이 없어서 NullPointerException으로 runtime에 에러가 던져졌는데 코틀린에서는 not null 타입이 생기면서 null을 넘기면 compile-time에 에러가 생겨 좀 더 빠른 실패가 보장된다던지… 등등)</p><h2 id="Fail-Fast-Iterator"><a href="#Fail-Fast-Iterator" class="headerlink" title="Fail Fast Iterator"></a>Fail Fast Iterator</h2><p>실제 내가 사용했던 Map의 구현체인 <a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedHashMap.html">LinkedHashMap의 javadoc</a>을 보면 아래와 같이 나온다.</p><blockquote><p>The iterators returned by the iterator method of the collections returned by all of this class’s collection view methods are fail-fast: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator’s own remove method, the iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.</p></blockquote><p>this class(LinkedHashMap)의 collection view를 반환하는 메서드에 의해 반환된 컬렉션의 iterator 메서드에 의해 반환된 iterators는 fail-fast라고 한다. (자바의 Collections Framework에서 View에 대한 내용은 <a href="https://softwarecave.org/2014/03/19/views-in-java-collections-framework/">https://softwarecave.org/2014/03/19/views-in-java-collections-framework/</a> 를 참조 바람)</p><p><code>mappings.entries.forEach</code><br>여기서 말하는 collection view를 반환하는 methods는 위 예시에서 entries(내부적으로 자바의 entrySet 메서드 호출)를 의미하고, forEach 메서드 안에서 내부적으로 iterator 메서드를 호출하여 iterator를 반환받고 iterating 하고 있는 것이다.</p><p>만약 map(예시에서 LinkedHashMap)이 iterator 생성 이후 구조적으로 변경(put(add)&#x2F;remove 메서드를 통해 구조가 바뀌는 경우)되는 경우에는 iterator는 ConcurrentModificationException을 던진다.<br>이를 통해 잠재적으로 동시에 Map이 수정되는 현상을 방지하며 빠르고, 깔끔하게 실패처리를 하고 있다고 한다.</p><p>Map 입장에서는 이게 멀티쓰레드 환경에서 돈 건지 아닌지 모르고, 혹시나 모를 동시성 이슈에 대비해 구조가 바뀌면 바로 ConcurrentModificationException을 던지는 것 같다.</p><p>실제 LinkedHashMap의 구현체를 보면 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">        <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                               <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">      <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">          (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">          Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">          <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">              ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">              node = p;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                  node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">do</span> &#123;</span><br><span class="line">                      <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                          ((k = e.key) == key ||</span><br><span class="line">                           (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                          node = e;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                      p = e;</span><br><span class="line">                  &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                               (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">              <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                  ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="built_in">this</span>, tab, movable);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                  tab[index] = node.next;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  p.next = node.next;</span><br><span class="line">              ++modCount;</span><br><span class="line">              --size;</span><br><span class="line">              afterNodeRemoval(node);</span><br><span class="line">              <span class="keyword">return</span> node;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>removeNode 메서드의 맨 아랫 부분의 조건문을 보면 실제 삭제가 발생할 때 <code>++modCount</code>를 통해 변경된 횟수를 늘리고 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">    <span class="keyword">return</span> (es = entrySet) == <span class="literal">null</span> ? (entrySet = <span class="keyword">new</span> <span class="title class_">EntrySet</span>()) : es;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntrySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; HashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntryIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntryIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HashIterator</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">    Node&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">    <span class="type">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">    <span class="type">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">    HashIterator() &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        Node&lt;K,V&gt;[] t = table;</span><br><span class="line">        current = next = <span class="literal">null</span>;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entrySet 메서드를 통해 반환되는 EntrySet의 iterator 메서드는 EntryIterator를 반환하고, EntryIterator가 상속받은 HashIterator는 fast-fail을 위해 생성자에서 Map(LinkedHashMap)의 modCount를 expectedModCount 변수에 저장하고 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntryIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HashIterator</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">nextNode</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        Node&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">if</span> ((next = (current = e).next) == <span class="literal">null</span> &amp;&amp; (t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EntryIterator의 next 메서드는 부모 클래스인 HashIterator의 nextNode() 메서드를 호출하는데 그 안에서 객체 생성 당시의 modCount(expectedModCount)와 현재 Map(LinkedHashMap)의 modCount를 비교해서 다르면 ConcurrentModificationException을 던지고 있는 것을 볼 수 있다.<br>문제가 발생(할 가능성이 보이면)하면 후속작업을 하지 않고 바로 fail 처리(예외 던져버리기)를 해버리는 점에서 fail fast iterator라고 불리는 것 같다.</p><h2 id="문제-해결"><a href="#문제-해결" class="headerlink" title="문제 해결"></a>문제 해결</h2><p>그럼 다시 문제상황에서 어떻게 코드가 내부적으로 돌아갔을지 확인해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">(<span class="keyword">final</span> CardCompanyCode cardCompanyCode)</span> &#123;</span><br><span class="line">    mappings.entrySet().forEach(e -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getValue() != cardCompanyCode) <span class="keyword">return</span>;</span><br><span class="line">        mappings.remove(e.getKey());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>mappings.entrySet 메서드가 호출되고, EntrySet 타입을 반환받는다.</li><li>forEach에서 반복문을 돌리기 위해 EntrySet의 iterator 메서드가 호출됨에 따라 EntryIterator를 반환받는다.</li><li>EntryIterator의 부모인 HashIterator 생성자에서는 fail-fast를 위해 현재 Map의 modCount를 expectedModCount 변수에 저장한다.</li><li>forEach 메서드 안에서는 iterator.hasNext()가 호출되고 true를 반환함에 따라 iterator.next() 메서드가 호출되고, 그 반환값은 it라는 변수에 저장된다.</li><li>조건문에 따라 Map의 remove 메서드가 호출되고 그에 따라 Map의 modCount가 1 증가한다.</li><li>또 다시 iterator.hasNext()가 호출되고 true를 반환함에 따라 iterator.next() 메서드를 호출한다.</li><li>iterator.next()에서는 HashIterator의 nextNode() 메서드가 호출되고, 객체 생성 당시의 modCount(expectedModCount)와 현재 Map의 modCount가 다르기 때문에 ConcurrentModificationException을 던진다.</li></ol><p>이 문제를 해결하기 위해서는 map.remove 메서드가 아닌 iterator.remove() 메서드를 사용해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HashIterator</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = current;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        current = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> p.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterator.remove() 메서드 안에서도 실제로 removeNode(map.remove에서도 호출함) 메서드가 호출되지만, expectedModCount를 현재 modCount로 갱신하는 게 큰 차이점이다.</p><p>따라서 위 예시는 아래와 같이 바꾸면 해결된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">(<span class="keyword">final</span> CardCompanyCode cardCompanyCode)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;String, CardCompanyCode&gt;&gt; iterator = mappings.entrySet().iterator();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">final</span> Map.Entry&lt;String, CardCompanyCode&gt; entry = iterator.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entry.getValue() != cardCompanyCode) <span class="keyword">return</span>;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fail-Safe-Iterator-Non-Fail-Fast-Iterator"><a href="#Fail-Safe-Iterator-Non-Fail-Fast-Iterator" class="headerlink" title="Fail Safe Iterator (Non Fail Fast Iterator)"></a>Fail Safe Iterator (Non Fail Fast Iterator)</h2><p>Fail Safe Iterator라는 용어가 없지만 Fail Fast Iterator와 반대되는 개념이라고 보면 된다.</p><p>대표적으로 ConcurrentHashMap의 Collection View를 반환하는 메서드(entrySet, keySet, valueSet 등등)의 iterator 메서드가 생성하는 iterator가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntryIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    EntryIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> size, <span class="type">int</span> limit,</span><br><span class="line">                  ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">        <span class="built_in">super</span>(tab, index, size, limit, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        <span class="keyword">if</span> ((p = next) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;</span><br><span class="line">        <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.val;</span><br><span class="line">        lastReturned = p;</span><br><span class="line">        advance();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapEntry</span>&lt;K,V&gt;(k, v, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConcurrentHashMap의 entrySet 메서드의 반환타입인 EntrySetView의 iterator 메서드의 반환타입인 EntryIterator의 next 메서드를 보면 ConcurrentModificationException을 던지지 않는 것을 볼 수 있다.<br>즉, fail fast iterator와 달리 새로운 요소가 추가&#x2F;삭제되더라도 끝까지 모든 요소를 순회하는 것이다.</p><p>ConcurrentHashMap에서 요소가 추가&#x2F;제거되더라도 ConcurrentModificationException을 던지지 않는 이유는 ConcurrentHashMap은 추가&#x2F;삭제 메서드에 synchronized 키워드를 사용하여 락을 잡은 후 다른 쓰레드에서 건드리지 못하도록 하기에 동시성으로부터 안전하기 때문이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> replaceNode(key, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">replaceNode</span><span class="params">(Object key, V value, Object cv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">            (f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">validated</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (validated) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">                        addCount(-<span class="number">1L</span>, -<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, fail safe iterator는 요소가 추가&#x2F;삭제 되더라도 ConcurrentModificationException을 던지지 않고 모든 요소를 순회할 수 있으며 동시성 이슈로부터도 안전하다(Safe).</p><p>위와 같이 syncronized로 해결하는 케이스도 있지만, CopyOnWriteArrayList처럼 원본 collection을 카피한 후 카피한 collection으로부터 iterator를 생성하여 사용하는 fail safe iterator도 있다. (원본 collection과 생성된 iterator는 무관하기 때문에 ConcurrentModificationException을 던지지 않는다.)</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;문제상황&quot;&gt;&lt;a href=&quot;#문제상황&quot; class=&quot;headerlink&quot; title=&quot;문제상황&quot;&gt;&lt;/a&gt;문제상황&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; mappings;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; CardCompanyCode cardCompanyCode)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mappings.entrySet().forEach(e -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e.getValue() != cardCompanyCode) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mappings.remove(e.getKey());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;맵에서 entrySet(key&amp;#x2F;value 쌍)을 가져와 forEach 돌면서 특정 조건에 맞으면 맵에서 요소를 삭제했더니 한 번만 요소가 삭제되고나서 ConcurrentModificationException을 던졌다.&lt;/p&gt;
&lt;p&gt;여기서 아래와 같은 의문점이 생겼다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;맵의 요소를 삭제하는 건데 왜 예외를 던질까?&lt;/li&gt;
&lt;li&gt;왜 한 번만 요소 삭제에 성공하는 걸까?&lt;/li&gt;
&lt;li&gt;하나의 쓰레드에서 작업했는데 왜 &lt;code&gt;Concurrent&lt;/code&gt;ModificationException을 던진 걸까?&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://perfectacle.github.io/categories/Programming/"/>
    
    <category term="Java" scheme="https://perfectacle.github.io/categories/Programming/Java/"/>
    
    
    <category term="Java" scheme="https://perfectacle.github.io/tags/Java/"/>
    
    <category term="Iterator" scheme="https://perfectacle.github.io/tags/Iterator/"/>
    
    <category term="Collection" scheme="https://perfectacle.github.io/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>(JPA) Readonly 트랜잭션은 Dirty Checking을 하지 않는다</title>
    <link href="https://perfectacle.github.io/2021/08/08/readonly-transaction-doesnt-make-entity-snapshot/"/>
    <id>https://perfectacle.github.io/2021/08/08/readonly-transaction-doesnt-make-entity-snapshot/</id>
    <published>2021-08-08T23:29:33.000Z</published>
    <updated>2022-06-06T08:23:56.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3줄-요약"><a href="#3줄-요약" class="headerlink" title="3줄 요약"></a>3줄 요약</h2><ol><li>@Transaction(readOnly &#x3D; true)로 설정하면 select 할 당시 엔티티의 스냅샷을 만들지 않는다.</li><li><a href="/2021/05/05/readonly-transaction-begin-transaction/">(JPA) Readonly 트랜잭션은 트랜잭션을 시작하지만 flush를 하지 않는다</a>에서 봤다 싶이 트랜잭션이 커밋될 때 flush를 하지 않는다.</li><li>flush를 할 필요가 없기 때문에 Dirty Checking을 할 필요가 없고, 그에 따라서 엔티티의 스냅샷도 만들지 않는 것이다.</li></ol><h2 id="엔티티-구조"><a href="#엔티티-구조" class="headerlink" title="엔티티 구조"></a>엔티티 구조</h2><p>이해를 편하게 돕기 위해 엔티티는 아래와 같은 구조를 가진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;parents&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long no;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;helloName&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> SomeType someType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeType</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String helloName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SomeType</span><span class="params">(<span class="keyword">final</span> String helloName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.helloName = helloName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SomeType은 JPA에서 모르는 커스텀 타입이기 때문에 컨버터를 만들어주자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Converter(autoApply = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeAttributeConverter</span> <span class="keyword">implements</span> <span class="title class_">AttributeConverter</span>&lt;SomeType, String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">convertToDatabaseColumn</span><span class="params">(<span class="keyword">final</span> SomeType attribute)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> attribute.getHelloName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SomeType <span class="title function_">convertToEntityAttribute</span><span class="params">(<span class="keyword">final</span> String dbData)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SomeType</span>(dbData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 편의성을 위해 convertToEntityAttribute 메서드에 브레이크 포인트를 걸고 확인해보면 편하다.</p><h2 id="Readonly-트랜잭션이-아니면-스냅샷을-만든다-엔티티를-딥카피한다"><a href="#Readonly-트랜잭션이-아니면-스냅샷을-만든다-엔티티를-딥카피한다" class="headerlink" title="Readonly 트랜잭션이 아니면 스냅샷을 만든다 (엔티티를 딥카피한다)"></a>Readonly 트랜잭션이 아니면 스냅샷을 만든다 (엔티티를 딥카피한다)</h2><p>테스트를 위해 Repository에 Readonly 트랜잭션이 아닌 findBy 메서드를 만든다.<br>(SimpleJpaRepositroy의 findById 메서드는 readonly 트랜잭션이기 때문에 커스텀 메서드를 만들었다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ParentRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Parent, Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    Parent <span class="title function_">findByNo</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> no)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 findByNo를 호출하면서 SomeAttributeConverter.convertToEntityAttribute 메서드는 몇 번 호출되는지 보자.</p><img src="/2021/08/08/readonly-transaction-doesnt-make-entity-snapshot/convert-01.png" class="" title="LoadEvent가 발생하면서 AttributeConvert가 호출되고 있다.">  <img src="/2021/08/08/readonly-transaction-doesnt-make-entity-snapshot/convert-02.png" class="" title="그 이후에 딥카피가 발생하면서 한 번 더 AttributeConvert가 호출되고 있다.">  <p><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java#L339">TwoPhaseLoad.initializeEntityFromEntityEntryLoadedState 메서드</a>가 핵심이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( isReallyReadOnly ) &#123;</span><br><span class="line">    <span class="comment">//no need to take a snapshot - this is a</span></span><br><span class="line">    <span class="comment">//performance optimization, but not really</span></span><br><span class="line">    <span class="comment">//important, except for entities with huge</span></span><br><span class="line">    <span class="comment">//mutable property values</span></span><br><span class="line">    persistenceContext.setEntryStatus( entityEntry, Status.READ_ONLY );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//take a snapshot</span></span><br><span class="line">    TypeHelper.deepCopy(</span><br><span class="line">            hydratedState,</span><br><span class="line">            persister.getPropertyTypes(),</span><br><span class="line">            persister.getPropertyUpdateability(),</span><br><span class="line">            <span class="comment">//after setting values to object</span></span><br><span class="line">            hydratedState,</span><br><span class="line">            session</span><br><span class="line">    );</span><br><span class="line">    persistenceContext.setEntryStatus( entityEntry, Status.MANAGED );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>readonly 트랜잭션이면 성능최적화를 위해 스냅샷을 만들 필요가 없다고 하고 있고, 그게 아니면 스냅샷을 만들고 있고 그 안에서 딥카피가 수행되고 있다.</p><p><strong>여기서 핵심은 트랜잭션을 생성하지 않더라도 스냅샷(딥카피)를 만든다는 것이다.</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ParentRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Parent, Long&gt; &#123;</span><br><span class="line">    Parent <span class="title function_">findByNo</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> no)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 트랜잭션을 생성하지 않더라도 리드온리 트랜잭션은 아니기 때문에 else 구문을 탄다.</p><h2 id="Readonly-트랜잭션이면-스냅샷을-만들지-않는다"><a href="#Readonly-트랜잭션이면-스냅샷을-만들지-않는다" class="headerlink" title="Readonly 트랜잭션이면 스냅샷을 만들지 않는다"></a>Readonly 트랜잭션이면 스냅샷을 만들지 않는다</h2><p>이번에는 readonly 트랜잭션을 사용하는 <a href="https://github.com/spring-projects/spring-data-jpa/blob/main/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java#L295">SimpleJpaRepository.findById</a> 메서드를 사용하여 스냅샷(딥카피)을 만드는지 직접 확인해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleJpaRepository</span>&lt;T, ID&gt; <span class="keyword">implements</span> <span class="title class_">JpaRepositoryImplementation</span>&lt;T, ID&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;T&gt; <span class="title function_">findById</span><span class="params">(ID id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Assert.notNull(id, ID_MUST_NOT_BE_NULL);</span><br><span class="line"></span><br><span class="line">        Class&lt;T&gt; domainType = getDomainClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (metadata == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.ofNullable(em.find(domainType, id));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LockModeType</span> <span class="variable">type</span> <span class="operator">=</span> metadata.getLockModeType();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; hints = getQueryHints().withFetchGraphs(em).asMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(type == <span class="literal">null</span> ? em.find(domainType, id, hints) : em.find(domainType, id, type, hints));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 보다싶이 SimpleJpaRepository는 타입에 readonly 트랜잭션이 적용돼있어서 해당 어노테이션을 오버라이딩 하지 않은 모든 메서드는 readonly 트랜잭션을 사용한다는 것을 알 수 있다.</p><img src="/2021/08/08/readonly-transaction-doesnt-make-entity-snapshot/readonly-01.png" class="" title="readonly 트랜잭션이기 때문에 스냅샷을 만들지 않는 걸 볼 수 있다."><p>이렇듯 JPA(하이버네이트)에서는 readonly 트랜잭션이면 성능최적화를 위해 엔티티의 스냅샷(딥카피)을 만들지 않는 걸 볼 수 있다.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;3줄-요약&quot;&gt;&lt;a href=&quot;#3줄-요약&quot; class=&quot;headerlink&quot; title=&quot;3줄 요약&quot;&gt;&lt;/a&gt;3줄 요약&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;@Transaction(readOnly &amp;#x3D; true)로 설정하면 select 할 당시 엔티티의 스냅샷을 만들지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/05/05/readonly-transaction-begin-transaction/&quot;&gt;(JPA) Readonly 트랜잭션은 트랜잭션을 시작하지만 flush를 하지 않는다&lt;/a&gt;에서 봤다 싶이 트랜잭션이 커밋될 때 flush를 하지 않는다.&lt;/li&gt;
&lt;li&gt;flush를 할 필요가 없기 때문에 Dirty Checking을 할 필요가 없고, 그에 따라서 엔티티의 스냅샷도 만들지 않는 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;엔티티-구조&quot;&gt;&lt;a href=&quot;#엔티티-구조&quot; class=&quot;headerlink&quot; title=&quot;엔티티 구조&quot;&gt;&lt;/a&gt;엔티티 구조&lt;/h2&gt;&lt;p&gt;이해를 편하게 돕기 위해 엔티티는 아래와 같은 구조를 가진다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Table(name = &amp;quot;parents&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Parent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GeneratedValue(strategy = GenerationType.IDENTITY)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long no;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column(name = &amp;quot;helloName&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SomeType someType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Back-end" scheme="https://perfectacle.github.io/categories/Back-end/"/>
    
    <category term="DB" scheme="https://perfectacle.github.io/categories/Back-end/DB/"/>
    
    <category term="JPA" scheme="https://perfectacle.github.io/categories/Back-end/DB/JPA/"/>
    
    
    <category term="JPA" scheme="https://perfectacle.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>(JPA) persist vs merge</title>
    <link href="https://perfectacle.github.io/2021/06/13/entity-manager-persist-vs-merge/"/>
    <id>https://perfectacle.github.io/2021/06/13/entity-manager-persist-vs-merge/</id>
    <published>2021-06-13T04:02:52.000Z</published>
    <updated>2022-06-06T08:23:56.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>글을 정리하다 보니 너무 깊게 파고 정리한 거 같아 글이 너무 길어져서 아무도 읽지 않을 것 같아 정리부터 해보겠습니다.</p><ol><li>엔티티 매니저의 persist 메서드는 리턴값이 없기 때문에 원본 객체를 수정하고, merge 메서드는 리턴값이 있기 때문에 새로운 객체를 반환합니다.</li><li>JpaRepository.save 호출 시 엔티티의 식별자(@Id, @EmbeddedId 어노테이션이 붙은 컬럼 등등)가 붙은 필드의 타입이 primitive type이 아닐 때는 null이거나 숫자형일 때는 0이면 새로운 엔티티라고 판단하면서 persist 메서드가 호출되고, 그게 아니면 merge 메서드가 호출됩니다. </li><li>JPQL 호출 시 FlushMode가 AUTO(하이버네이트 기본 FlushMode)라 하더라도 쿼리 지연 저장소에 JPQL에서 사용하는 테이블과 관련있는 쿼리가 저장돼있지 않다면 flush를 호출하지 않습니다.</li><li>JPQL 호출 시 AutoFlushEvent가 발생하면서 flush 이전에 cascade가 먼저 이뤄지는데 이 때는 PersistEvent가 발생하면서 원본 엔티티를 변경합니다.</li><li>JpaRepository.save 호출 시 엔티티가 새로운 엔티티가 아니면 MergeEvent가 발생하고, cascade가 발생하는데 이 때 해당 엔티티에 대해 MergeEvent가 또 발생하면서 Transient 상태인 경우에는 원본 엔티티를 카피하고 카피한 객체의 값을 수정하고 연관관계가 맺어진 엔티티에서는 레퍼런스도 카피 객체로 바꿔치기 하고 있습니다.</li><li>JpaRepository.save 호출 시 엔티티가 새로운 엔티티가 아니면 MergeEvent가 발생하는데 cascade 이후에 DirtyChecking이나 Flush가 호출되지 않습니다.</li><li>모든 트랜잭션이 끝난 이후에 커밋 이전에 FlushMode가 MANUAL이 아니고, Managed Entity가 존재하면 FlushEvent를 발생시켜서 DirtyChecking 및 Flush를 하게 됩니다.</li></ol><p>제목은 엔티티 매니저의 persist와 merge에 대해 개념을 설명할 것처럼 적어놨지만 이해를 돕기 위해, 흥미 유발을 위해 사내에서 겪었던 문제 과정을 서술하겠습니다.</p><h2 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="string">&quot;mother&quot;</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="string">&quot;mother&quot;</span>, cascade = [CascadeType.ALL])</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> children: MutableSet&lt;Child&gt; = mutableSetOf()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 산모 보호 차원에서 최근 출산일을 기록합니다.</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="string">&quot;recent_childbirth&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> recentChildbirth: ZonedDateTime? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">born</span><span class="params">(child: <span class="type">Child</span>)</span></span> &#123;</span><br><span class="line">        children.add(child)</span><br><span class="line">        child.bornFrom(<span class="keyword">this</span>)</span><br><span class="line">        recentChildbirth = ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Seoul&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="string">&quot;child&quot;</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mother: Mother? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">val</span> birthday: LocalDate = LocalDate.now()</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bornFrom</span><span class="params">(mother: <span class="type">Mother</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mother = mother</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="comment">// 엄마 아빠 유전자의 조합으로 인해 아이를 생성합니다.</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(father: <span class="type">Father</span>, mother: <span class="type">Mother</span>)</span></span>: Child &#123;</span><br><span class="line">            <span class="keyword">return</span> Child(...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자식을 낳는 Mother 엔티티와 Child 엔티티가 1:N 양방향 관계 매핑이 돼있는 상황입니다.<br>그리고 Mother의 모든 Cascade(영속성 전이) Action에 대해 children에게 전파가 되도록 하였습니다.</p><p>이제 산모는 출산 예정일이 다가와 산부인과에서 출산을 시작합니다.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 산부인과 표현이 이게 맞는지 모르겠네용~</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObGyn</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> motherRepository: MotherRepository,</span><br><span class="line">    <span class="comment">// 산부인과에서 영재 양성 기관과 호적 저장소를 알고 있는 기이한 현상이지만 예제를 위해서 참아주세요!</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> talentedPersonTrainingSchool: TalentedPersonTrainingSchool,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> familyRegisterRepository: FamilyRegisterRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// @Transactional 어노테이션을 붙인 이유는 예제를 위해 영속성 컨텍스트를 강제로 넓히기 위함이지 다른 이유는 없습니다.</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">naturalDeliveryWith</span><span class="params">(father: <span class="type">Father</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> mother =</span><br><span class="line">            motherRepository.findByIdOrNull(father.wifeId) ?: <span class="keyword">throw</span> MotherNotFoundException(<span class="string">&quot;병원에 산모가 없습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> child = Child.create(father, mother)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 엄마가 아이를 낳습니다.</span></span><br><span class="line">        mother.born(child)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 아이의 부모는 아이가 태어나자마자 영재라는 삘이 와서 바로 영재 양성 기관에 등록합니다.</span></span><br><span class="line">        talentedPersonTrainingSchool.register(child)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 아이가 너무 마음에 들어 바로 호적에 올려버립니다.</span></span><br><span class="line">        <span class="keyword">val</span> familyRegister = familyRegisterRepository.findByFatherId(father.id)</span><br><span class="line">        familyRegister?.add(child)</span><br><span class="line">        <span class="keyword">if</span> (familyRegister != <span class="literal">null</span>) &#123;</span><br><span class="line">            familyRegisterRepository.save(familyRegister)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 산모의 최근 출산일도 변경되었고, 자식도 새롭게 생성되어서 child도 같이 저장해야할 것 같지만</span></span><br><span class="line">        <span class="comment">// 산모 객체의 children 필드는 CascadeType이 ALL이기 때문에 따로 child 객체는 저장하지 않아도 됩니다.</span></span><br><span class="line">        motherRepository.save(mother)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TalentedPersonTrainingSchool</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> talentedPersonRepository: TalentedPersonRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">register</span><span class="params">(child: <span class="type">Child</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> talentedPerson = TalentedPerson(child.id)</span><br><span class="line">        talentedPersonRepository.save(talentedPerson)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드가 더럽긴 하지만, 일단 코드는 잘 돌아갈 것 같습니다만…<br>TalentedPersonTrainingSchool의 register 메서드를 호출할 때 TalentedPerson 객체에 child.id 필드에 접근합니다. </p><img src="/2021/06/13/entity-manager-persist-vs-merge/child-has-not-id.png" class="" title="하지만 child 객체는 생성 당시 id 값을 지정하지 않았고, 아직 Transient(엔티티 매니저의 영속성 컨텍스트에 저장된 적도, DB에 저장된 적도 없는) 상태라 id는 null입니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/child-has-id-after-save.png" class="" title="save 이후에 브레이크 포인트를 찍어서 보면 child에 id가 할당돼있는 걸 볼 수 있습니다."><p>save를 하기 전에 엔티티의 ID를 사용하려고 해서 문제가 발생했으니 이제 save를 먼저 호출하면 될 것 같습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">naturalDeliveryWith</span><span class="params">(father: <span class="type">Father</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// child 엔티티의 id를 사용하기 전에 먼저 save를 때려줍니다. </span></span><br><span class="line">    motherRepository.save(mother)</span><br><span class="line"></span><br><span class="line">    talentedPersonTrainingSchool.register(child)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/06/13/entity-manager-persist-vs-merge/child-has-not-id-after-save.png" class=""><p>save를 먼저 호출했음에도 불구하고, child의 id가 null입니다.<br>하지만 mother.children[0]에 있는 child에는 id가 박혀있습니다!!<br>또한 child와 mother.children[0]의 레퍼런스가 다른 걸 보아 다른 객체로 보이는군요!!</p><p>JPA 알못인 저에게는 정말 이해할 수 없는 미스테리였습니다.</p><h2 id="원인-분석"><a href="#원인-분석" class="headerlink" title="원인 분석"></a>원인 분석</h2><p>먼저 쿼리 로그를 한 번 봐봅시다.<br>save를 가장 나중에 호출한 케이스입니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> motherRepository.findByIdOrNull(father.wifeId)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        mother0_.id <span class="keyword">as</span> id1_4_0_,</span><br><span class="line">        mother0_.recent_childbirth <span class="keyword">as</span> recent_c2_4_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        mother mother0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        mother0_.id<span class="operator">=</span>?</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> mother.children의 FetchType이 eager가 아니기 때문에 실제 children을 사용할 때(mother.born(child) 메서드 안에서) lazy하게 쿼리를 날립니다.</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        children0_.mother_id <span class="keyword">as</span> mother_i3_2_0_,</span><br><span class="line">        children0_.id <span class="keyword">as</span> id1_2_0_,</span><br><span class="line">        children0_.id <span class="keyword">as</span> id1_2_1_,</span><br><span class="line">        children0_.birthday <span class="keyword">as</span> birthday2_2_1_,</span><br><span class="line">        children0_.mother_id <span class="keyword">as</span> mother_i3_2_1_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        child children0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        children0_.mother_id<span class="operator">=</span>?</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> familyRegisterRepository.findByFatherId(father.id)는 JPQL이기 때문에 쿼리 실행 이전에 flush를 호출(hibernate의 기본 FlushMode가 AUTO이상이고 기타 등등의 사유로 인해) 해야하는지 판단하는데</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> mother.born(child)에 의해 mother(Managed Entity)의 children의 child(Transient Entity)에 대해서는 <span class="keyword">insert</span> 쿼리가 날아갔습니다.</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 신기한 건 mother(Managed Entity)는 변경사항(recentChildbirth 필드)이 있는데도 <span class="keyword">update</span> 쿼리가 실행되지 않았습니다.</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        child</span><br><span class="line">        (id, birthday, mother_id) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (<span class="keyword">null</span>, ?, ?)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> familyRegisterRepository.findByFatherId(father.id)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        familyregi0_.id <span class="keyword">as</span> id1_3_,</span><br><span class="line">        familyregi0_.fatherId <span class="keyword">as</span> fatherid2_3_,</span><br><span class="line">        familyregi0_.motherId <span class="keyword">as</span> motherid3_3_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        family_register familyregi0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        familyregi0_.fatherId<span class="operator">=</span>?</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> motherRepository.save(mother) 이후에 바로 호출된 게 아니라 naturalDeliveryWith 메서드를 마치고 TransactionInterceptor에서 커밋하기 전에 flush를 호출했습니다.</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">update</span></span><br><span class="line">        mother </span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">        recent_childbirth<span class="operator">=</span>? </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        id<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><h3 id="Child는-왜-insert-됐는가"><a href="#Child는-왜-insert-됐는가" class="headerlink" title="Child는 왜 insert 됐는가??"></a>Child는 왜 insert 됐는가??</h3><p>너무 내용이 길어서 3 줄로 요약해보면 </p><ol><li>JPQL 호출 이전에 AutoFlushEvent를 발생시키고 이벤트 핸들러인 DefaultAutoFlushEventListener 안에서 flushMightBeNeeded 메서드를 호출하는데 하이버네이트의 기본 FlushMode가 AUTO이기 때문에 true를 반환합니다.</li><li>본격적으로 flush 호출 이전에 전처리 작업(AbstractFlushingEventListener 클래스의 prepareEntityFlushes 메서드 등등)에서 영속성 컨텍스트에 있는 엔티티들에 대해 cascade를 수행합니다.</li><li>이 때 영속성 컨텍스트에 있는 Mother 엔티티의 children 프로퍼티에 대해 cascade 되면서 insert 쿼리가 호출됐습니다.</li></ol><p><code>child가 insert 된 이유는 flush를 호출했기 때문이 아니라 flush 이전에 cascade를 했기 때문입니다.</code></p><p>우선 JPQL을 호출하기 전에 child의 insert는 호출됐는데 왜 mother의 update는 호출이 되지 않은 건지 너무나 궁금했습니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/session-impl-auto-flush-if-required.png" class="" title="familyRegisterRepository.findByFatherId()를 쭉쭉 타고 들어가다보면 autoFlushIfRequired() 메서드를 호출하는 걸 볼 수 있습니다."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * detect in-memory changes, determine if the changes are to tables</span></span><br><span class="line"><span class="comment"> * named in the query and, if so, complete execution the flush</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">autoFlushIfRequired</span><span class="params">(Set querySpaces)</span> <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line">    checkOpen();</span><br><span class="line">    <span class="keyword">if</span> ( !isTransactionInProgress() ) &#123;</span><br><span class="line">        <span class="comment">// do not auto-flush while outside a transaction</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AutoFlushEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoFlushEvent</span>( querySpaces, <span class="built_in">this</span> );</span><br><span class="line">    fastSessionServices.eventListenerGroup_AUTO_FLUSH.fireEventOnEachListener( event, AutoFlushEventListener::onAutoFlush );</span><br><span class="line">    <span class="keyword">return</span> event.isFlushRequired();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 그 안에는 AutoFlushEvent를 발생시키고 있습니다.<br>DefaultAutoFlushEventListener의 onAutoFlush 메서드를 이벤트 리스너로 등록하고 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAutoFlush</span><span class="params">(AutoFlushEvent event)</span> <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EventSource</span> <span class="variable">source</span> <span class="operator">=</span> event.getSession();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SessionEventListenerManager</span> <span class="variable">eventListenerManager</span> <span class="operator">=</span> source.getEventListenerManager();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        eventListenerManager.partialFlushStart();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( flushMightBeNeeded( source ) ) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onAutoFlush 메서드에서는 flush가 필요한지 확인하고 있는데</p><img src="/2021/06/13/entity-manager-persist-vs-merge/flush-might-be-needed.png" class="" title="Hibernate의 기본 FlushMode는 AUTO이고, ManagedEntity가 1개 이상이기 때문에 true를 반환합니다"><img src="/2021/06/13/entity-manager-persist-vs-merge/in-flush-might-be-needed.png" class="" title="쿼리 지연 저장소(ActionQueue)에는 현재 하나도 쿼리가 없는 상태입니다."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">flushEverythingToExecutions</span><span class="params">(FlushEvent event)</span> <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line"></span><br><span class="line">    LOG.trace( <span class="string">&quot;Flushing session&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="type">EventSource</span> <span class="variable">session</span> <span class="operator">=</span> event.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">PersistenceContext</span> <span class="variable">persistenceContext</span> <span class="operator">=</span> session.getPersistenceContextInternal();</span><br><span class="line">    session.getInterceptor().preFlush( persistenceContext.managedEntitiesIterator() );</span><br><span class="line"></span><br><span class="line">    prepareEntityFlushes( session, persistenceContext );</span><br><span class="line">    <span class="comment">// we could move this inside if we wanted to</span></span><br><span class="line">    <span class="comment">// tolerate collection initializations during</span></span><br><span class="line">    <span class="comment">// collection dirty checking:</span></span><br><span class="line">    prepareCollectionFlushes( persistenceContext );</span><br><span class="line">    <span class="comment">// now, any collections that are initialized</span></span><br><span class="line">    <span class="comment">// inside this block do not get updated - they</span></span><br><span class="line">    <span class="comment">// are ignored until the next flush</span></span><br><span class="line"></span><br><span class="line">    persistenceContext.setFlushing( <span class="literal">true</span> );</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">entityCount</span> <span class="operator">=</span> flushEntities( event, persistenceContext );</span><br><span class="line">        <span class="type">int</span> <span class="variable">collectionCount</span> <span class="operator">=</span> flushCollections( session, persistenceContext );</span><br></pre></td></tr></table></figure><p>flushEverythingToExecutions를 보면 prepareEntityFlushes, prepareCollectionFlushes를 통해 플러시 전처리를 하고,<br>flushEntities, flushCollections 메서드를 통해 실제로 플러시를 하는 것 같습니다.</p><p>이제 prepareEntityFlushes 메서드를 딥다이브 해봅시다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-on-flush-for-managed-entity.png" class="" title="영속성 컨텍스트에 있는 놈 중 일부(reentrantSafeEntityEntries() 메서드 호출을 통해) 엔티티에 대해 영속성 전이(cascade)를 하고 있습니다.">  <p>현재 영속성 컨텍스트에 엔티티는 Mother(#1) 엔티티 하나 뿐이고, flush 하기 전에 엔티티에 대해서 영속성 전이시키는 걸 볼 수 있습니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-on-flush-before-flush.png" class="" title="flush 하기 이전에 cascade를 한다고 CascadePoint.BEFORE_FLUSH를 인자로 넘겨주고 있습니다.">  <p>참고로 getCascadingAction()의 결과는 ACTION_PERSIST_ON_FLUSH입니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-for-property-for-loop-01.png" class="" title="그리고 Mother 엔티티의 프로퍼티들의 타입과 이름을 구해와서 반복문을 돌리고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-for-property-for-loop-02.png" class="" title="프로퍼티마다 cascade를 하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-property-for-children.png" class="" title="children은 @OneToMany로 AssociationType이라서 cascadeAssociation 메서드가 호출됩니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-association-for-children.png" class="" title="children은 MutableSet&lt;Child&gt; 타입이라 collectionType이기 때문에 cascadeCollection 메서드가 호출됩니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-collection-for-children.png" class="" title="elemType(Child)의 isEntityType() 메서드가 true이기 때문에 cascadeCollectionElements 메서드가 호출됩니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-collection-elements-for-children.png" class="" title="children의 이터레이터를 가져와서 모든 요소에 대해 cascadeProperty 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-property-for-child.png" class="" title="child가 parent와 @ManyToOne으로 관계를 맺고 있기 때문에 associationType이라 cascadeAssociation 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-assocation-for-child.png" class="" title="child는 entityType이기 때문에 cascadeToOne 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-to-one-for-child.png" class="" title="ACTION_PERSIST_ON_FLUSH action의 cascade 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/session-impl-persist-on-flush.png" class="" title="SessionImpl(하이버네이트에서 EntityManager 인터페이스의 구현체)의 persistOnFlush에서 PersistEvent를 만들고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-persist-event-listener-on-persist.png" class="" title="DefaultPersistEventListener의 onPersist 메서드가 호출되는데 entity의 상태가 Transient이기 때문에 entityIsTransient 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/abstract-save-event-listener-add-insert-action.png" class="" title="AbstractSaveEventListener의 addInsertAction 메서드가 호출되는데 isDelayed가 false인 insert action을 넘겨주고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/action-queue-add-insert-action-01.png" class="" title="ActionQueue의 addInsertAction 메서드를 호출하는데 isDelayed가 false이기 때문에 insert.isEarlyInsert()가 true라서 큐에 인서트 액션을 넣지 않고, 바로 executeInserts 메서드를 호출해서 쿼리를 실행하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/action-queue-execute-inserts.png" class="" title="큐에 있는 인서트 쿼리를 호출하려고 보니 큐가 비어있어서 사실상 호출하지는 않습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/action-queue-add-insert-action-02.png" class="" title="ActionQueue의 addInsertAction 메서드로 다시 돌아와서 nonNullableTransientDependencies는 null이기 때문에 addResolvedEntityInsertAction 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/action-queue-add-resolved-entity-insert-action.png" class="" title="ActionQueue의 addResolvedEntityInsertAction 메서드에서는 executeInserts 메서드를 다시 호출하는데 insert 큐에 쿼리가 없어서 아무것도 실행되지 않고 execute 메서드에서 해당 insert 쿼리를 실행합니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/abstract-returning-delegate-perform-insert.png" class="" title="AbstractReturningDelegate의 performInsert 메서드에서는 JDBC의 PreparedStatement도 보이고, 실제로 insert 쿼리를 실행하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/entity-identity-insert-action-execute.png" class="" title="insert 쿼리 실행 이후 id 값을 받아온 후 EntityIdentityInsertAction의 execute 메서드 안에서 AbstractEntityPersister의 setIdentifier 메서드를 호출하고 있습니다.">  <img src="/2021/06/13/entity-manager-persist-vs-merge/set-id-non-final.png" class="" title="안을 까고 들어가보면 리플렉션을 사용하고 있고, id 필드가 final이 아닌 경우(var)에는 UnsafeObjectFieldAccessorImpl의 set 메서드를 호출합니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/set-id-final.png" class="" title="id 필드가 final인 경우(val)에는 UnsafeQualifiedObjectFieldAccessorImple의 set 메서드를 호출합니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/set-id-final-primitive.png" class="" title="id 필드가 final이면서(val) primitive long 타입인 경우에는 UnsafeQualifiedLongFieldAccessorImple의 set 메서드를 호출합니다."><h3 id="Mother는-왜-update-되지-않았는가"><a href="#Mother는-왜-update-되지-않았는가" class="headerlink" title="Mother는 왜 update 되지 않았는가?"></a>Mother는 왜 update 되지 않았는가?</h3><p>이것도 내용이 길어서 3줄 요악 해보겠습니다.</p><ol><li>AbstractFlushingEventListener 클래스의 flushEntities 메서드에서는 flush 호출 이전에 영속성 컨텍스트에 있는 엔티티에 대해 Dirty Checking이 발생하고, 쿼리 지연 저장소(ActionQueue)에 EntityUpdateAction을 추가합니다.</li><li>DefaultAutoFlushEventListener 클래스의 flushIsReallyNeeded 메서드에서는 하이버네이트의 기본 FlushMode가 ALWAYS가 아니고(하이버네이트 기본은 FlushMode.AUTO임), AutoFlushEvent의 querySpaces([family_register])가 쿼리 지연 저장소(ActionQueue)에 있는 액션(EntityUpdateAction)과 관련 없는 테이블(mother)이기 때문에 false를 반환합니다.</li><li>힘겹게 쿼리 지연 저장소에 다 밀어넣었건만 flushIsReallyNeeded가 false이면 결국 flush는 호출되지 않습니다.</li></ol><p><code>결국 Mother의 변경내역은 쿼리 지연 저장소에 저장됐지만 현재 JPQL에서 사용하는 family_register와 상관 없는 테이블인 mother이므로 flush가 호출되지 않습니다.</code> </p><p>이제 엔티티를 flush할 준비(prepareEntityFlushes 메서드)가 끝났으니 다음 부분(flushEntities 메서드)을 딥다이브 해봅시다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/after-prepare-entity-flushes.png" class="" title="엔티티를 플러시할 준비(prepareEntityFlushes 메서드) 단계에서는 cascade를 수행하고, 아직 쿼리 지연 저장소는 비어있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/flush-entites.png" class="" title="flushEntites 안에서는 FlushEntityEvent를 발생시키고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/find-dirty.png" class="" title="FlushEntityEvent의 핸들러에서는 업데이트 쿼리를 날려야하는 건지 판단하기 위해 엔티티의 dirty checking(findDirty 메서드)을 하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/dirty-checking.png" class="" title="recentChildbirth 프로퍼티 하나가 달라졌기 때문에 dirtyProperties가 하나 존재하고 FlushEntityEvent에 할당하고 있습니다."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isUpdateNecessary</span><span class="params">(FlushEntityEvent event)</span> <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">EntityPersister</span> <span class="variable">persister</span> <span class="operator">=</span> event.getEntityEntry().getPersister();</span><br><span class="line">    <span class="type">Status</span> <span class="variable">status</span> <span class="operator">=</span> event.getEntityEntry().getStatus();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !event.isDirtyCheckPossible() ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] dirtyProperties = event.getDirtyProperties();</span><br><span class="line">        <span class="keyword">if</span> ( dirtyProperties != <span class="literal">null</span> &amp;&amp; dirtyProperties.length != <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//<span class="doctag">TODO:</span> suck into event class</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> hasDirtyCollections( event, persister, status );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultFlushEntityEventListener의 isUpdateNecessary 메서드에서 dirtyProperties 유무에 따라 업데이트가 필요한지 판단하고 있는데 하나가 있기 때문에 true를 반환합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFlushEntity</span><span class="params">(FlushEntityEvent event)</span> <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> event.getEntity();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EntityEntry</span> <span class="variable">entry</span> <span class="operator">=</span> event.getEntityEntry();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EventSource</span> <span class="variable">session</span> <span class="operator">=</span> event.getSession();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EntityPersister</span> <span class="variable">persister</span> <span class="operator">=</span> entry.getPersister();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">status</span> <span class="operator">=</span> entry.getStatus();</span><br><span class="line">    <span class="keyword">final</span> Type[] types = persister.getPropertyTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">mightBeDirty</span> <span class="operator">=</span> entry.requiresDirtyCheck( entity );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Object[] values = getValues( entity, entry, mightBeDirty, session );</span><br><span class="line"></span><br><span class="line">    event.setPropertyValues( values );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> avoid this for non-new instances where mightBeDirty==false</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">substitute</span> <span class="operator">=</span> wrapCollections( session, persister, entity, entry.getId(), types, values );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( isUpdateNecessary( event, mightBeDirty ) ) &#123;</span><br><span class="line">        substitute = scheduleUpdate( event ) || substitute;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>isUpdateNecessary가 true이기 때문에 scheduleUpdate 메서드가 호출되는데 이름만 봐도 바로 지연 저장소에 저장할 거 같은 메서드네요.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/schedule-update.png" class="" title="scheduleUpdate 메서드 안에서 큐(쿼리 지연 저장소)에다가 EntityUpdateAction을 추가하고 있네요."><p>하지만 여기까지 왔다고 해서 flush가 정말로 되는 건 아닙니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAutoFlush</span><span class="params">(AutoFlushEvent event)</span> <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">EventSource</span> <span class="variable">source</span> <span class="operator">=</span> event.getSession();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SessionEventListenerManager</span> <span class="variable">eventListenerManager</span> <span class="operator">=</span> source.getEventListenerManager();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        eventListenerManager.partialFlushStart();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( flushMightBeNeeded( source ) ) &#123;</span><br><span class="line">            <span class="comment">// Need to get the number of collection removals before flushing to executions</span></span><br><span class="line">            <span class="comment">// (because flushing to executions can add collection removal actions to the action queue).</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ActionQueue</span> <span class="variable">actionQueue</span> <span class="operator">=</span> source.getActionQueue();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">oldSize</span> <span class="operator">=</span> actionQueue.numberOfCollectionRemovals();</span><br><span class="line">            flushEverythingToExecutions( event );</span><br><span class="line">            <span class="keyword">if</span> ( flushIsReallyNeeded( event, source ) ) &#123;</span><br></pre></td></tr></table></figure><p>flushMightBeNeeded에서 ‘flush가 필요할지도 몰라’ 정도까지만 판단을 하고, flushIsReallyNeeded에서 ‘정말로 flush가 필요한가?’에 대한 검토를 또 하고 있네요.<br>(지금까지 우리는 flushEverythingToExecutions에 대해 딥다이브를 마쳤습니다.)</p><img src="/2021/06/13/entity-manager-persist-vs-merge/flush-is-really-needed.png" class="" title="하이버네이트의 기본 FlushMode는 AUTO라서 앞에 조건은 false이고, 쿼리 지연 저장소에 있는 내용이 현재 이벤트의 querySpace(family_regiser)와 관련이 있는지를 확인해보고 있네요."><img src="/2021/06/13/entity-manager-persist-vs-merge/are-tables-to-be-updated-01.png" class="" title="여러 액션(insert, remove, update 등등)을 반복하는데 그 중에 현재 큐에 있는 액션은 Update(Mother 엔티티에 대한) 뿐입니다."><p>해당 액션이 family_register 테이블과 관련이 있는지 확인하고 있습니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/are-tables-to-be-updated-02.png" class="" title="Update 액션(Mother 엔티티 업데이트)의 테이블(mother)과 이벤트의 querySpace의 테이블(family_regiser)와 관련이 있는지를 확인하고 있네요."><p>관련이 없기 때문에 false를 반환합니다.</p><p>JPQL 호출 시 flush를 무조건 호출하는 줄 알았는데 쿼리 지연 저장소에 생긴 쿼리의 테이블과 관련이 있다는 사실도 참 신기하네요. (어찌보면 쿼리를 날릴 필요가 없으면 안 날리는 게 최적화 측면에서는 당연해보이긴 하네요.)</p><h3 id="motherRepository-save-mother-는-왜-아무런-쿼리도-호출하지-않는가"><a href="#motherRepository-save-mother-는-왜-아무런-쿼리도-호출하지-않는가" class="headerlink" title="motherRepository.save(mother)는 왜 아무런 쿼리도 호출하지 않는가?"></a>motherRepository.save(mother)는 왜 아무런 쿼리도 호출하지 않는가?</h3><p>이것도 내용이 길어서 3줄 요악 해보겠습니다.</p><ol><li>mother가 새로운 엔티티는 아니기 때문에 entityManager.merge(mother)가 호출되고, Merge 이벤트를 발생시킵니다.</li><li>Merge 이벤트의 핸들러인 DefaultMergeEventListener 클래스의 onMerge 메서드에서는 엔티티의 상태가 Persistent이므로 entityIsPersistent 메서드가 호출되는데 cascade는 이전(JPQL 호출 시)에 진작 끝냈기 때문에 아무런 쿼리가 호출되지 않습니다.  </li><li>최상단 트랜잭션(obGyn.naturalDeliveryWith 메서드)이 끝나지 않아 commit을 호출하지 않았기 때문에 flush도 호출되지 않았습니다.</li></ol><img src="/2021/06/13/entity-manager-persist-vs-merge/simple-jpa-repository-save.png" class="" title="JpaRepository의 구현체인 SimpleJpaRepository 클래스의 save 메서드가 호출됩니다"><p>새로운 엔티티냐, 아니냐에 따라 persist vs merge 메서드를 호출하는데</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNew</span><span class="params">(T entity)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ID</span> <span class="variable">id</span> <span class="operator">=</span> getId(entity);</span><br><span class="line">    Class&lt;ID&gt; idType = getIdType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!idType.isPrimitive()) &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">id</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (id <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((Number) id).longValue() == <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;Unsupported primitive id type %s!&quot;</span>, idType));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractEntityInformation 클래스의 isNew 메서드를 보면 <code>primitive 타입이 아니면 null이거나 Number 타입이면 0인 경우에만 새로운 엔티티</code>라고 취급하고 있습니다.<br>근데 Mother는 id에 값이 있기 때문에 새로운 엔티티가 아니라서 EntityManager의 merge 메서드가 호출됩니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/session-impl-merge.png" class="" title="SessionImpl(하이버네이트에서 EntityManager 인터페이스를 구현한 구현체)의 merge 메서드가 호출되고 MergeEvent를 생성하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-on-merge.png" class="" title="DefaultMergeEventListener의 onMerge 메서드가 호출되는데 Mother는 Persistent(영속성 컨텍스트에서 Managed되고 있는 상태) 상태이므로 entityIsPersistent 메서드가 호출됩니다.">  <img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-entity-is-persistent.png" class="" title="DefaultMergeEventListener의 entityIsPersistent 메서드가 호출되는데 cascadeOnMerge는 위에서 JPQL 호출되면서 Mother 엔티티의 필드는 전부 cascade가 끝난 상태라 쿼리가 날아가는 게 없고, copyValues는 자기 자신(entity 인스턴스가 entity 인스턴스에게)을 카피 뜨는 거라 크게 관련이 없는 코드입니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/do-not-commit.png" class="" title="부모 트랜잭션(obGyn.naturalDeliveryWith 메서드)의 트랜잭션이 전파된 거라 새로운 트랜잭션은 아니라서 실제 커밋이 수행되지는 않아 flush도 호출되지 않습니다."><h3 id="왜-부모-트랜잭션이-끝난-이후에-mother의-update-쿼리가-날아갔을까"><a href="#왜-부모-트랜잭션이-끝난-이후에-mother의-update-쿼리가-날아갔을까" class="headerlink" title="왜 부모 트랜잭션이 끝난 이후에 mother의 update 쿼리가 날아갔을까?"></a>왜 부모 트랜잭션이 끝난 이후에 mother의 update 쿼리가 날아갔을까?</h3><p>여기도 3줄 요약해보겠습니다.</p><ol><li>트랜잭션이 모두 끝나고 커밋하기 이전에 flush를 해야하는지 FlushMode를 확인합니다.</li><li>FlushMode가 MANUAL이 아니기 때문에 엔티티매니저에 대해 FlushEvent가 발생합니다.</li><li>FlushEvent가 발생하면 DirtyChecking 및 쿼리 지연 저장소에 저장한 후에 flush가 이루어집니다.</li></ol><p>motherRepository.save(mother)에서는 아무런 메서드가 날아가지 않고, 부모 트랜잭션(obGyn.naturalDeliveryWith 메서드)이 끝날 때 무슨 코드 때문에 쿼리를 호출하는 건지도 궁금해졌습니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/before-transaction-completion.png" class="" title="부모 트랜잭션이 끝날 때 커밋이 되는데 커밋이 되기 이전에 beforeTransactionCompletion 메서드가 호출되는데 이 때 flush가 진행되게 됩니다."><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flushBeforeTransactionCompletion</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">doFlush</span> <span class="operator">=</span> isTransactionFlushable()</span><br><span class="line">            &amp;&amp; getHibernateFlushMode() != FlushMode.MANUAL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( doFlush ) &#123;</span><br><span class="line">            managedFlush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionMapperStandardImpl.INSTANCE.mapManagedFlushFailure( <span class="string">&quot;error during managed flush&quot;</span>, re, <span class="built_in">this</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하이버네이트의 기본 FlushMode는 AUTO이기 때문에 doFlush가 true이고, managedFlush 메서드를 호출하게 됩니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/session-impl-do-flush.png" class="" title="계속 진행하다보면 엔티티 매니저(SessionImpl)의 doFlush를 호출하는데 이 때 FlushEvent를 발생시킵니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-flush-event-listener-on-flush.png" class="" title="FlushEvent의 이벤트 리스너인 DefaultFlushEventListener 클래스의 onFlush 메서드"><p>FlushEvent의 이벤트 리스너 안에서 Managed Entity가 존재하므로 if 문 안을 보면, flushEverythingToExecutions을 호출하는데 이 때 Dirty Checking과 쿼리 지연 저장소에 저장이 이루어집니다.<br>그리고 performExecutions 안에서 실제 쿼리 지연 저장소에 있는 내용에 대해 flush가 호출됩니다.</p><h3 id="motherRepository-save-mother-를-먼저-수행했을-때-child의-레퍼런스는-왜-바뀌었을까"><a href="#motherRepository-save-mother-를-먼저-수행했을-때-child의-레퍼런스는-왜-바뀌었을까" class="headerlink" title="motherRepository.save(mother)를 먼저 수행했을 때 child의 레퍼런스는 왜 바뀌었을까?"></a>motherRepository.save(mother)를 먼저 수행했을 때 child의 레퍼런스는 왜 바뀌었을까?</h3><p>여기도 너무 길어서 4줄 요약해보자면</p><ol><li>mother가 새로운 엔티티는 아니기 때문에 entityManager.merge(mother)가 호출되고, mother 엔티티에 대해 Merge 이벤트를 발생시킵니다.</li><li>Merge 이벤트의 핸들러인 DefaultMergeEventListener 클래스의 onMerge 메서드에서는 Managed Entity에 대해서 cascade가 발생하는데 child 엔티티에 대해서도 Merge 이벤트를 발생시킵니다.</li><li>DefaultMergeEventListener 클래스의 onMerge 메서드에서는 Transient 상태인 child 엔티티에 대해서 카피본을 뜨고 카피에다가만 id를 할당한 후에 MergeContext 캐시에 entity를 key로, copy를 value로 할당하고 있습니다.</li><li>mother 엔티티의 Merge 이벤트에서는 cascade가 전부 끝난 이후에 프로퍼티에 값 재할당이 일어나는데 이 때 children을 전부 비우고 copy로 채워넣으면서 레퍼런스가 바뀌게 됩니다.</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObGyn</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> motherRepository: MotherRepository,</span><br><span class="line">    <span class="comment">// 산부인과에서 영재 양성 기관과 호적 저장소를 알고 있는 기이한 현상이지만 예제를 위해서 참아주세요!</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> talentedPersonTrainingSchool: TalentedPersonTrainingSchool,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> familyRegisterRepository: FamilyRegisterRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// @Transactional 어노테이션을 붙인 이유는 예제를 위해 영속성 컨텍스트를 강제로 넓히기 위함이지 다른 이유는 없습니다.</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">naturalDeliveryWith</span><span class="params">(father: <span class="type">Father</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> mother =</span><br><span class="line">            motherRepository.findByIdOrNull(father.wifeId) ?: <span class="keyword">throw</span> MotherNotFoundException(<span class="string">&quot;병원에 산모가 없습니다.&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> child = Child.create(father, mother)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 엄마가 아이를 낳습니다.</span></span><br><span class="line">        mother.born(child)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child의 id를 먼저 설정하고 사용하기 위해 save를 먼저 호출 </span></span><br><span class="line">        motherRepository.save(mother)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 아이의 부모는 아이가 태어나자마자 영재라는 삘이 와서 바로 영재 양성 기관에 등록합니다.</span></span><br><span class="line">        talentedPersonTrainingSchool.register(child)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 아이가 너무 마음에 들어 바로 호적에 올려버립니다.</span></span><br><span class="line">        <span class="keyword">val</span> familyRegister = familyRegisterRepository.findByFatherId(father.id)</span><br><span class="line">        familyRegister?.add(child)</span><br><span class="line">        <span class="keyword">if</span> (familyRegister != <span class="literal">null</span>) &#123;</span><br><span class="line">            familyRegisterRepository.save(familyRegister)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/06/13/entity-manager-persist-vs-merge/simple-jpa-repository-save-em-merge.png" class="" title="SimpleJpaRepository.save에서 entity의 id가 primitive tpye이 아닌데 null이 아니기 때문에 새로운 엔티티가 아니라 판단하고 entityManger.merge 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/session-impl-merge-2.png" class="" title="하이버네이트에서 EntityManager의 구현체인 SessionImpl의 merge 메서드에서는 MergeEvent를 발생시키고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-on-merge-02.png" class="" title="MergeEvent의 이벤트 핸들러인 DefaultMergeEventListener의 onMerge 메서드에서는 mother 엔티티의 상태가 Persistent이기 때문에 entityIsPersistent 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-entity-is-persistent-02.png" class="" title="entityIsPersistent 안에서는 cascadeOnMerge 메서드를 실행하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-cascade-on-merge.png" class="" title="cascadeOnMerge 안에서는 Cascade.cascade를 호출하는데 ACTION_MERGE인 CascadingActions를 넘기고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/do-cascade-02.png" class="" title="그리고 Mother 엔티티의 모든 프로퍼티에 대해 cascade를 하는데 children은 CascadeType.ALL이기 때문에 true를 반환해서 cascade를 진행합니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/cascade-to-one-for-child-02.png" class="" title="child 하나에 대해 cascade 할 때 ACTION_MERGE action의 cascade 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/action-merge-cascade.png" class="" title="ACTION_MERGE action의 cascade 메서드에서는 session(엔티티 매니저)의 merge 메서드를 호출하고 있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/session-impl-merge-3.png" class="" title="SessionImpl(하이버네이트에서 EntityManager 인터페이스의 구현체)의 merge 메서드에서 MergeEvent를 만들고 있습니다."><p>여기가 핵심입니다.<br>이전에 JPQL 호출 시 AutoFlushEvent의 이벤트 리스너에서는 ACTION_PERSIST_ON_FLUSH CascadingActions의 cascade를 호출하면서 <code>Child 엔티티에 대해 PersistEvent를 발생</code>시켰는데,<br>motherRepository.save 호출 시 MergeEvent의 이벤트 리스너에서는 ACTION_MERGE인 CascadingActions의 cascade를 호출하면서 <code>Child 엔티티에 대해 MergeEvent를 발생</code>시키고 있습니다.<br>그럼 PersistEvent와 MergeEvent의 차이점을 알아봅시다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-on-merge-03.png" class="" title="MergeEvent의 리스너인 DefaultMergeEventListener의 onMerge 메서드에서 Child 엔티티의 상태가 Transient(엔티티 매니저의 영속성 컨텍스트에 저장된 적도, DB에 저장된 적도 없는) 상태이기 때문에 entityIsTransient 메서드가 호출됩니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-entity-is-transient.png" class="" title="entityIsTransient 메서드 안에서는 엔티티에 대한 카피를 뜨고 있습니다.">  <p>또 결정적 차이가 여기서 나옵니다.<br>PersistEvent의 이벤트 리스너인 DefaultPersistEventListener 클래스의 onPersist 메서드에서 호출하는 <code>DefaultPersistEventListener 클래스의 entityIsTransient 메서드에서는 entity에 대해 카피를 뜬 적이 없습니다.</code><br>하지만 MergeEvent의 이벤트 리스너인 DefaultMergeEventListener 클래스의 onMerge 메서드에서 호출하는 <code>DefaultMergeEventListener 클래스의 entityIsTransient 메서드에서는 entity에 대해 카피를 뜨고 있습니다.</code><br>카피 뜰 때 default constructor가 없으면 아마도 <code>org.hibernate.InstantiationException: No default constructor for entity</code> 요런 예외를 던지지 않을까 싶네요.<br>기본 생성자를 호출했기 때문에 아직 값은 카피되지 않고 객체 생성까지만 된 상태입니다.<br>그리고 copyCache라는 <code>MergeContext에 entity를 key로, copy를 value</code>로 해서 넣고 있습니다.</p><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-entity-is-transient-02.png" class="" title="super.cascadeBeforeSave 안에서는 child entity의 모든 프로퍼티에 대해 cascade를 하고 있고, copyValues 이후에 entity의 모든 값이 복사되고 있습니다."><p>그리고 saveTransientEntity 메서드에서 실질적인 insert가 이루어지는데 entity를 넘기는 게 아니라 <code>copy를 넘기고</code> 있습니다.  </p><img src="/2021/06/13/entity-manager-persist-vs-merge/after-save-transient-entity.png" class="" title="saveTransientEntity에서 실질적인 insert가 이루어지는데 copy를 넘겼기 때문에 copy에만 id가 할당돼있습니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/default-merge-event-listener-entity-is-persistent-03.png" class="" title="mother의 모든 프로퍼티에 cascade가 끝나고 copyValues 메서드가 호출됩니다."><img src="/2021/06/13/entity-manager-persist-vs-merge/replace-elements.png" class="" title="copyValues 안에서는 프로퍼티 하나하나에 대해서 replace를 치고 있는데 children 프로퍼티를 가져와서 리스트를 비워버리고 있네요."><img src="/2021/06/13/entity-manager-persist-vs-merge/replace-elements-02.png" class="" title="그리고 children에 하나하나씩 값을 replace해서 채워넣고 있는데 이 때 copy로 채워지게 됩니다."><p>이렇게 copy를 뜨고, copy에만 id를 할당하고, collection을 비운 후 copy로 채우기 때문에 외부 변수는 여전히 id가 null인 상태로 남게 됩니다.</p><p>여담으로 child가 Transient 상태이기 때문에 카피를 뜨고 카피로 레퍼런스를 바꾸고 했는데, 이미 Persistent 상태인 child였다면 카피를 뜨지 않아 레퍼런스를 바꾸지 않습니다.</p><h2 id="Persist-vs-Merge"><a href="#Persist-vs-Merge" class="headerlink" title="Persist vs Merge"></a>Persist vs Merge</h2><p>이제 진짜 하고 싶었던 핵심인 엔티티 매니저의 persist와 merge 메서드에 대해 이야기 해보겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EntityManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make an instance managed and persistent.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity  entity instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> EntityExistsException if the entity already exists.</span></span><br><span class="line"><span class="comment">     * (If the entity already exists, the &lt;code&gt;EntityExistsException&lt;/code&gt; may </span></span><br><span class="line"><span class="comment">     * be thrown when the persist operation is invoked, or the</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;EntityExistsException&lt;/code&gt; or another &lt;code&gt;PersistenceException&lt;/code&gt; may be </span></span><br><span class="line"><span class="comment">     * thrown at flush or commit time.) </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the instance is not an</span></span><br><span class="line"><span class="comment">     *         entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TransactionRequiredException if there is no transaction when</span></span><br><span class="line"><span class="comment">     *         invoked on a container-managed entity manager of that is of type </span></span><br><span class="line"><span class="comment">     *         &lt;code&gt;PersistenceContextType.TRANSACTION&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">(Object entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merge the state of the given entity into the</span></span><br><span class="line"><span class="comment">     * current persistence context.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity  entity instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the managed instance that the state was merged to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if instance is not an</span></span><br><span class="line"><span class="comment">     *         entity or is a removed entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TransactionRequiredException if there is no transaction when</span></span><br><span class="line"><span class="comment">     *         invoked on a container-managed entity manager of that is of type </span></span><br><span class="line"><span class="comment">     *         &lt;code&gt;PersistenceContextType.TRANSACTION&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">merge</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>별 건 없고, persist는 return 타입이 없고, merge는 있는 게 가장 큰 차이입니다.<br>어디서 봤는데 return 타입이 없으면 원본 객체를 수정하고, return type이 있으면 새로운 객체를 반환하는 게 뭐 뭘 분리해서 좋은 패턴이다~<br>라는 걸 본 거 같은데 아시는 분 있으면 댓글 남겨주시면 감사하겠습니다.</p><p>여튼 위에서 말했듯 그런 패턴을 지킨 걸로 보입니다.<br>persists는 return 타입이 없는데 id는 할당해야하니 당연히 새로운 객체를 만들 수는 없고 원본 객체를 수정할테고,<br>merge는 return 타입이 있는 걸로 보아 원본 객체는 수정하지 않고, id가 할당된 새 객체를 반환하는 걸로 보입니다.</p><p>persist와 merge에 대해 이해하면 위에서 있었던 PersistEvent와 MergeEvent가 왜 그렇게 동작했는지 이해할 수 있게 됩니다.<br>JPQL 호출 시 cascade가 이루어질 때는 PersistEvent가 발생하기 때문에 persist 메서드의 특성을 생각해보면 원본 객체에 id가 할당됐던 것이 당연한 게 됩니다.<br>그리고 save 호출 시 cascade가 이루어질 때는 새로운 엔티티가 아니라서 MergeEvent가 발생했기 때문에 merge 메서드의 특성을 생각해보면 새로운 객체를 반환하고, 레퍼런스도 바꿔치는 게 당연한 게 됩니다.</p><p>그럼 persist와 merge에 대한 간단한 예제를 보시면 이해하시는 데 더 도움이 될 것 같습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> `새로운 엔티티라면 persist가 호출되면서 원본 엔티티를 반환하고, 새로운 엔티티가 아니면 merge가 호출되면서 새로운 엔티티 객체를 반환한다`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> mother = Mother()</span><br><span class="line">    <span class="keyword">val</span> persistedMother = motherRepository.save(mother)</span><br><span class="line"></span><br><span class="line">    persistedMother shouldBeSameInstanceAs mother</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> newMother = Mother(<span class="number">2L</span>)</span><br><span class="line">    <span class="keyword">val</span> mergedNewMother = motherRepository.save(newMother)</span><br><span class="line"></span><br><span class="line">    mergedNewMother.id shouldBe <span class="number">2L</span></span><br><span class="line">    mergedNewMother shouldNotBeSameInstanceAs newMother</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mergedMergedNewMother = motherRepository.save(mergedNewMother)</span><br><span class="line"></span><br><span class="line">    mergedMergedNewMother.id shouldBe <span class="number">2L</span></span><br><span class="line">    mergedMergedNewMother shouldNotBeSameInstanceAs mergedNewMother</span><br><span class="line">    mergedMergedNewMother shouldNotBeSameInstanceAs newMother</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="푸념"><a href="#푸념" class="headerlink" title="푸념"></a>푸념</h2><p>단순히 save 메서드의 위치를 바꿨다고 해서 이렇게까지 동작이 달라질 줄은 몰랐습니다.<br>복잡한 연관관계(CascadeAction 등등)와 JPQL이 어느 타이밍에 호출되는데 엔티티는 현재 어떤 상태인지 등등을 고려해가면서 코드를 짜야하니 예측성이 너무 떨어지는 것 같습니다.<br>엔티티를 객체-테이블 매핑 이상의 역할인 도메인(비즈니스 로직을 담은) 객체로 사용하고, 역할에 맞게 객체를 덜 쪼갰기 때문에 요런 문제가 발생하긴 했지만…<br>이제 JPA가 그렇게 좋은지 모르겠네요… 예측성이 너무 떨어지고, 알아야할 게 너무 많은 거 같습니다.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;들어가기에-앞서&quot;&gt;&lt;a href=&quot;#들어가기에-앞서&quot; class=&quot;headerlink&quot; title=&quot;들어가기에 앞서&quot;&gt;&lt;/a&gt;들어가기에 앞서&lt;/h2&gt;&lt;p&gt;글을 정리하다 보니 너무 깊게 파고 정리한 거 같아 글이 너무 길어져서 아무도 읽지 않을 것 같아 정리부터 해보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;엔티티 매니저의 persist 메서드는 리턴값이 없기 때문에 원본 객체를 수정하고, merge 메서드는 리턴값이 있기 때문에 새로운 객체를 반환합니다.&lt;/li&gt;
&lt;li&gt;JpaRepository.save 호출 시 엔티티의 식별자(@Id, @EmbeddedId 어노테이션이 붙은 컬럼 등등)가 붙은 필드의 타입이 primitive type이 아닐 때는 null이거나 숫자형일 때는 0이면 새로운 엔티티라고 판단하면서 persist 메서드가 호출되고, 그게 아니면 merge 메서드가 호출됩니다. &lt;/li&gt;
&lt;li&gt;JPQL 호출 시 FlushMode가 AUTO(하이버네이트 기본 FlushMode)라 하더라도 쿼리 지연 저장소에 JPQL에서 사용하는 테이블과 관련있는 쿼리가 저장돼있지 않다면 flush를 호출하지 않습니다.&lt;/li&gt;
&lt;li&gt;JPQL 호출 시 AutoFlushEvent가 발생하면서 flush 이전에 cascade가 먼저 이뤄지는데 이 때는 PersistEvent가 발생하면서 원본 엔티티를 변경합니다.&lt;/li&gt;
&lt;li&gt;JpaRepository.save 호출 시 엔티티가 새로운 엔티티가 아니면 MergeEvent가 발생하고, cascade가 발생하는데 이 때 해당 엔티티에 대해 MergeEvent가 또 발생하면서 Transient 상태인 경우에는 원본 엔티티를 카피하고 카피한 객체의 값을 수정하고 연관관계가 맺어진 엔티티에서는 레퍼런스도 카피 객체로 바꿔치기 하고 있습니다.&lt;/li&gt;
&lt;li&gt;JpaRepository.save 호출 시 엔티티가 새로운 엔티티가 아니면 MergeEvent가 발생하는데 cascade 이후에 DirtyChecking이나 Flush가 호출되지 않습니다.&lt;/li&gt;
&lt;li&gt;모든 트랜잭션이 끝난 이후에 커밋 이전에 FlushMode가 MANUAL이 아니고, Managed Entity가 존재하면 FlushEvent를 발생시켜서 DirtyChecking 및 Flush를 하게 됩니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;제목은 엔티티 매니저의 persist와 merge에 대해 개념을 설명할 것처럼 적어놨지만 이해를 돕기 위해, 흥미 유발을 위해 사내에서 겪었던 문제 과정을 서술하겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;문제-상황&quot;&gt;&lt;a href=&quot;#문제-상황&quot; class=&quot;headerlink&quot; title=&quot;문제 상황&quot;&gt;&lt;/a&gt;문제 상황&lt;/h2&gt;</summary>
    
    
    
    <category term="Back-end" scheme="https://perfectacle.github.io/categories/Back-end/"/>
    
    <category term="Spring" scheme="https://perfectacle.github.io/categories/Back-end/Spring/"/>
    
    
    <category term="JPA" scheme="https://perfectacle.github.io/tags/JPA/"/>
    
    <category term="Hibernate" scheme="https://perfectacle.github.io/tags/Hibernate/"/>
    
    <category term="Spring Data JPA" scheme="https://perfectacle.github.io/tags/Spring-Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>(JPA) 엔티티 매니저는 리퀘스트 당 하나만 생성되지 않을 수 있다.</title>
    <link href="https://perfectacle.github.io/2021/05/24/entity-manager-lifecycle/"/>
    <id>https://perfectacle.github.io/2021/05/24/entity-manager-lifecycle/</id>
    <published>2021-05-24T04:44:56.000Z</published>
    <updated>2022-06-06T08:23:56.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3줄-요약"><a href="#3줄-요약" class="headerlink" title="3줄 요약"></a>3줄 요약</h2><ol><li>OSIV가 꺼져있으면 트랜잭션이 시작될 때 엔티티 매니저가 생성되고, 트랜잭션이 끝날 때 엔티티 매니저를 종료한다.</li><li>OSIV가 꺼져있고, 다른 트랜잭션이라면 엔티티 매니저가 공유되지 않기 때문에 엔티티 매니저의 1차 캐시도 서로 공유되지 않는다.</li><li>OSIV가 켜져있으면 요청 당 엔티티 매니저는 한 번 생성되고, 뷰 렌더링이 끝날 때까지 엔티티 매니저는 종료되지 않고 트랜잭션이 다르더라도 1차 캐시가 공유된다.</li></ol><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>엔티티 매니저 팩토리는 생성 비용이 비싸서 대부분 어플리케이션 당 하나를 생성하는 편이고, 엔티티 매니저는 생성 비용이 비싸지 않아서 어플리케이션에서 여러 번 생성된다.<br>하지만 엔티티 매니저는 쓰레드 세이프 하지 않기 때문에, 쓰레드 당 하나를 생성해야할 것 같고 Spring MVC는 리퀘스트 당 하나의 쓰레드가 할당되기 때문에 리퀘스트 당 하나의 엔티티 매니저가 생성될 것만 같은 기분이 든다.<br>나 또한 그렇게 알고 있었는데 아래 코드를 통해 뭔가 의문이 생겼다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SomeRepository</span> : <span class="type">JpaRepository</span>&lt;<span class="type">SomeEntity, Long</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> repository: SomeRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">some</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> someEntity = repository.findById(<span class="number">1L</span>)</span><br><span class="line">        <span class="keyword">val</span> someEntity2 = repository.findById(<span class="number">1L</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드를 보면 select 쿼리는 몇 번 날아갈 것 같은가??<br>첫 라인에서는 엔티티 매니저의 1차 캐시에 아무것도 없어서 쿼리가 날아갈 것 같고, 두 번째 라인에서는 엔티티 매니저의 1차 캐시에 id가 1인 SomeEntity가 있을 것 같으니 쿼리가 안 날아갈 것 같지 않은가?<br>답은 <code>spring.jpa.open-in-view: false</code>로 OSIV 설정이 꺼져있으면 두 번 날아가고, OSIV 설정을 따로 건드리지 않았다면 기본적으로 켜져있을테니 한 번만 날아가게 된다.</p><p>먼저 알아둬야할 사항은 JpaRepository 인터페이스의 기본 구현체인 <a href="https://github.com/spring-projects/spring-data-jpa/blob/main/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java#L83">SimpleJpaRepository</a>에 대해 알아야한다.<br>우리가 만든 인터페이스 SomeRepository도 결국 실행될 때는 객체화 돼야하는데 이 때 JpaRepository 구현체인 SimpleJpaRepository를 상속받아서 구현되기 때문이다.  </p><img src="/2021/05/24/entity-manager-lifecycle/simple-jpa-repository.png" class="" title="Spring AOP는 인터페이스 타입에 대해서는 JDK Dynamic Proxy를 사용하여 프록시 객체를 생성한다.">  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleJpaRepository</span>&lt;T, ID&gt; <span class="keyword">implements</span> <span class="title class_">JpaRepositoryImplementation</span>&lt;T, ID&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;T&gt; <span class="title function_">findById</span><span class="params">(ID id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Assert.notNull(id, ID_MUST_NOT_BE_NULL);</span><br><span class="line"></span><br><span class="line">        Class&lt;T&gt; domainType = getDomainClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (metadata == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.ofNullable(em.find(domainType, id));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LockModeType</span> <span class="variable">type</span> <span class="operator">=</span> metadata.getLockModeType();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; hints = getQueryHints().withFetchGraphs(em).asMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(type == <span class="literal">null</span> ? em.find(domainType, id, hints) : em.find(domainType, id, type, hints));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우리가 만든 repository의 findById 메서드를 호출하면 기본적으로 SimpleJpaRepository의 findById 메서드를 호출하게 되고, readOnly <code>트랜잭션 안에서 실행</code>된다고 보면 된다.</p><h2 id="OSIV가-꺼졌을-때"><a href="#OSIV가-꺼졌을-때" class="headerlink" title="OSIV가 꺼졌을 때"></a>OSIV가 꺼졌을 때</h2><h3 id="엔티티-매니저-생성"><a href="#엔티티-매니저-생성" class="headerlink" title="엔티티 매니저 생성"></a>엔티티 매니저 생성</h3><ol><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java#L119">TransactionInterceptor의 invoke 메서드</a>에서 부모 클래스인 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L336">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L382">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L579">createTransactionIfNecessary 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L595">createTransactionIfNecessary 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L341">AbstractPlatformTransactionManager의 getTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L347">AbstractPlatformTransactionManager의 getTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L367">JpaTransactionManager의 doGetTransaction 메서드</a>를 호출한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doGetTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionObject</span>();</span><br><span class="line">    txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line"></span><br><span class="line">    <span class="type">EntityManagerHolder</span> <span class="variable">emHolder</span> <span class="operator">=</span> (EntityManagerHolder)</span><br><span class="line">            TransactionSynchronizationManager.getResource(obtainEntityManagerFactory());</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>엔티티 매니저 팩토리를 가져온 후에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java#L138">TransactionSynchronizationManager의 getResource 메서드</a>를 호출하고 있다.  </li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java#L140">TransactionSynchronizationManager의 getResource 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java#L140">doGetResource 메서드</a>를 호출하고 있다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">doGetResource</span><span class="params">(Object actualKey)</span> &#123;</span><br><span class="line">    Map&lt;Object, Object&gt; map = resources.get();</span><br><span class="line">    <span class="keyword">if</span> (map == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> map.get(actualKey);</span><br><span class="line">    <span class="comment">// Transparently remove ResourceHolder that was marked as void...</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ResourceHolder &amp;&amp; ((ResourceHolder) value).isVoid()) &#123;</span><br><span class="line">        map.remove(actualKey);</span><br><span class="line">        <span class="comment">// Remove entire ThreadLocal if empty...</span></span><br><span class="line">        <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">            resources.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        value = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actualKey는 엔티티 매니저 팩토리이고, resources는 ThreadLocal Map 객체란 걸 알 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TransactionSynchronizationManager</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Map&lt;Object, Object&gt;&gt; resources =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NamedThreadLocal</span>&lt;&gt;(<span class="string">&quot;Transactional resources&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>하지만 해당 쓰레드에서는 한 번도 엔티티 매니저 팩토리를 키로 맵에 값을 넣은 적이 없기 때문에 null을 반환하게 된다.</p><p>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L367">JpaTransactionManager의 doGetTransaction 메서드</a>로 돌아와보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doGetTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionObject</span>();</span><br><span class="line">    txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line"></span><br><span class="line">    <span class="type">EntityManagerHolder</span> <span class="variable">emHolder</span> <span class="operator">=</span> (EntityManagerHolder)</span><br><span class="line">            TransactionSynchronizationManager.getResource(obtainEntityManagerFactory());</span><br><span class="line">    <span class="keyword">if</span> (emHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Found thread-bound EntityManager [&quot;</span> + emHolder.getEntityManager() +</span><br><span class="line">                    <span class="string">&quot;] for JPA transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        txObject.setEntityManagerHolder(emHolder, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> txObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransactionSynchronizationManager.getResource(obtainEntityManagerFactory())가 null을 반환하기 때문에 txObject는 entityManagerHolder를 초기화하지 못한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span></span><br><span class="line">        <span class="keyword">throws</span> TransactionException &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;</span><br><span class="line">        <span class="comment">// Existing transaction found -&gt; check propagation behavior to find out how to behave.</span></span><br><span class="line">        <span class="keyword">return</span> handleExistingTransaction(def, transaction, debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L350">AbstractPlatformTransactionManager의 getTransaction 메서드</a>로 돌아오면 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L391">JpaTransactionManager의 isExistingTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L392">JpaTransactionManager의 isExistingTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L692">JpaTransactionObject의 hasTransaction 매서드</a>를 호출한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.entityManagerHolder != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.entityManagerHolder.isTransactionActive());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>entityManagerHolder는 null이기 때문에 hasTransaction은 false이고 isExistingTransaction 메서드도 false이다.</li></ol><p>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L361">AbstractPlatformTransactionManager의 getTransaction 메서드</a>로 돌아와보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span></span><br><span class="line">        <span class="keyword">throws</span> TransactionException &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span></span><br><span class="line">    <span class="keyword">if</span> (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalTransactionStateException</span>(</span><br><span class="line">                <span class="string">&quot;No existing transaction found for transaction marked with propagation &#x27;mandatory&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED || </span><br><span class="line">            def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">            def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        <span class="type">SuspendedResourcesHolder</span> <span class="variable">suspendedResources</span> <span class="operator">=</span> suspend(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Creating new transaction with name [&quot;</span> + def.getName() + <span class="string">&quot;]: &quot;</span> + def);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> startTransaction(def, transaction, debugEnabled, suspendedResources);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">            resume(<span class="literal">null</span>, suspendedResources);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Transactional의 기본 propagation 설정은 PROPAGATION_REQUIRED이기 때문에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L394">startTransaction 메서드</a>를 호출한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TransactionStatus <span class="title function_">startTransaction</span><span class="params">(TransactionDefinition definition, Object transaction,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> debugEnabled, <span class="meta">@Nullable</span> SuspendedResourcesHolder suspendedResources)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">newSynchronization</span> <span class="operator">=</span> (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">    <span class="type">DefaultTransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> newTransactionStatus(</span><br><span class="line">            definition, transaction, <span class="literal">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">    doBegin(transaction, definition);</span><br><span class="line">    prepareSynchronization(status, definition);</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> DefaultTransactionStatus <span class="title function_">newTransactionStatus</span><span class="params">(</span></span><br><span class="line"><span class="params">        TransactionDefinition definition, <span class="meta">@Nullable</span> Object transaction, <span class="type">boolean</span> newTransaction,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> newSynchronization, <span class="type">boolean</span> debug, <span class="meta">@Nullable</span> Object suspendedResources)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">actualNewSynchronization</span> <span class="operator">=</span> newSynchronization &amp;&amp;</span><br><span class="line">            !TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultTransactionStatus</span>(</span><br><span class="line">            transaction, newTransaction, actualNewSynchronization,</span><br><span class="line">            definition.isReadOnly(), debug, suspendedResources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>새롭게 트랜잭션을 시작하는 것이기 때문에 TransactionStatus를 만들 때 newTransaction을 true로 만든다.<br>그리고나서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L396">JpaTransactionManager의 doBegin 메서드</a>를 호출한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBegin</span><span class="params">(Object transaction, TransactionDefinition definition)</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> (JpaTransactionObject) transaction;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!txObject.hasEntityManagerHolder() ||</span><br><span class="line">                txObject.getEntityManagerHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">            <span class="type">EntityManager</span> <span class="variable">newEm</span> <span class="operator">=</span> createEntityManagerForTransaction();</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Opened new EntityManager [&quot;</span> + newEm + <span class="string">&quot;] for JPA transaction&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            txObject.setEntityManagerHolder(<span class="keyword">new</span> <span class="title class_">EntityManagerHolder</span>(newEm), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// Bind the entity manager holder to the thread.</span></span><br><span class="line">        <span class="keyword">if</span> (txObject.isNewEntityManagerHolder()) &#123;</span><br><span class="line">            TransactionSynchronizationManager.bindResource(</span><br><span class="line">                    obtainEntityManagerFactory(), txObject.getEntityManagerHolder());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 봤다싶이 EntityManagerHolder를 초기화하지 못했기 때문에 위 if문을 타고 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L480">createEntityManagerForTransaction 메서드</a>를 호출하여 엔티티 매니저를 생성하고 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L672">JpaTransactionObject의 setEntityManagerHolder 메서드</a>를 호출하고 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEntityManagerHolder</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> EntityManagerHolder entityManagerHolder, <span class="type">boolean</span> newEntityManagerHolder)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.entityManagerHolder = entityManagerHolder;</span><br><span class="line">    <span class="built_in">this</span>.newEntityManagerHolder = newEntityManagerHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엔티티 매니저 홀더를 초기화하는 것과 더불어 <code>새로운 엔티티 매니저 홀더라고 마킹</code>까지 하고 있다.<br>그리고 새로운 엔티티 매니저 홀더라고 마킹했기 때문에 txObject.isNewEntityManagerHolder()는 true이고, <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java#L177">TransactionSynchronizationManager의 bindResource 메서드</a>를 호출하고 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bind the given resource for the given key to the current thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key to bind the value to (usually the resource factory)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to bind (usually the active resource object)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if there is already a value bound to the thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ResourceTransactionManager#getResourceFactory()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bindResource</span><span class="params">(Object key, Object value)</span> <span class="keyword">throws</span> IllegalStateException &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">actualKey</span> <span class="operator">=</span> TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);</span><br><span class="line">    Assert.notNull(value, <span class="string">&quot;Value must not be null&quot;</span>);</span><br><span class="line">    Map&lt;Object, Object&gt; map = resources.get();</span><br><span class="line">    <span class="comment">// set ThreadLocal Map if none found</span></span><br><span class="line">    <span class="keyword">if</span> (map == <span class="literal">null</span>) &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        resources.set(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">oldValue</span> <span class="operator">=</span> map.put(actualKey, value);</span><br><span class="line">    <span class="comment">// Transparently suppress a ResourceHolder that was marked as void...</span></span><br><span class="line">    <span class="keyword">if</span> (oldValue <span class="keyword">instanceof</span> ResourceHolder &amp;&amp; ((ResourceHolder) oldValue).isVoid()) &#123;</span><br><span class="line">        oldValue = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldValue != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Already value [&quot;</span> + oldValue + <span class="string">&quot;] for key [&quot;</span> +</span><br><span class="line">                actualKey + <span class="string">&quot;] bound to thread [&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Bound value [&quot;</span> + value + <span class="string">&quot;] for key [&quot;</span> + actualKey + <span class="string">&quot;] to thread [&quot;</span> +</span><br><span class="line">                Thread.currentThread().getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쓰레드 로컬 맵인 resources에 엔티티 매니저 팩토리를 키로, 엔티티 매니저 홀더를 값으로 넣고 있다.</p><p>이렇게 트랜잭션이 시작할 때 엔티티 매니저가 생성된다는 것을 알 수 있다.</p><h3 id="엔티티-매니저-종료"><a href="#엔티티-매니저-종료" class="headerlink" title="엔티티 매니저 종료"></a>엔티티 매니저 종료</h3><p>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L336">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>로 돌아오자.  </p><ol><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L407">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L649">commitTransactionAfterReturning 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L654">commitTransactionAfterReturning 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L688">AbstractPlatformTransactionManager의 commit 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L711">AbstractPlatformTransactionManager의 commit 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L720">processCommit 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L790">processCommit 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L998">cleanupAfterCompletion 메서드</a>를 호출하고 있다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanupAfterCompletion</span><span class="params">(DefaultTransactionStatus status)</span> &#123;</span><br><span class="line">    status.setCompleted();</span><br><span class="line">    <span class="keyword">if</span> (status.isNewSynchronization()) &#123;</span><br><span class="line">        TransactionSynchronizationManager.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">        doCleanupAfterCompletion(status.getTransaction());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>새롭게 만든 트랜잭션이기 때문에 status.isNewTransaction()은 true이고, <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L615">JpaTransactionManager의 doCleanupAfterCompletion 메서드</a>를 호출한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doCleanupAfterCompletion</span><span class="params">(Object transaction)</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> (JpaTransactionObject) transaction;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the entity manager holder from the thread, if still there.</span></span><br><span class="line">    <span class="comment">// (Could have been removed by EntityManagerFactoryUtils in order</span></span><br><span class="line">    <span class="comment">// to replace it with an unsynchronized EntityManager).</span></span><br><span class="line">    <span class="keyword">if</span> (txObject.isNewEntityManagerHolder()) &#123;</span><br><span class="line">        TransactionSynchronizationManager.unbindResourceIfPossible(obtainEntityManagerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엔티티 매니저 홀더를 설정할 때도 새 엔티티 매니저 홀더라고 마킹했기 때문에 txObject.isNewEntityManagerHolder()는 true라서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java#L224">TransactionSynchronizationManager의 unbindResourceIfPossible 메서드</a>를 호출한다.<br>그 다음에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java#L233">doUnbindResource 메서드</a>를 호출하고 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">doUnbindResource</span><span class="params">(Object actualKey)</span> &#123;</span><br><span class="line">    Map&lt;Object, Object&gt; map = resources.get();</span><br><span class="line">    <span class="keyword">if</span> (map == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> map.remove(actualKey);</span><br><span class="line">    <span class="comment">// Remove entire ThreadLocal if empty...</span></span><br><span class="line">    <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">        resources.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Transparently suppress a ResourceHolder that was marked as void...</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ResourceHolder &amp;&amp; ((ResourceHolder) value).isVoid()) &#123;</span><br><span class="line">        value = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Removed value [&quot;</span> + value + <span class="string">&quot;] for key [&quot;</span> + actualKey + <span class="string">&quot;] from thread [&quot;</span> +</span><br><span class="line">                Thread.currentThread().getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resources는 쓰레드 로컬 맵이고, 이전에 엔티티 매니저 팩토리를 키로, 엔티티 매니저 홀더를 값으로 넣었기 때문에 해당 키는 삭제된다.</p><p>그리고 다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L645">JpaTransactionManager의 doCleanupAfterCompletion 메서드</a>를 마저 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doCleanupAfterCompletion</span><span class="params">(Object transaction)</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> (JpaTransactionObject) transaction;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Remove the entity manager holder from the thread.</span></span><br><span class="line">    <span class="keyword">if</span> (txObject.isNewEntityManagerHolder()) &#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> txObject.getEntityManagerHolder().getEntityManager();</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Closing JPA EntityManager [&quot;</span> + em + <span class="string">&quot;] after transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        EntityManagerFactoryUtils.closeEntityManager(em);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Not closing pre-bound JPA EntityManager after transaction&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JpaTransactionObject을 만들 때 새로운 엔티티 매니저 홀더라고 마킹했기 때문에 txObject.isNewEntityManagerHolder()는 true이고, <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java#L423">EntityManagerFactoryUtils의 closeEntityManager 메서드</a>를 호출한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Close the given JPA EntityManager,</span></span><br><span class="line"><span class="comment"> * catching and logging any cleanup exceptions thrown.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> em the JPA EntityManager to close (may be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.persistence.EntityManager#close()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeEntityManager</span><span class="params">(<span class="meta">@Nullable</span> EntityManager em)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (em != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (em.isOpen()) &#123;</span><br><span class="line">                em.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Failed to release JPA EntityManager&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 트랜잭션이 끝날 때 엔티티 매니저가 종료된다는 것을 알게 되었다.  </p><h3 id="부모-트랜잭션을-사용한다면…"><a href="#부모-트랜잭션을-사용한다면…" class="headerlink" title="부모 트랜잭션을 사용한다면…?"></a>부모 트랜잭션을 사용한다면…?</h3><p>만약 트랜잭션이 부모의 것을 사용하여 쭉 이어진다면 어떻게 될까…?</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> repository: SomeRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">some</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> someEntity = repository.findById(<span class="number">1L</span>)</span><br><span class="line">        <span class="keyword">val</span> someEntity2 = repository.findById(<span class="number">1L</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SimpleJpaRepository의 findById(자식)가 SomeService(부모)의 트랜잭션을 사용한다면 어떻게 될까…?<br>먼저 SomeService 진입 시 새로운 트랜잭션이 생성(엔티티 매니저도 생성)되는 건 생략하고 그 이후 과정부터 지켜보자.  </p><ol><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java#L119">TransactionInterceptor의 invoke 메서드</a>에서 부모 클래스인 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L336">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L382">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L579">createTransactionIfNecessary 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L595">createTransactionIfNecessary 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L341">AbstractPlatformTransactionManager의 getTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L347">AbstractPlatformTransactionManager의 getTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L367">JpaTransactionManager의 doGetTransaction 메서드</a>를 호출한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doGetTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionObject</span>();</span><br><span class="line">    txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line"></span><br><span class="line">    <span class="type">EntityManagerHolder</span> <span class="variable">emHolder</span> <span class="operator">=</span> (EntityManagerHolder)</span><br><span class="line">            TransactionSynchronizationManager.getResource(obtainEntityManagerFactory());</span><br><span class="line">    <span class="keyword">if</span> (emHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Found thread-bound EntityManager [&quot;</span> + emHolder.getEntityManager() +</span><br><span class="line">                    <span class="string">&quot;] for JPA transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        txObject.setEntityManagerHolder(emHolder, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> txObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>이미 부모 트랜잭션에서 TransactionSynchronizationManager.bindResource 메서드를 호출했기 때문에 TransactionSynchronizationManager.getResource는 null이 아니다.<br>따라서 txObject에 emHolder를 초기화할 수 있는데, 부모 트랜잭션에서 만들어둔 엔티티 매니저 홀더이기 때문에 새로운 엔티티 매니저 홀더가 아니라고 마킹한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span></span><br><span class="line">        <span class="keyword">throws</span> TransactionException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use defaults if no transaction definition given.</span></span><br><span class="line">    <span class="type">TransactionDefinition</span> <span class="variable">def</span> <span class="operator">=</span> (definition != <span class="literal">null</span> ? definition : TransactionDefinition.withDefaults());</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">transaction</span> <span class="operator">=</span> doGetTransaction();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">debugEnabled</span> <span class="operator">=</span> logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;</span><br><span class="line">        <span class="comment">// Existing transaction found -&gt; check propagation behavior to find out how to behave.</span></span><br><span class="line">        <span class="keyword">return</span> handleExistingTransaction(def, transaction, debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L350">AbstractPlatformTransactionManager의 getTransaction 메서드</a>으로 돌아오면 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L391">JpaTransactionManager의 isExistingTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L392">JpaTransactionManager의 isExistingTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L692">JpaTransactionObject의 hasTransaction 매서드</a>를 호출한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.entityManagerHolder != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.entityManagerHolder.isTransactionActive());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>둘 다 true이기 때문에 hasTransaction도 true를 반환한다.<br>결국 isExistingTransaction(transaction)도 true이기 때문에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L408">handleExistingTransaction 메서드</a>를 호출한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TransactionStatus <span class="title function_">handleExistingTransaction</span><span class="params">(</span></span><br><span class="line"><span class="params">        TransactionDefinition definition, Object transaction, <span class="type">boolean</span> debugEnabled)</span></span><br><span class="line">        <span class="keyword">throws</span> TransactionException &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> prepareTransactionStatus(definition, transaction, <span class="literal">false</span>, newSynchronization, debugEnabled, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> DefaultTransactionStatus <span class="title function_">prepareTransactionStatus</span><span class="params">(</span></span><br><span class="line"><span class="params">        TransactionDefinition definition, <span class="meta">@Nullable</span> Object transaction, <span class="type">boolean</span> newTransaction,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> newSynchronization, <span class="type">boolean</span> debug, <span class="meta">@Nullable</span> Object suspendedResources)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DefaultTransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> newTransactionStatus(</span><br><span class="line">            definition, transaction, newTransaction, newSynchronization, debug, suspendedResources);</span><br><span class="line">    prepareSynchronization(status, definition);</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> DefaultTransactionStatus <span class="title function_">newTransactionStatus</span><span class="params">(</span></span><br><span class="line"><span class="params">        TransactionDefinition definition, <span class="meta">@Nullable</span> Object transaction, <span class="type">boolean</span> newTransaction,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> newSynchronization, <span class="type">boolean</span> debug, <span class="meta">@Nullable</span> Object suspendedResources)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">actualNewSynchronization</span> <span class="operator">=</span> newSynchronization &amp;&amp;</span><br><span class="line">            !TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultTransactionStatus</span>(</span><br><span class="line">            transaction, newTransaction, actualNewSynchronization,</span><br><span class="line">            definition.isReadOnly(), debug, suspendedResources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>새로운 트랜잭션이 아니라 부모 트랜잭션을 그대로 사용하는 것이기 때문에 newTransaction을 false로 마킹을 해서 TransactionStatus를 반환한다.<br>결국 새로운 트랜잭션을 시작한 게 아니기 때문에 엔티티 매니저 홀더도 부모가 쓰던 걸 물려받았고, 그렇기 때문에 새롭게 엔티티 매니저를 생성하지 않았다.<br>그럼 부모 트랜잭션부터 시작된 엔티티 매니저가 유지되기 때문에 엔티티 매니저의 1차 캐시도 유지된다고 볼 수 있다.</li></ol><p>그럼 자식 트랜잭션이 종료될 때는 엔티티 매니저를 종료할까??<br>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L336">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>로 돌아오자.  </p><ol><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L407">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L649">commitTransactionAfterReturning 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L654">commitTransactionAfterReturning 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L688">AbstractPlatformTransactionManager의 commit 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L711">AbstractPlatformTransactionManager의 commit 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L720">processCommit 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L790">processCommit 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L998">cleanupAfterCompletion 메서드</a>를 호출하고 있다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanupAfterCompletion</span><span class="params">(DefaultTransactionStatus status)</span> &#123;</span><br><span class="line">    status.setCompleted();</span><br><span class="line">    <span class="keyword">if</span> (status.isNewSynchronization()) &#123;</span><br><span class="line">        TransactionSynchronizationManager.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">        doCleanupAfterCompletion(status.getTransaction());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status.getSuspendedResources() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Resuming suspended transaction after completion of inner transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">transaction</span> <span class="operator">=</span> (status.hasTransaction() ? status.getTransaction() : <span class="literal">null</span>);</span><br><span class="line">        resume(transaction, (SuspendedResourcesHolder) status.getSuspendedResources());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>transaction이 새로운 트랜잭션이 아니기 때문에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L615">JpaTransactionManager의 doCleanupAfterCompletion 메서드</a>를 호출하고 있지 않다.<br>해당 메서드 안에서 쓰레드 로컬 맵도 지우고, 엔티티 매니저도 종료하는 등의 작업을 하고 있는데 호출하지 않기 때문에 엔티티 매니저는 종료되지 않는다.</li></ol><p>즉, 부모 트랜잭션이 종료되기 전까지 엔티티 매니저를 새롭게 생성하거나 종료하는 일이 발생하지 않기 때문에 엔티티 매니저가 유효하고, 1차 캐시도 공유된다는 걸 알 수 있다. (물론 부모 트랜잭션을 사용하지 않는 Propagation.REQUIRES_NEW를 사용한다면 부모 트랜잭션을 사용하지 않고 새로운 트랜잭션을 만들기 때문에 엔티티 매니저를 새롭게 생성하고 해당 트랜잭션이 종료될 때 엔티티 매니저도 같이 종료될 것이다.)<br>트랜잭션 내에서만 1차 캐시의 성능 최적화를 맛 볼 수 있기 때문에 생각보다 1차 캐시의 hit rate가 낮을 것 같다.   </p><h2 id="OSIV가-켜져있을-때"><a href="#OSIV가-켜져있을-때" class="headerlink" title="OSIV가 켜져있을 때"></a>OSIV가 켜져있을 때</h2><p>Spring Boot의 Auto Configuration인 <a href="https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java#L206">JpaWebConfiguration</a>을 보면 아래와 같이 설정이 돼있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(WebMvcConfigurer.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123; OpenEntityManagerInViewInterceptor.class, OpenEntityManagerInViewFilter.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingFilterBean(OpenEntityManagerInViewFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.jpa&quot;, name = &quot;open-in-view&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JpaWebConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(JpaWebConfiguration.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">JpaWebConfiguration</span><span class="params">(JpaProperties jpaProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jpaProperties = jpaProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenEntityManagerInViewInterceptor <span class="title function_">openEntityManagerInViewInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.jpaProperties.getOpenInView() == <span class="literal">null</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;spring.jpa.open-in-view is enabled by default. &quot;</span></span><br><span class="line">                    + <span class="string">&quot;Therefore, database queries may be performed during view &quot;</span></span><br><span class="line">                    + <span class="string">&quot;rendering. Explicitly configure spring.jpa.open-in-view to disable this warning&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenEntityManagerInViewInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">openEntityManagerInViewInterceptorConfigurer</span><span class="params">(</span></span><br><span class="line"><span class="params">            OpenEntityManagerInViewInterceptor interceptor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">                registry.addWebRequestInterceptor(interceptor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>spring.jpa.open-in-view</code>가 설정돼있지 않거나 true로 설정돼있으면 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.java#L59">OpenEntityManagerInViewInterceptor</a>가 적용된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenEntityManagerInViewInterceptor</span> <span class="keyword">extends</span> <span class="title class_">EntityManagerFactoryAccessor</span> <span class="keyword">implements</span> <span class="title class_">AsyncWebRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preHandle</span><span class="params">(WebRequest request)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="type">EntityManagerFactory</span> <span class="variable">emf</span> <span class="operator">=</span> obtainEntityManagerFactory();</span><br><span class="line">        <span class="keyword">if</span> (TransactionSynchronizationManager.hasResource(emf)) &#123;</span><br><span class="line">            <span class="comment">// Do not modify the EntityManager: just mark the request accordingly.</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> (Integer) request.getAttribute(key, WebRequest.SCOPE_REQUEST);</span><br><span class="line">            <span class="type">int</span> <span class="variable">newCount</span> <span class="operator">=</span> (count != <span class="literal">null</span> ? count + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Opening JPA EntityManager in OpenEntityManagerInViewInterceptor&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> createEntityManager();</span><br><span class="line">                <span class="type">EntityManagerHolder</span> <span class="variable">emHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EntityManagerHolder</span>(em);</span><br><span class="line">                TransactionSynchronizationManager.bindResource(emf, emHolder);</span><br><span class="line">    </span><br><span class="line">                <span class="type">AsyncRequestInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AsyncRequestInterceptor</span>(emf, emHolder);</span><br><span class="line">                asyncManager.registerCallableInterceptor(key, interceptor);</span><br><span class="line">                asyncManager.registerDeferredResultInterceptor(key, interceptor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (PersistenceException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DataAccessResourceFailureException</span>(<span class="string">&quot;Could not create JPA EntityManager&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(WebRequest request, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!decrementParticipateCount(request)) &#123;</span><br><span class="line">            <span class="type">EntityManagerHolder</span> <span class="variable">emHolder</span> <span class="operator">=</span> (EntityManagerHolder)</span><br><span class="line">                    TransactionSynchronizationManager.unbindResource(obtainEntityManagerFactory());</span><br><span class="line">            logger.debug(<span class="string">&quot;Closing JPA EntityManager in OpenEntityManagerInViewInterceptor&quot;</span>);</span><br><span class="line">            EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요청이 들어오면 preHandle 메서드가 실행되는데 TransactionSynchronizationManager.hasResource(emf)는 아마 false가 반환될 것이다. (대부분 그럴 거 같은데 100%는 아닐 것이다.)<br>TransactionSynchronizationManager 안의 쓰레드 로컬 맵(resources 변수)에 해당 키(emf)가 존재하는지 확인하는 메서드인데 아직 해당 키가 존재하지 않을 것이기 때문이다.<br>그럼 else 문을 타서 새롭게 엔티티 매니저, 엔티티 매니저 홀더를 생성하고 TransactionSynchronizationManager의 bindResource 메서드에서 쓰레드 로컬 맵(resources 변수)에 엔티티 매니저 팩토리를 키로, 엔티티 매니저 홀더를 값으로 넣게 된다.</p><p>그리고 뷰 렌더링이 모두 끝나면 afterCompletion이 호출되는데 이 때 TransactionSynchronizationManager의 unbindResource 메서드에서 쓰레드 로컬 맵(resources 변수)에 할당된 키(엔티티 매니저 팩토리)도 제거하고 엔티티 매니저도 종료하는 걸 볼 수 있다.</p><p>그럼 인터셉터에서 엔티티 매니저를 생성한 이후에 또 생성하거나 미리 제거하는 일은 없는 걸까??</p><h3 id="엔티티-매니저-생성-1"><a href="#엔티티-매니저-생성-1" class="headerlink" title="엔티티 매니저 생성"></a>엔티티 매니저 생성</h3><ol><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java#L119">TransactionInterceptor의 invoke 메서드</a>에서 부모 클래스인 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L336">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L382">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L579">createTransactionIfNecessary 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L595">createTransactionIfNecessary 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L341">AbstractPlatformTransactionManager의 getTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L347">AbstractPlatformTransactionManager의 getTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L367">JpaTransactionManager의 doGetTransaction 메서드</a>를 호출한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doGetTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionObject</span>();</span><br><span class="line">    txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line"></span><br><span class="line">    <span class="type">EntityManagerHolder</span> <span class="variable">emHolder</span> <span class="operator">=</span> (EntityManagerHolder)</span><br><span class="line">            TransactionSynchronizationManager.getResource(obtainEntityManagerFactory());</span><br><span class="line">    <span class="keyword">if</span> (emHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Found thread-bound EntityManager [&quot;</span> + emHolder.getEntityManager() +</span><br><span class="line">                    <span class="string">&quot;] for JPA transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        txObject.setEntityManagerHolder(emHolder, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> txObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>이미 OpenEntityManagerInViewInterceptor에서 TransactionSynchronizationManager.bindResource 메서드를 호출했기 때문에 TransactionSynchronizationManager.getResource는 null이 아니다.<br>따라서 txObject에 emHolder를 초기화할 수 있는데, OpenEntityManagerInViewInterceptor에서 만들어둔 엔티티 매니저 홀더이기 때문에 새로운 엔티티 매니저 홀더가 아니라고 마킹한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span></span><br><span class="line">        <span class="keyword">throws</span> TransactionException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use defaults if no transaction definition given.</span></span><br><span class="line">    <span class="type">TransactionDefinition</span> <span class="variable">def</span> <span class="operator">=</span> (definition != <span class="literal">null</span> ? definition : TransactionDefinition.withDefaults());</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">transaction</span> <span class="operator">=</span> doGetTransaction();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">debugEnabled</span> <span class="operator">=</span> logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;</span><br><span class="line">        <span class="comment">// Existing transaction found -&gt; check propagation behavior to find out how to behave.</span></span><br><span class="line">        <span class="keyword">return</span> handleExistingTransaction(def, transaction, debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L350">AbstractPlatformTransactionManager의 getTransaction 메서드</a>으로 돌아오면 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L391">JpaTransactionManager의 isExistingTransaction 메서드</a>를 호출한다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L392">JpaTransactionManager의 isExistingTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L692">JpaTransactionObject의 hasTransaction 매서드</a>를 호출한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.entityManagerHolder != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.entityManagerHolder.isTransactionActive());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>entityManagerHolder는 null이 아니지만 isTransactionActive가 false이기 때문에 hasTransaction은 false를 반환한다.<br>결국 isExistingTransaction(transaction)은 false이기 때문에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L408">handleExistingTransaction 메서드</a>를 호출하지 않는다.</li></ol><p>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L361">AbstractPlatformTransactionManager의 getTransaction 메서드</a>로 돌아와보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span></span><br><span class="line">        <span class="keyword">throws</span> TransactionException &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span></span><br><span class="line">    <span class="keyword">if</span> (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalTransactionStateException</span>(</span><br><span class="line">                <span class="string">&quot;No existing transaction found for transaction marked with propagation &#x27;mandatory&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED || </span><br><span class="line">            def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">            def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        <span class="type">SuspendedResourcesHolder</span> <span class="variable">suspendedResources</span> <span class="operator">=</span> suspend(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Creating new transaction with name [&quot;</span> + def.getName() + <span class="string">&quot;]: &quot;</span> + def);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> startTransaction(def, transaction, debugEnabled, suspendedResources);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">            resume(<span class="literal">null</span>, suspendedResources);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@Transactional의 기본 propagation 설정은 PROPAGATION_REQUIRED이기 때문에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L394">startTransaction 메서드</a>를 호출한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TransactionStatus <span class="title function_">startTransaction</span><span class="params">(TransactionDefinition definition, Object transaction,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> debugEnabled, <span class="meta">@Nullable</span> SuspendedResourcesHolder suspendedResources)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">newSynchronization</span> <span class="operator">=</span> (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">    <span class="type">DefaultTransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> newTransactionStatus(</span><br><span class="line">            definition, transaction, <span class="literal">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">    doBegin(transaction, definition);</span><br><span class="line">    prepareSynchronization(status, definition);</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> DefaultTransactionStatus <span class="title function_">newTransactionStatus</span><span class="params">(</span></span><br><span class="line"><span class="params">        TransactionDefinition definition, <span class="meta">@Nullable</span> Object transaction, <span class="type">boolean</span> newTransaction,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> newSynchronization, <span class="type">boolean</span> debug, <span class="meta">@Nullable</span> Object suspendedResources)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">actualNewSynchronization</span> <span class="operator">=</span> newSynchronization &amp;&amp;</span><br><span class="line">            !TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultTransactionStatus</span>(</span><br><span class="line">            transaction, newTransaction, actualNewSynchronization,</span><br><span class="line">            definition.isReadOnly(), debug, suspendedResources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>새롭게 트랜잭션을 시작하는 것이기 때문에 TransactionStatus를 만들 때 newTransaction을 true로 만든다.<br>그리고나서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L396">JpaTransactionManager의 doBegin 메서드</a>를 호출한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBegin</span><span class="params">(Object transaction, TransactionDefinition definition)</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> (JpaTransactionObject) transaction;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!txObject.hasEntityManagerHolder() ||</span><br><span class="line">                txObject.getEntityManagerHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">            <span class="type">EntityManager</span> <span class="variable">newEm</span> <span class="operator">=</span> createEntityManagerForTransaction();</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Opened new EntityManager [&quot;</span> + newEm + <span class="string">&quot;] for JPA transaction&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            txObject.setEntityManagerHolder(<span class="keyword">new</span> <span class="title class_">EntityManagerHolder</span>(newEm), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// Bind the entity manager holder to the thread.</span></span><br><span class="line">        <span class="keyword">if</span> (txObject.isNewEntityManagerHolder()) &#123;</span><br><span class="line">            TransactionSynchronizationManager.bindResource(</span><br><span class="line">                    obtainEntityManagerFactory(), txObject.getEntityManagerHolder());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OpenEntityManagerInViewInterceptor에서 생성한 엔티티 매니저 홀더를 txObject에 초기화 했기 때문에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L480">createEntityManagerForTransaction 메서드</a>를 호출하지 않는다.<br>즉, 새로운 트랜잭션은 맞지만 entity manager는 새롭게 생성하지 않고 OpenEntityManagerInViewInterceptor에서 생성한 엔티티 매니저를 그대로 사용하는 걸 알 수 있다.</p><h3 id="엔티티-매니저-종료-1"><a href="#엔티티-매니저-종료-1" class="headerlink" title="엔티티 매니저 종료"></a>엔티티 매니저 종료</h3><p>다시 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L336">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>로 돌아오자.  </p><ol><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L407">TransactionAspectSupport의 invokeWithinTransaction 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L649">commitTransactionAfterReturning 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L654">commitTransactionAfterReturning 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L688">AbstractPlatformTransactionManager의 commit 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L711">AbstractPlatformTransactionManager의 commit 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L720">processCommit 메서드</a>를 호출하고 있다.</li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L790">processCommit 메서드</a>에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L998">cleanupAfterCompletion 메서드</a>를 호출하고 있다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanupAfterCompletion</span><span class="params">(DefaultTransactionStatus status)</span> &#123;</span><br><span class="line">    status.setCompleted();</span><br><span class="line">    <span class="keyword">if</span> (status.isNewSynchronization()) &#123;</span><br><span class="line">        TransactionSynchronizationManager.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">        doCleanupAfterCompletion(status.getTransaction());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status.getSuspendedResources() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Resuming suspended transaction after completion of inner transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">transaction</span> <span class="operator">=</span> (status.hasTransaction() ? status.getTransaction() : <span class="literal">null</span>);</span><br><span class="line">        resume(transaction, (SuspendedResourcesHolder) status.getSuspendedResources());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>OpenEntityManagerInViewInterceptor를 탔다고 하더라도 새로운 트랜잭션이 시작된 것이기 때문에 status.isNewTransaction()은 true이고 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L615">JpaTransactionManager의 doCleanupAfterCompletion 메서드</a>를 호출한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doCleanupAfterCompletion</span><span class="params">(Object transaction)</span> &#123;</span><br><span class="line">    <span class="type">JpaTransactionObject</span> <span class="variable">txObject</span> <span class="operator">=</span> (JpaTransactionObject) transaction;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the entity manager holder from the thread, if still there.</span></span><br><span class="line">    <span class="comment">// (Could have been removed by EntityManagerFactoryUtils in order</span></span><br><span class="line">    <span class="comment">// to replace it with an unsynchronized EntityManager).</span></span><br><span class="line">    <span class="keyword">if</span> (txObject.isNewEntityManagerHolder()) &#123;</span><br><span class="line">        TransactionSynchronizationManager.unbindResourceIfPossible(obtainEntityManagerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Remove the entity manager holder from the thread.</span></span><br><span class="line">    <span class="keyword">if</span> (txObject.isNewEntityManagerHolder()) &#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> txObject.getEntityManagerHolder().getEntityManager();</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Closing JPA EntityManager [&quot;</span> + em + <span class="string">&quot;] after transaction&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        EntityManagerFactoryUtils.closeEntityManager(em);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Not closing pre-bound JPA EntityManager after transaction&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>엔티티 매니저 홀더는 새롭게 생성한 게 아니라 OpenEntityManagerInViewInterceptor에서 생성한 것이기 때문에 txObject.isNewEntityManagerHolder 메서드는 전부 false이다.<br>따라서 엔티티 매니저는 종료되지 않고 계속 살아있게 된다.</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;3줄-요약&quot;&gt;&lt;a href=&quot;#3줄-요약&quot; class=&quot;headerlink&quot; title=&quot;3줄 요약&quot;&gt;&lt;/a&gt;3줄 요약&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;OSIV가 꺼져있으면 트랜잭션이 시작될 때 엔티티 매니저가 생성되고, 트랜잭션이 끝날 때 엔티티 매니저를 종료한다.&lt;/li&gt;
&lt;li&gt;OSIV가 꺼져있고, 다른 트랜잭션이라면 엔티티 매니저가 공유되지 않기 때문에 엔티티 매니저의 1차 캐시도 서로 공유되지 않는다.&lt;/li&gt;
&lt;li&gt;OSIV가 켜져있으면 요청 당 엔티티 매니저는 한 번 생성되고, 뷰 렌더링이 끝날 때까지 엔티티 매니저는 종료되지 않고 트랜잭션이 다르더라도 1차 캐시가 공유된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;들어가기에-앞서&quot;&gt;&lt;a href=&quot;#들어가기에-앞서&quot; class=&quot;headerlink&quot; title=&quot;들어가기에 앞서&quot;&gt;&lt;/a&gt;들어가기에 앞서&lt;/h2&gt;&lt;p&gt;엔티티 매니저 팩토리는 생성 비용이 비싸서 대부분 어플리케이션 당 하나를 생성하는 편이고, 엔티티 매니저는 생성 비용이 비싸지 않아서 어플리케이션에서 여러 번 생성된다.&lt;br&gt;하지만 엔티티 매니저는 쓰레드 세이프 하지 않기 때문에, 쓰레드 당 하나를 생성해야할 것 같고 Spring MVC는 리퀘스트 당 하나의 쓰레드가 할당되기 때문에 리퀘스트 당 하나의 엔티티 매니저가 생성될 것만 같은 기분이 든다.&lt;br&gt;나 또한 그렇게 알고 있었는데 아래 코드를 통해 뭔가 의문이 생겼다.&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeRepository&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;JpaRepository&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;SomeEntity, Long&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeService&lt;/span&gt;&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; repository: SomeRepository&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; someEntity = repository.findById(&lt;span class=&quot;number&quot;&gt;1L&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; someEntity2 = repository.findById(&lt;span class=&quot;number&quot;&gt;1L&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Back-end" scheme="https://perfectacle.github.io/categories/Back-end/"/>
    
    <category term="DB" scheme="https://perfectacle.github.io/categories/Back-end/DB/"/>
    
    <category term="JPA" scheme="https://perfectacle.github.io/categories/Back-end/DB/JPA/"/>
    
    
    <category term="JPA" scheme="https://perfectacle.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>(JPA) Readonly 트랜잭션은 트랜잭션을 시작하지만 flush를 하지 않는다.</title>
    <link href="https://perfectacle.github.io/2021/05/05/readonly-transaction-begin-transaction/"/>
    <id>https://perfectacle.github.io/2021/05/05/readonly-transaction-begin-transaction/</id>
    <published>2021-05-05T17:46:16.000Z</published>
    <updated>2022-06-06T08:23:56.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3줄-요약"><a href="#3줄-요약" class="headerlink" title="3줄 요약"></a>3줄 요약</h1><ol><li>@Transaction(readOnly &#x3D; true)로 설정해도 트랜잭션은 시작된다. (transaction isolation level 보장)</li><li>readOnly 트랜잭션도 시작한 트랜잭션을 종료시켜야하기 때문에 커밋도 한다.</li><li>readOnly 트랜잭션의 Hibernate Session의 FlushMode는 Manual로 강제하기 때문에 트랜잭션을 커밋하기 전에 flush를 하지 않는다. (readOnly 보장)</li></ol><h2 id="Transaction-readOnly-x3D-true-로-설정해도-트랜잭션은-시작된다"><a href="#Transaction-readOnly-x3D-true-로-설정해도-트랜잭션은-시작된다" class="headerlink" title="@Transaction(readOnly &#x3D; true)로 설정해도 트랜잭션은 시작된다."></a>@Transaction(readOnly &#x3D; true)로 설정해도 트랜잭션은 시작된다.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SomeEntityRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Parent, Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line">    List&lt;Parent&gt; <span class="title function_">findByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> SomeService &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SomeEntityRepository repository;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SomeService</span><span class="params">(<span class="keyword">final</span> SomeEntityRepository repository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.repository = repository;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        repository.findByName(<span class="string">&quot;qwer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/05/readonly-transaction-begin-transaction/transaction-interceptor.png" class=""><p>repository의 구현체는 프록시 객체로써 인터페이스이기 때문에 jdk dynamic 프록시 객체가 생성이 된다.<br>또한 TransactionInterceptor라는 Advisor를 가지고 있으며 </p><ol><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java#L119">TransactionInterceptor.invoke()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L382">TransactionAspectSupport.invokeWithinTransaction()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L595">TransactionAspectSupport.createTransactionIfNecessary()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L373">AbstractPlatformTransactionManager.getTransaction()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L400">AbstractPlatformTransactionManager.startTransaction()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L421">JpaTransactionManager.doBegin()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java#L164">HibernateJpaDialect.beginTransaction()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/engine/transaction/internal/TransactionImpl.java#L83">TransactionImpl.begin()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/resource/transaction/backend/jdbc/internal/JdbcResourceLocalTransactionCoordinatorImpl.java#L246">JdbcResourceLocalTransactionCoordinatorImpl.TransactionDriverControlImpl.begin()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/resource/jdbc/internal/LogicalConnectionManagedImpl.java#L285">LogicalConnectionManagedImpl.begin()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/resource/jdbc/internal/AbstractLogicalConnectionImplementor.java#L68">AbstractLogicalConnectionImplementor.begin()</a></li></ol><p>위와 같은 메서드 호출을 통해서 실제로 트랜잭션을 시작하게 된다.</p><h2 id="Transaction-readOnly-x3D-true-에-의해-시작된-트랜잭션은-flush를-하지-않는다"><a href="#Transaction-readOnly-x3D-true-에-의해-시작된-트랜잭션은-flush를-하지-않는다" class="headerlink" title="@Transaction(readOnly &#x3D; true)에 의해 시작된 트랜잭션은 flush를 하지 않는다."></a>@Transaction(readOnly &#x3D; true)에 의해 시작된 트랜잭션은 flush를 하지 않는다.</h2><p><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java#L136">HibernateJpaDialect.beginTransaction()</a> 을 타고 보다보면 아래와 같은 흐름을 따라가게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">beginTransaction</span><span class="params">(EntityManager entityManager, TransactionDefinition definition)</span></span><br><span class="line">        <span class="keyword">throws</span> PersistenceException, SQLException, TransactionException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> getSession(entityManager);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (definition.getTimeout() != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">        session.getTransaction().setTimeout(definition.getTimeout());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isolationLevelNeeded</span> <span class="operator">=</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">previousIsolationLevel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">preparedCon</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isolationLevelNeeded || definition.isReadOnly()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.prepareConnection) &#123;</span><br><span class="line">            preparedCon = HibernateConnectionHandle.doGetConnection(session);</span><br><span class="line">            previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(preparedCon, definition);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isolationLevelNeeded) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidIsolationLevelException</span>(getClass().getSimpleName() +</span><br><span class="line">                    <span class="string">&quot; does not support custom isolation levels since the &#x27;prepareConnection&#x27; flag is off.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Standard JPA transaction begin call for full JPA context setup...</span></span><br><span class="line">    entityManager.getTransaction().begin();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adapt flush mode and store previous isolation level, if any.</span></span><br><span class="line">    <span class="type">FlushMode</span> <span class="variable">previousFlushMode</span> <span class="operator">=</span> prepareFlushMode(session, definition.isReadOnly());</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> FlushMode <span class="title function_">prepareFlushMode</span><span class="params">(Session session, <span class="type">boolean</span> readOnly)</span> <span class="keyword">throws</span> PersistenceException &#123;</span><br><span class="line">    <span class="type">FlushMode</span> <span class="variable">flushMode</span> <span class="operator">=</span> (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session);</span><br><span class="line">    Assert.state(flushMode != <span class="literal">null</span>, <span class="string">&quot;No FlushMode from Session&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (readOnly) &#123;</span><br><span class="line">        <span class="comment">// We should suppress flushing for a read-only transaction.</span></span><br><span class="line">        <span class="keyword">if</span> (!flushMode.equals(FlushMode.MANUAL)) &#123;</span><br><span class="line">            session.setFlushMode(FlushMode.MANUAL);</span><br><span class="line">            <span class="keyword">return</span> flushMode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transaction의 설정이 readOnly &#x3D; true라면 Hibernate Session의 FlushMode를 MANUAL(명시적으로 <a href="https://docs.oracle.com/javaee/7/api/javax/persistence/EntityManager.html#flush--">EntityManager.flush()</a> 메서드를 호출하기 전까지 flush 되지 않음)로 강제하고 있다.</p><p>그리고 나서 실질적인 로직이 끝난 이후에 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L380">TransactionAspectSupport.invokeWithinTransaction()</a> 메서드에서 아래와 같은 호출 흐름을 가진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">invokeWithinTransaction</span><span class="params">(Method method, <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> InvocationCallback invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (txAttr == <span class="literal">null</span> || !(ptm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line">        <span class="comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span></span><br><span class="line">        <span class="type">TransactionInfo</span> <span class="variable">txInfo</span> <span class="operator">=</span> createTransactionIfNecessary(ptm, txAttr, joinpointIdentification);</span><br><span class="line"></span><br><span class="line">        Object retVal;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// This is an around advice: Invoke the next interceptor in the chain.</span></span><br><span class="line">            <span class="comment">// This will normally result in a target object being invoked.</span></span><br><span class="line">            retVal = invocation.proceedWithInvocation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">// target invocation exception</span></span><br><span class="line">            completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            cleanupTransactionInfo(txInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (retVal != <span class="literal">null</span> &amp;&amp; vavrPresent &amp;&amp; VavrDelegate.isVavrTry(retVal)) &#123;</span><br><span class="line">            <span class="comment">// Set rollback-only in case of Vavr failure matching our rollback rules...</span></span><br><span class="line">            <span class="type">TransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> txInfo.getTransactionStatus();</span><br><span class="line">            <span class="keyword">if</span> (status != <span class="literal">null</span> &amp;&amp; txAttr != <span class="literal">null</span>) &#123;</span><br><span class="line">                retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        commitTransactionAfterReturning(txInfo);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>invocation.proceedWithInvocation()에 의해 트랜잭션 내부 로직을 호출한다.  </li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L654">TransactionAspectSupport.commitTransactionAfterReturning()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L711">AbstractPlatformTransactionManager.commit()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java#L743">AbstractPlatformTransactionManager.processCommit()</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java#L562">JpaTransactionManager.doCommit()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/engine/transaction/internal/TransactionImpl.java#L101">TransactionImpl.commit()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/resource/transaction/backend/jdbc/internal/JdbcResourceLocalTransactionCoordinatorImpl.java#L281">JdbcResourceLocalTransactionCoordinatorImpl.TransactionDriverControlImpl.commit()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/resource/transaction/backend/jdbc/internal/JdbcResourceLocalTransactionCoordinatorImpl.java#L183">JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/engine/jdbc/internal/JdbcCoordinatorImpl.java#L448">JdbcCoordinatorImpl.beforeTransactionCompletion()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java#L2409">SessionImpl.beforeTransactionCompletion()</a></li><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java#L3268">SessionImpl.flushBeforeTransactionCompletion()</a></li></ol><p>SessionImpl.flushBeforeTransactionCompletion 코드를 보면 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flushBeforeTransactionCompletion</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">doFlush</span> <span class="operator">=</span> isTransactionFlushable()</span><br><span class="line">            &amp;&amp; getHibernateFlushMode() != FlushMode.MANUAL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( doFlush ) &#123;</span><br><span class="line">            managedFlush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionMapperStandardImpl.INSTANCE.mapManagedFlushFailure( <span class="string">&quot;error during managed flush&quot;</span>, re, <span class="built_in">this</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 readOnly이면 Hibernate Session의 Flush 모드를 MANUAL로 강제했기 때문에 getHibernateFlushMode()는 MANUAL이 나오기 때문에<br><code>getHibernateFlushMode() != FlushMode.MANUAL</code>는 false이기 때문에 doFlush는 false라서 managedFlush 메서드를 호출하지 않아서 실질적으로 flush가 호출되지 않는다.</p><h2 id="Transaction-readOnly-x3D-true-에-의해-시작된-트랜잭션도-종료를-해야하기-때문에-커밋을-한다"><a href="#Transaction-readOnly-x3D-true-에-의해-시작된-트랜잭션도-종료를-해야하기-때문에-커밋을-한다" class="headerlink" title="@Transaction(readOnly &#x3D; true)에 의해 시작된 트랜잭션도 종료를 해야하기 때문에 커밋을 한다."></a>@Transaction(readOnly &#x3D; true)에 의해 시작된 트랜잭션도 종료를 해야하기 때문에 커밋을 한다.</h2><p>flush는 하지 않았지만 트랜잭션을 시작했기 때문에 트랜잭션을 종료해야 정상적으로 커넥션을 반환하게 된다.<br>다시 <a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/resource/transaction/backend/jdbc/internal/JdbcResourceLocalTransactionCoordinatorImpl.java#L282">JdbcResourceLocalTransactionCoordinatorImpl.TransactionDriverControlImpl.commit()</a> 로 돌아오면</p><ol><li><a href="https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/resource/jdbc/internal/AbstractLogicalConnectionImplementor.java#L86">AbstractLogicalConnectionImplementor.commit()</a></li><li><a href="https://github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/pool/ProxyConnection.java#L387">ProxyConnection.commit()</a></li><li><a href="https://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html#commit()">Connection.commit()</a></li></ol><p>위와 같은 메서드 호출을 통해 실제 DB 물리 커넥션에 commit을 날리기 때문에 위에서 시작한 트랜잭션을 종료하게 된다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;3줄-요약&quot;&gt;&lt;a href=&quot;#3줄-요약&quot; class=&quot;headerlink&quot; title=&quot;3줄 요약&quot;&gt;&lt;/a&gt;3줄 요약&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;@Transaction(readOnly &amp;#x3D; true)로 설정해도 트랜잭션은 시작된다. (transaction isolation level 보장)&lt;/li&gt;
&lt;li&gt;readOnly 트랜잭션도 시작한 트랜잭션을 종료시켜야하기 때문에 커밋도 한다.&lt;/li&gt;
&lt;li&gt;readOnly 트랜잭션의 Hibernate Session의 FlushMode는 Manual로 강제하기 때문에 트랜잭션을 커밋하기 전에 flush를 하지 않는다. (readOnly 보장)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Transaction-readOnly-x3D-true-로-설정해도-트랜잭션은-시작된다&quot;&gt;&lt;a href=&quot;#Transaction-readOnly-x3D-true-로-설정해도-트랜잭션은-시작된다&quot; class=&quot;headerlink&quot; title=&quot;@Transaction(readOnly &amp;#x3D; true)로 설정해도 트랜잭션은 시작된다.&quot;&gt;&lt;/a&gt;@Transaction(readOnly &amp;#x3D; true)로 설정해도 트랜잭션은 시작된다.&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SomeEntityRepository&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JpaRepository&lt;/span&gt;&amp;lt;Parent, Long&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Transactional(readOnly = true)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Parent&amp;gt; &lt;span class=&quot;title function_&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; SomeService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; SomeEntityRepository repository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;SomeService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; SomeEntityRepository repository)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.repository = repository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        repository.findByName(&lt;span class=&quot;string&quot;&gt;&amp;quot;qwer&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;img src=&quot;/2021/05/05/readonly-transaction-begin-transaction/transaction-interceptor.png&quot; class&gt;</summary>
    
    
    
    <category term="Back-end" scheme="https://perfectacle.github.io/categories/Back-end/"/>
    
    <category term="DB" scheme="https://perfectacle.github.io/categories/Back-end/DB/"/>
    
    <category term="JPA" scheme="https://perfectacle.github.io/categories/Back-end/DB/JPA/"/>
    
    
    <category term="JPA" scheme="https://perfectacle.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Netty 이벤트 핸들러 실행 순서</title>
    <link href="https://perfectacle.github.io/2021/02/28/netty-event-handler-order/"/>
    <id>https://perfectacle.github.io/2021/02/28/netty-event-handler-order/</id>
    <published>2021-02-28T15:53:46.000Z</published>
    <updated>2022-06-06T08:23:56.528Z</updated>
    
    <content type="html"><![CDATA[<p>Netty를 사용하다보면 채널 파이프라인에 여러 이벤트 핸들러를 추가하기 마련이다.<br>그러다보니 순서가 중요할 때가 있다.  </p><ol><li>클라에서 보낸 데이터 중에 헤더를 파싱하고,  </li><li>헤더에 따라 바디를 파싱하고,</li><li>바디를 토대로 뭔가를 또 처리해야하고…</li></ol><p>이런 식으로 N 개의 이벤트 핸들러를 붙여야하고, 순서가 중요하다보니 어떤 순서대로 실행되는지가 궁금해졌다.  </p><h2 id="Inbound-Event-Handler"><a href="#Inbound-Event-Handler" class="headerlink" title="Inbound Event Handler"></a>Inbound Event Handler</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleHandler1</span> : <span class="type">ChannelInboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">channelRead</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        ctx.fireChannelRead(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleHandler2</span> : <span class="type">ChannelInboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">channelRead</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        ctx.fireChannelRead(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleHandler3</span> : <span class="type">ChannelInboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">channelRead</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        ctx.fireChannelRead(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 채널 파이프라인에 순서대로 등록해주자.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">object</span> : ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initChannel</span><span class="params">(ch: <span class="type">Channel</span>)</span></span> &#123;</span><br><span class="line">      ch.pipeline()</span><br><span class="line">        .addLast(ExampleHandler1())</span><br><span class="line">        .addLast(ExampleHandler2())</span><br><span class="line">        .addLast(ExampleHandler3())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><img src="/2021/02/28/netty-event-handler-order/inbound-event-handler-order.png" class="" title="Bottom-Up 순서대로 실행되기 때문에 때문에 먼저 등록한 ExampleHandler1부터 순서대로 실행된다."><h2 id="Outbound-Event-Handler"><a href="#Outbound-Event-Handler" class="headerlink" title="Outbound Event Handler"></a>Outbound Event Handler</h2><p>Outbound Event를 발생시키기 위해서는 Inbound Event Handler에서 Outbound Event를 한 번 발생시켜야하기 때문에 둘을 짬뽕시켜보았다.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InboundHandler1</span> : <span class="type">ChannelInboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">channelRead</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        ctx.write(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutboundHandler2</span> : <span class="type">ChannelOutboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>, promise: <span class="type">ChannelPromise</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        ctx.write(msg, promise)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutboundHandler3</span> : <span class="type">ChannelOutboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>, promise: <span class="type">ChannelPromise</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        ctx.write(msg, promise)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 채널 파이프라인에 순서대로 등록해보았다.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> : ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initChannel</span><span class="params">(ch: <span class="type">Channel</span>)</span></span> &#123;</span><br><span class="line">      ch.pipeline()</span><br><span class="line">        .addLast(InboundHandler1())</span><br><span class="line">        .addLast(OutboundHandler2())</span><br><span class="line">        .addLast(OutboundHandler3())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 1만 출력되고, 2와 3은 출력되지 않았다.<br>답은 Outbound Event는 Top-down 순서로 실행되기 때문이다.</p><img src="/2021/02/28/netty-event-handler-order/outbound-event-handler-order.png" class="" title="Top-down 순서대로 실행되기 때문에 Outbound Event가 발생한 InboundHandler 아래에 OutboundHandler가 없어서 이벤트를 처리하지 못했다."><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> : ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initChannel</span><span class="params">(ch: <span class="type">Channel</span>)</span></span> &#123;</span><br><span class="line">      ch.pipeline()</span><br><span class="line">        .addLast(OutboundHandler3())</span><br><span class="line">        .addLast(OutboundHandler2())</span><br><span class="line">        .addLast(InboundHandler1())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/02/28/netty-event-handler-order/outbound-event-handler-order-2.png" class="" title="Top-down 순서대로 실행되기 때문에 Outbound Event가 발생한 InboundHandler 아래에 OutboundHandler들이 등록된 순서 역순으로 실행된다.">  <p>OutboundHandler2, OutboundHandler3 순서대로 실행돼서 1이 찍힌 후에 2와 3이 찍힌다.</p><h2 id="Duplex-Event-Handler"><a href="#Duplex-Event-Handler" class="headerlink" title="Duplex Event Handler"></a>Duplex Event Handler</h2><p>Inbound&#x2F;Outbound Event를 모두 핸들링하는 Duplex Event Handler를 추가해서 실행 순서를 살펴보자.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InboundHandler1</span> : <span class="type">ChannelInboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">channelRead</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        ctx.write(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutboundHandler2</span> : <span class="type">ChannelOutboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>, promise: <span class="type">ChannelPromise</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        ctx.write(msg, promise)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuplexHandler3</span> : <span class="type">ChannelDuplexHandler</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">channelRead</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;3 - read&quot;</span>)</span><br><span class="line">        ctx.fireChannelRead(msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>, promise: <span class="type">ChannelPromise</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;3 - write&quot;</span>)</span><br><span class="line">        ctx.write(msg, promise)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutboundHandler4</span> : <span class="type">ChannelOutboundHandlerAdapter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">(ctx: <span class="type">ChannelHandlerContext</span>, msg: <span class="type">Any</span>, promise: <span class="type">ChannelPromise</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">        ctx.write(msg, promise)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>채널 파이프라인에 추가해주자.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> : ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initChannel</span><span class="params">(ch: <span class="type">Channel</span>)</span></span> &#123;</span><br><span class="line">      ch.pipeline()</span><br><span class="line">        .addLast(OutboundHandler4())</span><br><span class="line">        .addLast(DuplexHandler3())</span><br><span class="line">        .addLast(OutboundHandler2())</span><br><span class="line">        .addLast(InboundHandler1())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/02/28/netty-event-handler-order/duplex-event-handler-order.png" class="">  <p>Inbound Handler는 Bottom-up 순서대로 실행되기 때문에</p><ol><li>먼저 등록된 DuplexHandler3의 <code>3 - read</code> 출력</li><li>그 후 등록된 InboundHandler1의 <code>1</code> 출력</li></ol><p>Outbound Handler는 Top-down 순서대로 실행되기 때문에</p><ol><li>OutboundHandler2의 <code>2</code> 출력</li><li>DuplexHandler3의 <code>3 - write</code> 출력</li><li>OutboundHandler4의 <code>4</code> 출력</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Netty를 사용하다보면 채널 파이프라인에 여러 이벤트 핸들러를 추가하기 마련이다.&lt;br&gt;그러다보니 순서가 중요할 때가 있다.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;클라에서 보낸 데이터 중에 헤더를 파싱하고,  &lt;/li&gt;
&lt;li&gt;헤더에 따라 바디를 파싱하고,&lt;/li&gt;
&lt;li&gt;바디를 토대로 뭔가를 또 처리해야하고…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런 식으로 N 개의 이벤트 핸들러를 붙여야하고, 순서가 중요하다보니 어떤 순서대로 실행되는지가 궁금해졌다.  &lt;/p&gt;
&lt;h2 id=&quot;Inbound-Event-Handler&quot;&gt;&lt;a href=&quot;#Inbound-Event-Handler&quot; class=&quot;headerlink&quot; title=&quot;Inbound Event Handler&quot;&gt;&lt;/a&gt;Inbound Event Handler&lt;/h2&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleHandler1&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;ChannelInboundHandlerAdapter&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;channelRead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx: &lt;span class=&quot;type&quot;&gt;ChannelHandlerContext&lt;/span&gt;, msg: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println(&lt;span class=&quot;string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx.fireChannelRead(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleHandler2&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;ChannelInboundHandlerAdapter&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;channelRead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx: &lt;span class=&quot;type&quot;&gt;ChannelHandlerContext&lt;/span&gt;, msg: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println(&lt;span class=&quot;string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx.fireChannelRead(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleHandler3&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;ChannelInboundHandlerAdapter&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;channelRead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx: &lt;span class=&quot;type&quot;&gt;ChannelHandlerContext&lt;/span&gt;, msg: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println(&lt;span class=&quot;string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx.fireChannelRead(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Note" scheme="https://perfectacle.github.io/categories/Note/"/>
    
    <category term="Netty" scheme="https://perfectacle.github.io/categories/Note/Netty/"/>
    
    
    <category term="TCP" scheme="https://perfectacle.github.io/tags/TCP/"/>
    
    <category term="Netty" scheme="https://perfectacle.github.io/tags/Netty/"/>
    
  </entry>
  
</feed>
